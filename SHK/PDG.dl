.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: symbol
.type MethodInv <: symbol
.type BasicBlock <: Instruction
.type InsBB = BasicBlock | Instruction

.decl Method_FirstInstruction(m:Method, ins:Instruction)
.input Method_FirstInstruction(IO="file", filename="Method_FirstInstruction.csv", delimiter="\t")

.decl OptInstructionFromMethodIndex(?method:Method, ?insNr:number, ?varAssign:Instruction)
.input OptInstructionFromMethodIndex(IO="file", filename="OptInstructionFromMethodIndex.csv", delimiter="\t")


.decl NextNonDomPredecessorIndexToSameBB(?ass:BasicBlock, ?ass1:BasicBlock, ?ass2:BasicBlock)
.input NextNonDomPredecessorIndexToSameBB(IO="file", filename="NextNonDomPredecessorIndexToSameBB.csv", delimiter="\t")

.decl BasicBlockHead(?inst:Instruction, ?ins:BasicBlock)
.input BasicBlockHead(IO="file", filename="BasicBlockHead.csv", delimiter="\t")

.decl BasicBlockTail(?BB:BasicBlock, ?ins:Instruction)
.input BasicBlockTail(IO="file", filename="BasicBlockTail.csv", delimiter="\t")


.decl If(?ifNode:Instruction, ?lineNr:number, ?jump:number, ?method:Method)
.input If(IO="file", filename="If.facts", delimiter="\t")

.decl MayPredecessorBBModuloThrow(?inst:BasicBlock, ?inst1:BasicBlock)
.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")


.decl PhiNodeHead(?insn:BasicBlock, ?headInsn:BasicBlock)
.input PhiNodeHead(IO="file", filename="PhiNodeHead.csv", delimiter="\t")

.decl Dominates(?dominator:BasicBlock, ?insn:BasicBlock)
.input Dominates(IO="file", filename="Dominates.csv", delimiter="\t")

.decl BasicBlockBegin(?ass:BasicBlock)
.input BasicBlockBegin(IO="file", filename="BasicBlockBegin.csv", delimiter="\t")


.decl AllBB(BB:BasicBlock)
.output AllBB

.decl Def(ins :Instruction, var: Var)
.input Def(IO="file", filename="Def.csv", delimiter="\t")


.decl Use(BB1 :Instruction, var: Var)
.input Use(IO="file", filename="Use.csv", delimiter="\t")
.output Use

.decl ControlDepBB(m:Method, BB1 : BasicBlock, BB2 : BasicBlock)
.output ControlDepBB


.decl ControlDep(m:Method,ins : Instruction, ins2 : Instruction)
.output ControlDep


.decl DataDep(m:Method,ins1 : Instruction, ins2 : Instruction)
.output DataDep

.decl NrOfSuccBB(BB:BasicBlock, c: number)
.output NrOfSuccBB
//.output NextNonDomPredecessorIndexToSameBB

.decl SuccessorBB(BB1: BasicBlock, BB2: BasicBlock)
.output SuccessorBB

.decl LinkBBToNew(?BB2: InsBB, ?BB1: BasicBlock)
.output LinkBBToNew
// component DEF / USE
// inverse domination

.decl DominatesItsPredecessorInstruction(ins: Instruction, dom: BasicBlock)
.input DominatesItsPredecessorInstruction(IO="file", filename="DominatesItsPredecessorInstruction.csv", delimiter="\t")

.decl NonStrictPostDom(ins: BasicBlock, BB1:BasicBlock)
.output NonStrictPostDom

.decl StrictPostDom(ins: BasicBlock, BB1:BasicBlock)
.output StrictPostDom

.decl Return(ins:Instruction, n:number, v:Var, m: Method)
.input Return(IO="file", filename="Return.facts", delimiter="\t")

.decl ReturnVoid(ins: Instruction, n:number, m:Method)
.input ReturnVoid(IO="file", filename="ReturnVoid.facts", delimiter="\t")

.decl Throw(ins: Instruction, n:number, v:Var, m:Method)
.input Throw(IO="file", filename="Throw.facts", delimiter="\t")
// copied from dependency analysis


.decl BBHeadInMethod(ins: BasicBlock, m:Method)
.input BBHeadInMethod(IO="file", filename="BBHeadInMethod.csv", delimiter="\t")
.output BBHeadInMethod

.decl CFGLeaf(?headInsn: Instruction, ?method: Method)
.output CFGLeaf

.decl DoesNotPostDominate(?postDomCandidate: Instruction, ?insn: Instruction)
//.output DoesNotPostDominate

.decl PDG_Nodes(m:Method, ins: Instruction, n: number)
.output PDG_Nodes

.decl PostDominates(?dominator: BasicBlock, ?getPDBB: BasicBlock)
.output PostDominates

.decl SameMethodBBHeads(?insn1:Instruction, ?insn2:Instruction)
.output SameMethodBBHeads
SameMethodBBHeads(?BB1, ?BB2) :-
   BBHeadInMethod(?insn1, ?method),
   BBHeadInMethod(?insn2, ?method),
   BasicBlockHead(?insn1, ?x1),
   LinkBBToNew(?x1, ?BB1),
   BasicBlockHead(?insn2, ?x2),
   LinkBBToNew(?x2, ?BB2).

CFGLeaf(?BB, ?method) :-
    Throw(?insn, _,_,?method),
    BasicBlockHead(?insn, ?BB).

/* An instruction is a CFG leaf if it ends with a return */
CFGLeaf(?BB, ?method) :-
    (Return(?ins, _, _, ?method);
    ReturnVoid(?ins, _, ?method)),
    BasicBlockHead(?ins, ?x),
    LinkBBToNew(?x, ?BB).

/* Nothing post-dominates a CFG leaf */
DoesNotPostDominate(?postDomCandidate, ?leafBB) :-
    BBHeadInMethod(?x, ?method),
    LinkBBToNew(?x, ?postDomCandidate),
    CFGLeaf(?leafBB, ?method),
    ?postDomCandidate != ?leafBB.


DoesNotPostDominate(?postDomCandidate, ?BB1) :-
    DoesNotPostDominate(?postDomCandidate, ?y),
    MayPredecessorBBModuloThrow(?x, ?y),
    LinkBBToNew(?x, ?BB1),
    ?BB1 != ?postDomCandidate.


/* If we can't prove A does not post-dominate B with the other rules, then A post-dominates B.
 * The definition is such that we always get reflexivity: PostDominates(x,x).
 */
PostDominates(?domBB, ?getPDBB) :-
    SameMethodBBHeads(?dominator, ?insn),
    !DoesNotPostDominate(?dominator, ?insn),
    LinkBBToNew(?dominator, ?domBB),
    LinkBBToNew(?insn, ?getPDBB),
    ?domBB != ?getPDBB.


StrictPostDom(?domBB, ?getDomBB):-
    PostDominates(?domBB, ?getDomBB),
    !NonStrictPostDom(?domBB, ?getDomBB).


NonStrictPostDom(?domBB1, ?getDomBB):-
    PostDominates(?domBB1, ?getDomBB),
    PostDominates(?domBB2, ?getDomBB),
    ?domBB2 != ?domBB1,
    PostDominates(?domBB1, ?domBB2).


AllBB(?BB1):-
    BasicBlockHead( _,?BB3),
    LinkBBToNew(?BB3, ?BB1).

LinkBBToNew(?BB1, ?BB1):-
    BasicBlockHead(_,?BB1),
    !PhiNodeHead(?BB1, _).
    //contains("Example", ?BB1).

SuccessorBB(?BB1, ?BB2):- 
    MayPredecessorBBModuloThrow(?BB3, ?BB4),
    LinkBBToNew(?BB4, ?BB2),
    LinkBBToNew(?BB3, ?BB1),
    ?BB1 != ?BB2.

NrOfSuccBB(?BB1, ?c) :-
    AllBB(?BB1),
    ?c = count : {SuccessorBB(?BB1, _)}.

LinkBBToNew(?BB2, ?BB1):-
    (MayPredecessorBBModuloThrow(?BB1, _);
    MayPredecessorBBModuloThrow(_, ?BB1)),
    PhiNodeHead(?BB2, ?BB1).
    //contains("Example", ?BB1).

ControlDepBB(?method, ?BB1, ?BB2) :-
    SuccessorBB(?BB1, ?BB2),
    !StrictPostDom(?BB2, ?BB1),
    BBHeadInMethod(?BB1, ?method).

ControlDepBB(?method, ?BB1, ?BB3):-
    ControlDepBB(?method, ?BB1, ?BB2),
    PostDominates(?BB3, ?BB2),
    !StrictPostDom(?BB3, ?BB1),
    ?BB3 != ?BB1,
    ?BB3 != ?BB2.

// the last Statement of upper BB is the one, that splits control flow
// so it's the only statement which CÅ”EATES control dependencies
// in the receiving BB, all Statements are dependent
ControlDep(?method, ?ins1, ?ins2):-
    ControlDepBB(?method, ?BB1,?BB2),
    LinkBBToNew(?BB, ?BB1),
    BasicBlockTail(?BB,?ins1),
    (BasicBlockHead(?ins2, ?BB2);
    LinkBBToNew(?ins2, ?BB2)).

ControlDep(?method, ?ins1, ?ins3):-
    ControlDepBB(?method, ?BB1,?BB2),
    LinkBBToNew(?BB, ?BB1),
    BasicBlockTail(?BB,?ins1),
    LinkBBToNew(?ins2, ?BB2),
    BasicBlockHead(?ins3, ?ins2).

// if function uses parameter ?ins1 can be first statement
// then it does NOT appear in BasicBlockHead, but only in MethodFirstInstruction.csv
// thus find method name via ?ins
DataDep(?method, ?ins1, ?ins2Head):-
    Def(?ins1, ?var),
    Use(?ins2, ?var),
    //contains("Example", ?ins1),
    (BasicBlockHead(?ins1, ?head),
    BBHeadInMethod(?head, ?method);
    Method_FirstInstruction(?method, ?ins1)),
    PhiNodeHead(?ins2, ?ins2Head),
    (PhiNodeHead(?ins1, ?ins1);
    !PhiNodeHead(?ins1, _)).

DataDep(?method, ?ins1, ?ins2):-
    Def(?ins1, ?var),
    Use(?ins2, ?var),
    //contains("Example", ?ins1),
    (BasicBlockHead(?ins1, ?head),
    BBHeadInMethod(?head, ?method);
    Method_FirstInstruction(?method, ?ins1)),
    !PhiNodeHead(?ins2,_),
    (PhiNodeHead(?ins1, ?ins1);
    !PhiNodeHead(?ins1, _)).


PDG_Nodes(?method, ?ins, ?ln):-
    (DataDep(?method, ?ins,_);
    DataDep(_, _, ?ins);
    ControlDep(?method, ?ins,_);
    ControlDep(_, _,?ins)),
    OptInstructionFromMethodIndex(?method, ?ln, ?ins).
