

.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: symbol
.type MethodInv <: symbol


.decl RootIfNode2(?ifNode:Instruction, ?phiNode:Instruction, ?lineNr:number)
//.input RootIfNode(IO="file", filename="RootIfNode.csv", delimiter="\t")

.decl PhiBeginningBB(?phiNode:Instruction)
.input PhiBeginningBB(IO="file", filename="PhiBeginningBB.csv", delimiter="\t")

.decl PhiBBHasConst(?phiNode:Instruction)
.input PhiBBHasConst(IO="file", filename="PhiBBHasConst.csv", delimiter="\t")

.decl Dominates(?dominator:Instruction, ?insn:Instruction)
.input Dominates(IO="file", filename="Dominates.csv", delimiter="\t")

.decl PhiNodeIndex(?phiNode:Instruction,?phiNode1:Instruction, ?lineNr:number)
.input PhiNodeIndex(IO="file", filename="PhiNodeIndex.csv", delimiter="\t")

.decl BasicBlockTail(?as:Instruction, ?ass:Instruction)
.input BasicBlockTail(IO="file", filename="BasicBlockTail.csv", delimiter="\t")

.decl IfNodeIndex(?method:Method, ?ifNode:Instruction,?nr:number)
.input IfNodeIndex(IO="file", filename="IfNodeIndex.csv", delimiter="\t")

.decl ApplyPhiConstFolding(?rootIfNode:Instruction, ?phiNode:Instruction)
.decl PossiblePhiConstFolding(?rootIfNode:Instruction,?BB1:Instruction,?BB2:Instruction)

.decl NrOfPredBB(?BB:Instruction, ?b:number)
.input NrOfPredBB(IO="file", filename="NrOfPredBB.csv", delimiter="\t")
.decl NrOfSuccBB(?BB2:Instruction, ?n:number)
.input NrOfSuccBB(IO="file", filename="NrOfSuccBB.csv", delimiter="\t")

.decl JumpTarget(?inst:Instruction, ?instr:Instruction)
.input JumpTarget(IO="file", filename="JumpTarget.csv", delimiter="\t")

.decl StaticCondition(?instr:Instruction, ?value:number)
.input StaticCondition(IO="file", filename="StaticCondition.csv", delimiter="\t")

.decl OrderPhiBranchesBB(?phiNode:Instruction, ?preBB :Instruction, ?order:number)
.input OrderPhiBranchesBB(IO="file", filename="OrderPhiBranchesBB.csv", delimiter="\t")

.decl Instruction_Next(?inst:Instruction,?inst1:Instruction)
.input Instruction_Next(IO="file", filename="Instruction_Next.csv", delimiter="\t")

.decl MayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")

.decl LinkConstPhiNodesToOrder(?startPhiNode:Instruction, ?newPhiNode1:Instruction,?order:number)
.input LinkConstPhiNodesToOrder(IO="file", filename="LinkConstPhiNodesToOrder.csv", delimiter="\t")

RootIfNode2(?ifNode, ?phiNode, ?lineNr):-
    PhiBeginningBB(?phiNode),
    PhiBBHasConst(?phiNode),
    Dominates(?dom, ?phiNode),
    PhiNodeIndex(?phiNode,?phiNode,?lineNr),
    BasicBlockTail(?dom, ?ifNode),
    IfNodeIndex(_, ?ifNode,_).

PossiblePhiConstFolding(?rootIfNode, ?nextBB, ?phiNode):-
    RootIfNode2(?rootIfNode, ?phiNode, ?l),
    StaticCondition(?rootIfNode, ?value),
    ((?value = 0,
    Instruction_Next(?rootIfNode,?nextBB));
    (?value = 1, 
    JumpTarget(?nextBB, ?rootIfNode))),
    ?l = min ?lineNr : {RootIfNode2(?rootIfNode,_,?lineNr)}.

PossiblePhiConstFolding(?rootIfNode, ?BB2, ?phiNode):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    !OrderPhiBranchesBB(?phiNode, ?BB1, _),
    NrOfSuccBB(?BB1,?a),
    ?a > 1, 
    BasicBlockTail(?BB1, ?tailNode),
    IfNodeIndex(_,?tailNode,_),
    StaticCondition(?tailNode, ?value),
    ((?value = 0,
    Instruction_Next(?tailNode,?BB2));
    (?value = 1, 
    JumpTarget(?BB2, ?tailNode))).

PossiblePhiConstFolding(?rootIfNode, ?BB2, ?phiNode):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    !OrderPhiBranchesBB(?phiNode,?BB1,_),
    NrOfSuccBB(?BB1,1),
    MayPredecessorBBModuloThrow(?BB1, ?BB2).


ApplyPhiConstFolding(?rootIfNode,?phiNode1):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    OrderPhiBranchesBB(?phiNode, ?BB1, ?order),
    LinkConstPhiNodesToOrder(?phiNode, ?phiNode1,?order).

.output RootIfNode2

.output NrOfSuccBB
.output LinkConstPhiNodesToOrder
.output PhiNodeIndex
.output PhiBBHasConst
.output NrOfPredBB
.output PossiblePhiConstFolding
.output ApplyPhiConstFolding
.output PhiBeginningBB
.output OrderPhiBranchesBB
.output StaticCondition
.output IfNodeIndex
