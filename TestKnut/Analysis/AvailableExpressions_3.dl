.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: symbol
.type MethodInv <: symbol
.type BinExp = [?left : Var, ?op:Operator, ?right:Var]

.decl AssignNumConstant(?inst:Instruction, ?nr:number, ?val:symbol, ?var:Var, ?meth:MethodInv)
.input AssignNumConstant(filename="AssignNumConstant.facts")

.decl AssignLocal(?inst:Instruction, ?nr:number,?var1:Var, ?var2:Var, ?method:Method)
.input AssignLocal(IO="file", filename="AssignLocal.facts", delimiter="\t")


.decl OptInstructionFromMethodIndex(?method:Method, ?insNr:number, ?varAssign:Instruction)
.input OptInstructionFromMethodIndex(IO="file", filename="OptInstructionFromMethodIndex.csv", delimiter="\t")

.decl NextNonDomPredecessorIndexToSameBB(?ass:Instruction, ?ass1:Instruction, ?ass2:Instruction)
.input NextNonDomPredecessorIndexToSameBB(IO="file", filename="NextNonDomPredecessorIndexToSameBB.csv", delimiter="\t")

.decl BasicBlockHead(?inst:Instruction, ?ins:Instruction)
.input BasicBlockHead(IO="file", filename="BasicBlockHead.csv", delimiter="\t")

.decl AssignUnop(?Instruction:Instruction, ?index:number, ?to:Var, ?inmethod:Method)
.input AssignUnop(IO="file", filename="AssignUnop.facts", delimiter="\t")

.decl AssignBinop(?Instruction:Instruction, ?index:number, ?to:Var, ?inmethod:Method)
.input AssignBinop(IO="file", filename="AssignBinop.facts", delimiter="\t")

.decl OperatorAt(?assign:Instruction, ?op:Operator)
.input OperatorAt(IO="file", filename="OperatorAt.facts", delimter="\t")

.decl If(?ifNode:Instruction, ?lineNr:number, ?jump:number, ?method:Method)
.input If(IO="file", filename="If.facts", delimiter="\t")

.decl MayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")

.decl AssignOperFrom(?Instruction:Instruction, ?pos: number, ?from:Var)
.input AssignOperFrom(IO="file", filename="AssignOperFrom.facts", delimiter="\t")

.decl AssignOperFromConstant(?Instruction:Instruction, ?pos: number, ?from:Instruction)
.input AssignOperFromConstant(IO="file", filename="AssignOperFromConstant.facts", delimiter="\t")

.decl PhiNodeHead(?insn:Instruction, ?headInsn:Instruction)
.input PhiNodeHead(IO="file", filename="PhiNodeHead.csv", delimiter="\t")

.decl Dominates(?dominator:Instruction, ?insn:Instruction)
.input Dominates(IO="file", filename="Dominates.csv", delimiter="\t")

//use hat keine Positionen
.decl Use(?ins:Instruction, ?var:Var)
.input Use(IO="file", filename="Use.csv", delimiter="\t")

.decl BasicBlockBegin(?ass:Instruction)
.input BasicBlockBegin(IO="file", filename="BasicBlockBegin.csv", delimiter="\t")

.decl BinaryExpression(?assign:Instruction, ?b:BinExp, ?to:Var)
.output BinaryExpression

.decl BinaryExpressionBB(?assign:Instruction, ?exp:BinExp,?to:Var)
.output BinaryExpressionBB

.decl AvailableExpressions(?BB:Instruction, ?exp:BinExp)
.output AvailableExpressions

.decl AllSubExpressions(?BB:Instruction, ?exp:BinExp,?to:Var, ?w:number)
.output AllSubExpressions

.decl NrOfPredBB(?BB2:Instruction, ?n:number)
.output NrOfPredBB

.decl AllBB(?BB:Instruction)

.decl PredecessorBranches(?BB1:Instruction, ?BB2:Instruction, ?l:number)
.decl OrderPredecessorBranches(?BB1:Instruction, ?BB2:Instruction, ?order:number)
.decl RecursiveExpressions(?BB:Instruction,?exp:BinExp, ?n:number,?to:Var)

.output PredecessorBranches
.output OrderPredecessorBranches
.output RecursiveExpressions

.decl testRel(?exp:BinExp,n:number)
.output testRel

.decl test2(?exp:BinExp , ?to:Var)
.output test2

//without annoying Phi-assigns that are part of a block
.decl NewMayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.output NewMayPredecessorBBModuloThrow

NewMayPredecessorBBModuloThrow(?BB1, ?BB2):-
    MayPredecessorBBModuloThrow(?BB1, ?BB2),
    !PhiNodeHead(?BB2,_),
    !PhiNodeHead(?BB1, _).

NewMayPredecessorBBModuloThrow(?BB1, ?BB3):-
    MayPredecessorBBModuloThrow(?BB2, ?BB4),
    PhiNodeHead(?BB2,?BB1),
    PhiNodeHead(?BB4,?BB3),
    ?BB3 != ?BB1.
    
NewMayPredecessorBBModuloThrow(?BB1, ?BB4):-
    MayPredecessorBBModuloThrow(?BB2, ?BB4),
    PhiNodeHead(?BB2,?BB1),
    !PhiNodeHead(?BB4,_).

NewMayPredecessorBBModuloThrow(?BB2, ?BB3):-
    MayPredecessorBBModuloThrow(?BB2, ?BB4),
    !PhiNodeHead(?BB2,_),
    PhiNodeHead(?BB4,?BB3).

AllBB(?BB1),
NrOfPredBB(?BB1,?b):-
    NewMayPredecessorBBModuloThrow(_,?BB1),
    ?b = count : {NewMayPredecessorBBModuloThrow(_, ?BB1)}.

BinaryExpression(?assign,[?left, ?op, ?right], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignBinop(?assign, _ , ?to,_),
    AssignOperFrom(?assign, ?pos1, ?left),
    AssignOperFrom(?assign, ?pos2, ?right),
    ?pos1 < ?pos2.

BinaryExpression(?assign,[?left, ?op, to_string(?right)], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignBinop(?assign, _ , ?to, _),
    AssignOperFrom(?assign, ?pos1, ?left),
    AssignOperFromConstant(?assign, ?pos2, ?right),
    ?pos1 < ?pos2.

BinaryExpression(?assign, [to_string(?left), ?op, ?right], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignBinop(?assign, _ , ?to,_),
    AssignOperFromConstant(?assign, ?pos1, ?left),
    AssignOperFrom(?assign, ?pos2, ?right),
    ?pos1 < ?pos2.

BinaryExpression(?assign, [?left, ?op, ?right], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignUnop(?assign, _ , ?to,_),
    AssignOperFrom(?assign, _, ?right),
    ?left = "nop".

BinaryExpression(?assign, [?left, ?op, to_string(?right)], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignUnop(?assign, _ , ?to,_),
    AssignOperFromConstant(?assign, _, ?right),
    ?left = "nop".

BinaryExpression(?assign, [?left, ?op, ?right], ?to):-
    !If(?assign, _, _ ,_ ),
    AssignLocal(?assign, _ , ?left, ?to,_),
    ?right = "nop",
    ?op = "nop".

BinaryExpression(?assign, [?left, ?op, ?right], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignNumConstant(?assign, _ , ?x, ?to,_),
    ((contains("L", ?x),
    ?z = strlen(?x),
    ?s = substr(?x,0,?z-1),
    ?left = ?s);
    (!contains("L", ?x),
    ?left = ?x)),
    ?right = "nop",
    ?op = "nop".



BinaryExpressionBB(?phiHead,?exp,?to):-
    BinaryExpression(?assign, ?exp, ?to),
    BasicBlockHead(?assign, ?head),
    PhiNodeHead(?head, ?phiHead).

BinaryExpressionBB(?head,?exp,?to):-
    BinaryExpression(?assign, ?exp, ?to),
    BasicBlockHead(?assign, ?head),
    !PhiNodeHead(?head,_).

//da phi-blöcke verkürzt sind, muss letztes Phi-Assignment im Block gefunden werden
//dieses ist dann in Dominates enthalten
BinaryExpressionBB(?headBB2, ?exp, ?to):-
    BinaryExpressionBB(?headBB1, ?exp, ?to),
    ((!PhiNodeHead(?headBB1,_),
    ?BB1 = ?headBB1);
    PhiNodeHead(?BB1,?headBB1)),
    Dominates(?BB1, ?BB2),
    ((!PhiNodeHead(?BB2, _),
    ?headBB2 = ?BB2);
    PhiNodeHead(?BB2, ?headBB2)).

.decl BBIndex(?BB:Instruction ,?lineNr:number)
.output BBIndex
BBIndex(?BB, ?lineNr):-
    (NewMayPredecessorBBModuloThrow(_,?BB);
    NewMayPredecessorBBModuloThrow(?BB, _)),
    OptInstructionFromMethodIndex(_, ?lineNr,?BB).

PredecessorBranches(?BB, ?preBB,?lineNr):-
    NrOfPredBB(?BB, ?d),
    ?d > 1,
    NewMayPredecessorBBModuloThrow(?preBB,?BB),
    BBIndex(?preBB, ?lineNr).

OrderPredecessorBranches(?BB, ?preBB, ?order +1):-
    PredecessorBranches(?BB , ?preBB, ?lineNr1),
    ?order = count : {PredecessorBranches(?BB, _ , ?lineNrBB), ?lineNr1 < ?lineNrBB}.

RecursiveExpressions(?BB, ?exp, 2, ?to2),
RecursiveExpressions(?BB, ?exp, 2, ?to1):-
    OrderPredecessorBranches(?BB, ?preBB1, 1),
    OrderPredecessorBranches(?BB, ?preBB2, 2),
    BinaryExpressionBB(?preBB1, ?exp,?to1),
    BinaryExpressionBB(?preBB2, ?exp,?to2).

RecursiveExpressions(?BB, ?exp, ?joinedBrNew, ?to2),
RecursiveExpressions(?BB, ?exp, ?joinedBrNew, ?to1):-
    RecursiveExpressions(?BB, ?exp,?joinedBr,?to1),
    ?joinedBrNew = ?joinedBr +1,
    OrderPredecessorBranches(?BB, ?preBB2,?joinedBrNew),
    BinaryExpressionBB(?preBB2, ?exp,?to2).


BinaryExpressionBB(?BB, ?exp,?to):-
    RecursiveExpressions(?BB, ?exp, ?joinedBr, ?to),
    NrOfPredBB(?BB, ?joinedBr).

AvailableExpressions(?BB, ?exp):-
    BinaryExpressionBB(?BB, ?exp,_).

AllSubExpressions(?BB, ?exp, ?to, ?lineNr):-
    BinaryExpressionBB(?BB, ?exp,?to),
    ?w = count : {BinaryExpressionBB(?BB, ?exp, _)},
    ?w > 1,
    BBIndex(?BB, ?lineNr).

.decl ReducedSubExpressions(?BB:Instruction, ?exp:BinExp, ?to:Var, ?l:number)
.output ReducedSubExpressions

CommonExpressions(?exp),
ReducedSubExpressions(?BB, ?exp, ?to, ?l):-
    AllSubExpressions(?BB,?exp,?to,?l),
    ?l = min ?lineNr : {AllSubExpressions(_, ?exp, _ ,?lineNr)}.
    //?c = count : {AllSubExpressions(_, ?exp,_,_)}.

.decl CommonExpressions(?exp:BinExp)
.output CommonExpressions

.decl CountCommonExpressions(?c:number)
.output CountCommonExpressions

CountCommonExpressions(?c):-
    ?c = count : {CommonExpressions(_)}.


.decl AllExpressions(?exp:BinExp)
.output AllExpressions
AllExpressions(?exp),
test2(?exp,?to):-
    BinaryExpression(_, ?exp, ?to).

testRel(?exp,?n):-
    test2(?exp, _),
    ?n = count : {test2(?exp, _)},
    ?n > 1.