
.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: symbol
.type MethodInv <: symbol


.decl InstructionInPhiNode(?insn:Instruction, ?headInsn:Instruction)
.input InstructionInPhiNode(IO="file", filename="InstructionInPhiNode.csv", delimiter="\t")

.decl PhiNodeHead(?insn:Instruction, ?headInsn:Instruction)
.input PhiNodeHead(IO="file", filename="PhiNodeHead.csv", delimiter="\t")

.decl Dominates(?dominator:Instruction, ?insn:Instruction)
.input Dominates(IO="file", filename="Dominates.csv", delimiter="\t")

.decl BasicBlockTail(?as:Instruction, ?ass:Instruction)
.input BasicBlockTail(IO="file", filename="BasicBlockTail.csv", delimiter="\t")

.decl BasicBlockBegin(?ass:Instruction)
.input BasicBlockBegin(IO="file", filename="BasicBlockBegin.csv", delimiter="\t")

.decl If(?ifNode:Instruction, ?lineNr:number, ?jump:number, ?method:Method)
.input If(IO="file", filename="If.facts", delimiter="\t")


.decl OptInstructionFromMethodIndex(?method:Method, ?insNr:number, ?varAssign:Instruction)
.input OptInstructionFromMethodIndex(IO="file", filename="OptInstructionFromMethodIndex.csv", delimiter="\t")

.decl VarDeclaringMethod(?var:Var,?method:Method)
.input VarDeclaringMethod(IO="file", filename="Var-DeclaringMethod.facts", delimiter="\t")

.decl AssignLocal(?inst:Instruction, ?nr:number,?var1:Var, ?var2:Var, ?method:Method)
.input AssignLocal(IO="file", filename="AssignLocal.facts", delimiter="\t")

.decl BasicBlockHead(?inst:Instruction, ?ins:Instruction)
.input BasicBlockHead(IO="file", filename="BasicBlockHead.csv", delimiter="\t")

.decl JumpTarget(?inst:Instruction, ?instr:Instruction)
.input JumpTarget(IO="file", filename="JumpTarget.csv", delimiter="\t")

//.decl IsJumpTarget(?inst:Instruction)
//.input IsJumpTarget(IO="file", filename="IsJumpTarget.csv", delimiter="\t")

.decl Instruction_Next(?inst:Instruction,?inst1:Instruction)
.input Instruction_Next(IO="file", filename="Instruction_Next.csv", delimiter="\t")

//.decl Instruction_Prev(?inst:Instruction,?inst1:Instruction)
//.input Instruction_Prev(IO="file", filename="Instruction_Prev.csv", delimiter="\t")

.decl MaySuccessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.input MaySuccessorBBModuloThrow(IO="file", filename="MaySuccessorBBModuloThrow.csv", delimiter="\t")

.decl MayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")

.decl NextInSamePhiNode(?inst:Instruction,?inst1:Instruction)
.input NextInSamePhiNode(IO="file", filename="NextInSamePhiNode.csv", delimiter="\t")

.decl OperatorAt(?assign:Instruction, ?op:Operator)
.input OperatorAt(IO="file", filename="OperatorAt.facts", delimter="\t")

.decl VarType(?var:Var, ?type:symbol)
.input VarType(IO="file", filename="Var-Type.facts", delimiter="\t")

//.decl IntConstFolding(?instruction:symbol, ?variable:symbol, ?value:number, ?meth:symbol, ?use:number)

.decl IntConstFolding(?instruction:Instruction, ?variable:Var, ?value:number, ?meth:symbol, ?use:number)
.input IntConstFolding(IO="file", filename="IntConstFolding.csv",delimiter="\t")

.decl BoolConstFolding(?instruction:Instruction, ?var:Var, ?value:number, ?meth:symbol)
.input BoolConstFolding(IO="file", filename="BoolConstFolding.csv",delimiter="\t")

.decl IfVar(?instr:Instruction, ?n: number, ?var:Var)
.input IfVar(IO="file", filename="IfVar.facts",delimiter="\t")

.decl IfConstant(?instr:Instruction, ?n:number, ?val:number)
.input IfConstant(IO="file", filename="IfConstant.facts", delimiter="\t")


.decl AllPhiNodes(?phiNode:Instruction) 
.decl StaticCondition(?instr:Instruction, ?value:number)
.decl NrOfPhiNodesPerBlock(?phiNode:Instruction, ?n : number)
.decl OriginalPhiBranches(?phiNode:Instruction, ?preBB:Instruction,?lineNr:number)
.decl OrderPhiBranchesBB(?phiNode:Instruction, ?preBB :Instruction, ?order:number)
.decl PhiBeginningBB(?phiNode:Instruction)
.decl IfNodeIndex(?method:Method, ?ifNode:Instruction,?nr:number)
.decl IfNode(?ifNode:Instruction)
.decl OrderPhiBlock(?phiNode:Instruction, ?postPhi:Instruction, ?order:number)
.decl ApplyPhiConstFolding(?rootIfNode:Instruction, ?phiNode:Instruction)
.decl PossiblePhiConstFolding(?rootIfNode:Instruction,?BB1:Instruction,?BB2:Instruction)
.decl IsConstant(?var:Var)
.decl PhiNodeContainsConstant(?phiNode:Instruction,?phiNode1:Instruction,?const:number)
.decl LinkStartPhiToLaterPhiBlocks(?startPhiNode:Instruction, ?otherPhiNode:Instruction)
.decl LinkConstPhiNodesToOrder(?startPhiNode:Instruction, ?newPhiNode1:Instruction,?order:number)
.decl NrOfPredBB(?BB:Instruction, ?b:number)
.decl NrOfSuccBB(?BB2:Instruction, ?n:number)
.decl PhiBeginningPhiBlock(?phi:Instruction)
.decl PhiBBHasConst(?phiNode:Instruction)
.decl PhiNodeIndex(?phiNode:Instruction,?phiNode1:Instruction, ?lineNr:number)
.decl RootIfNode(?ifNode:Instruction, ?phiNode:Instruction, ?lineNr:number)
.decl LoopPhiBeginning(?phiNode:Instruction)

.output LoopPhiBeginning
.output NrOfSuccBB
.output RootIfNode
.output LinkConstPhiNodesToOrder
.output PhiNodeIndex
.output PhiBBHasConst
.output PhiBeginningPhiBlock
.output NrOfPredBB
.output LinkStartPhiToLaterPhiBlocks
.output PhiNodeContainsConstant
.output IsConstant
.output PossiblePhiConstFolding
.output ApplyPhiConstFolding
.output OrderPhiBlock
.output PhiBeginningBB
.output OriginalPhiBranches
.output OrderPhiBranchesBB
.output AllPhiNodes
.output NrOfPhiNodesPerBlock
.output StaticCondition
.output IfNodeIndex



//Int Condition <=

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"<="),
    ((?value = 1, ?left <= ?right);
    (?value = 0, ?left > ?right)).

StaticCondition(?ifNode,?value) :-
    IfConstant(?ifNode, ?pos1, ?left),
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"<="),
    ((?value = 1, ?left <= ?right);
    (?value = 0, ?left > ?right)).

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"<="),
    ((?value = 1, ?left <= ?right);
    (?value = 0, ?left > ?right)).

//Int Condition >=

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,">="),
    ((?value = 1, ?left >= ?right);
    (?value = 0, ?left < ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,">="),
    ((?value = 1, ?left >= ?right);
    (?value = 0, ?left < ?right)).

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,">="),
    ((?value = 1, ?left >= ?right);
    (?value = 0, ?left < ?right)).

//Int Condition ==
StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"=="),
    ((?value = 1, ?left = ?right);
    (?value = 0, ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"=="),
    ((?value = 1, ?left = ?right);
    (?value = 0, ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"=="),
    ((?value = 1, ?left = ?right);
    (?value = 0, ?left != ?right)).


//Int Condition !=
StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"!="),
    ((?value = 1, ?left != ?right);
    (?value = 0, ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"!="),
    ((?value = 1, ?left != ?right);
    (?value = 0, ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"!="),
    ((?value = 1, ?left != ?right);
    (?value = 0, ?left = ?right)).


//Boolean Condition ==
StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    BoolConstFolding(_,?var1,?left,_),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"=="),
    ((?value = 1 , ?left = ?right);
    (?value = 0 , ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    IfVar(?ifNode, ?pos2, ?var2), 
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"=="),
    ((?value = 1 , ?left = ?right);
    (?value = 0 , ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1),
    IfVar(?ifNode, ?pos2, ?var2),  
    BoolConstFolding(_,?var1,?left,_),
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"=="),
    ((?value = 1 , ?left = ?right);
    (?value = 0 , ?left != ?right)).


    
//Boolean Condition !=
StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    BoolConstFolding(_,?var1,?left,_),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"!="),
    ((?value = 1 , ?left != ?right);
    (?value = 0 , ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    IfVar(?ifNode, ?pos2, ?var2), 
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"!="),
    ((?value = 1 , ?left != ?right);
    (?value = 0 , ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    IfVar(?ifNode, ?pos1, ?var1), 
    IfVar(?ifNode, ?pos2, ?var2), 
    BoolConstFolding(_,?var1,?left,_),
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    OperatorAt(?ifNode,"!="),
    ((?value = 1 , ?left != ?right);
    (?value = 0 , ?left = ?right)).

IsConstant(?var):-
    IntConstFolding(_, ?var, _, _,_);
    BoolConstFolding(_, ?var, _ ,_).

IfNode(?ifNode),
IfNodeIndex(?method, ?ifNode,?lineNr):-
    IfVar(?ifNode,_,_),
    If(?ifNode, ?lineNr,_,?method).

PhiBeginningPhiBlock(?phiNode):-
    PhiNodeHead(?phiNode, ?phiNode).


PhiNodeIndex(?phiNode,?phiNode1, ?lineNr),
AllPhiNodes(?phiNode):-
    PhiNodeHead(?phiNode1,?phiNode),
    AssignLocal(?phiNode1, ?lineNr, _,_,_).

PhiBeginningBB(?phiNode):-
    InstructionInPhiNode(?phiNode,?phiNode),
    !LoopPhiBeginning(?phiNode).

LoopPhiBeginning(?phiNode):-
    InstructionInPhiNode(?phiNode,?phiNode),
    Dominates(?phiNode, ?BB),
    MaySuccessorBBModuloThrow(?phiNode, ?BB).


NrOfPhiNodesPerBlock(?phiNode, ?n):-
    PhiBeginningPhiBlock(?phiNode),
    ?n = count : {PhiNodeHead(_, ?phiNode)}.

//ließe sich auch auf PhiBeginningBB runterschrumpfen
NrOfSuccBB(?BB1, ?b),
NrOfPredBB(?BB1,?c):-
    BasicBlockBegin(?BB1),
    ?c = count : {MaySuccessorBBModuloThrow(?BB1,_)},
    ?b = count : {MayPredecessorBBModuloThrow(?BB1,_)}.


PhiNodeContainsConstant(?phiNode, ?phiNode1,?const):-
    PhiNodeHead(?phiNode1,?phiNode),
    AssignLocal(?phiNode1, _, ?from ,_,_),
    (IntConstFolding(_, ?from, ?const, _,_);
    BoolConstFolding(_, ?from, ?const ,_)).

PhiBBHasConst(?phiNode):-
    PhiNodeContainsConstant(?phiNode,_,_);
    (LinkStartPhiToLaterPhiBlocks(?phiNode, ?nextPhiNode),
    PhiNodeContainsConstant(?nextPhiNode,_,_)).

//for different Phi-nodes in same BB
LinkStartPhiToLaterPhiBlocks(?startPhiNode, ?startPhiNode):-
    PhiBeginningBB(?startPhiNode).

LinkStartPhiToLaterPhiBlocks(?startPhiNode,?newPhiNode):-
    PhiBeginningBB(?startPhiNode),
    PhiBeginningPhiBlock(?newPhiNode),
    PhiNodeHead(?startPhiNode1, ?startPhiNode),  
    BasicBlockHead(?newPhiNode,?startPhiNode1),
    NrOfPhiNodesPerBlock(?startPhiNode,?c),
    NrOfPhiNodesPerBlock(?newPhiNode,?c).
    
//could also use NextPredecessorToSameBB but unsure how good it works
//only start if at least one constant in Phi-node

OriginalPhiBranches(?phiNode, ?preBB,?lineNr):-
    PhiBeginningBB(?phiNode),
    NrOfPhiNodesPerBlock(?phiNode,?d),
    NrOfPredBB(?phiNode, ?d),
    MaySuccessorBBModuloThrow(?phiNode,?preBB),
    OptInstructionFromMethodIndex(_, ?lineNr,?preBB),
    PhiBBHasConst(?phiNode),
    AssignLocal(?phiNode,?lineNr1 ,_,_,?method),
    IfNodeIndex(?method,?ifNode, ?lineNr2),
    StaticCondition(?ifNode, _),
    ?lineNr2 < ?lineNr1.

OrderPhiBranchesBB(?phiNode, ?BB, ?order):-
    OriginalPhiBranches(?phiNode , ?BB, ?lineNr1),
    ?order = count : {OriginalPhiBranches(?phiNode, _ , ?lineNrBB), ?lineNr1 < ?lineNrBB}.


OrderPhiBlock(?phiNode, ?phiNode1,?order):-
    PhiBeginningPhiBlock(?phiNode),
    PhiNodeIndex(?phiNode,?phiNode1, ?lineNrPhi1),
    ?order = count : {PhiNodeIndex(?phiNode, _ , ?lineNrPhi),  ?lineNrPhi1 < ?lineNrPhi}.


LinkConstPhiNodesToOrder(?startPhiNode, ?newPhiNode1,?order):-
    LinkStartPhiToLaterPhiBlocks(?startPhiNode,?newPhiNode),
    PhiNodeContainsConstant(?newPhiNode, ?newPhiNode1,_),
    OrderPhiBlock(?newPhiNode, ?newPhiNode1, ?order).

RootIfNode(?ifNode, ?phiNode, ?lineNr):-
    PhiBeginningBB(?phiNode),
    PhiBBHasConst(?phiNode),
    Dominates(?dom, ?phiNode),
    ?dom != ?phiNode,
    PhiNodeIndex(?phiNode,?phiNode,?lineNr),
    BasicBlockTail(?dom, ?ifNode),
    IfNode(?ifNode).

//each If-Root may dominate multiple Phi-nodes -> choose the one with lowest Index

PossiblePhiConstFolding(?rootIfNode, ?nextBB, ?phiNode):-
    RootIfNode(?rootIfNode, ?phiNode, ?l),
    StaticCondition(?rootIfNode, ?value),
    ((?value = 0,
    Instruction_Next(?rootIfNode,?nextBB));
    (?value = 1, 
    JumpTarget(?nextBB, ?rootIfNode))),
    ?l = min ?lineNr : {RootIfNode(?rootIfNode,_,?lineNr)}.

PossiblePhiConstFolding(?rootIfNode, ?BB2, ?phiNode):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    !OrderPhiBranchesBB(?phiNode, ?BB1, _),
    NrOfSuccBB(?BB1,?a),
    ?a > 1, 
    BasicBlockTail(?BB1, ?tailNode),
    IfNode(?tailNode),
    StaticCondition(?tailNode, ?value),
    ((?value = 0,
    Instruction_Next(?tailNode,?BB2));
    (?value = 1, 
    JumpTarget(?BB2, ?tailNode))).

PossiblePhiConstFolding(?rootIfNode, ?BB2, ?phiNode):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    !OrderPhiBranchesBB(?phiNode,?BB1,_),
    NrOfSuccBB(?BB1,1),
    MayPredecessorBBModuloThrow(?BB1, ?BB2).


ApplyPhiConstFolding(?rootIfNode,?phiNode1):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    OrderPhiBranchesBB(?phiNode, ?BB1, ?order),
    LinkConstPhiNodesToOrder(?phiNode, ?phiNode1,?order).


.decl StaticPhiFolding(?BB:Instruction, ?const:number)
.output StaticPhiFolding

StaticPhiFolding(?phiBB, ?const):-
    PhiNodeContainsConstant(?phiBB,_ , ?const),
    ?n = count : {PhiNodeContainsConstant(?phiBB, _, ?const)},
    NrOfPhiNodesPerBlock(?phiBB, ?n).