.type Var <: symbol
.type Method <: symbol
.type Operator <: symbol
.type Instruction <: symbol
.type MethodInv <: symbol
.type BinExp = [?left : Var, ?op:Operator, ?right:Var]
.type NodeList = [n:Instruction, next:NodeList]

.decl BasicBlockHead(?inst:Instruction, ?ins:Instruction)
.input BasicBlockHead(IO="file", filename="BasicBlockHead.csv", delimiter="\t")

.decl AssignUnop(?instruction:Instruction, ?index:number, ?to:Var, ?inmethod:Method)
.input AssignUnop(IO="file", filename="AssignUnop.facts", delimiter="\t")

.decl AssignBinop(?instruction:Instruction, ?index:number, ?to:Var, ?inmethod:Method)
.input AssignBinop(IO="file", filename="AssignBinop.facts", delimiter="\t")

.decl OperatorAt(?assign:Instruction, ?op:Operator)
.input OperatorAt(IO="file", filename="OperatorAt.facts", delimter="\t")

.decl If(?ifNode:Instruction, ?lineNr:number, ?jump:number, ?method:Method)
.input If(IO="file", filename="If.facts", delimiter="\t")

.decl MayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")

.decl AssignOperFrom(?instruction:Instruction, ?pos: number, ?from:Var)
.input AssignOperFrom(IO="file", filename="AssignOperFrom.facts", delimiter="\t")

.decl AssignOperFromConstant(?instruction:Instruction, ?pos: number, ?from:symbol)
.input AssignOperFromConstant(IO="file", filename="AssignOperFromConstant.facts", delimiter="\t")

.decl PhiNodeHead(?insn:Instruction, ?headInsn:Instruction)
.input PhiNodeHead(IO="file", filename="PhiNodeHead.csv", delimiter="\t")

//use hat keine Positionen
.decl Use(?ins:Instruction, ?var:Var)
.input Use(IO="file", filename="Use.csv", delimiter="\t")

.decl BasicBlockBegin(?ass:Instruction)
.input BasicBlockBegin(IO="file", filename="BasicBlockBegin.csv", delimiter="\t")

.decl BinaryExpression(?assign:Instruction, ?b:BinExp, ?to:Var)
.output BinaryExpression

.decl BinaryExpressionBB(?assign:Instruction, ?exp:BinExp,?to:Var)
.output BinaryExpressionBB

.decl CommonSubExpression(?exp:BinExp, ?l:NodeList)
.output CommonSubExpression

.decl UnaryExpression(?assign:Instruction, ?left:Var, ?op:Operator, ?to:Var)
.output UnaryExpression

.decl NrOfPredBB(?BB2:Instruction, ?n:number)
.output NrOfPredBB

.decl AllBB(?BB:Instruction)

.decl NoJoinExpressions(?BB1:Instruction, ?exp:BinExp)
.output NoJoinExpressions

//without annoying Phi-assigns that are part of a block
.decl NewMayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
.output NewMayPredecessorBBModuloThrow

NewMayPredecessorBBModuloThrow(?BB1, ?BB2):-
    MayPredecessorBBModuloThrow(?BB1, ?BB2),
    !PhiNodeHead(?BB2,_),
    !PhiNodeHead(?BB1, _).

NewMayPredecessorBBModuloThrow(?BB1, ?BB3):-
    MayPredecessorBBModuloThrow(?BB2, ?BB4),
    PhiNodeHead(?BB2,?BB1),
    PhiNodeHead(?BB4,?BB3),
    ?BB3 != ?BB1.
    
NewMayPredecessorBBModuloThrow(?BB1, ?BB4):-
    MayPredecessorBBModuloThrow(?BB2, ?BB4),
    PhiNodeHead(?BB2,?BB1),
    !PhiNodeHead(?BB4,_).

NewMayPredecessorBBModuloThrow(?BB2, ?BB3):-
    MayPredecessorBBModuloThrow(?BB2, ?BB4),
    !PhiNodeHead(?BB2,_),
    PhiNodeHead(?BB4,?BB3).

AllBB(?BB1),
NrOfPredBB(?BB1,?b):-
    NewMayPredecessorBBModuloThrow(?BB1,_),
    ?b = count : {NewMayPredecessorBBModuloThrow(_, ?BB1)}.

BinaryExpression(?assign,[?left, ?op, ?right], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignBinop(?assign, _ , ?to,_),
    AssignOperFrom(?assign, ?pos1, ?left),
    AssignOperFrom(?assign, ?pos2, ?right),
    ?pos1 < ?pos2.

BinaryExpression(?assign,[?left, ?op, to_string(?right)], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignBinop(?assign, _ , ?to, _),
    AssignOperFrom(?assign, ?pos1, ?left),
    AssignOperFromConstant(?assign, ?pos2, ?right),
    ?pos1 < ?pos2.

BinaryExpression(?assign, [to_string(?left), ?op, ?right], ?to):-
    OperatorAt(?assign, ?op),
    !If(?assign, _, _ ,_ ),
    AssignBinop(?assign, _ , ?to,_),
    AssignOperFromConstant(?assign, ?pos1, ?left),
    AssignOperFrom(?assign, ?pos2, ?right),
    ?pos1 < ?pos2.

BinaryExpressionBB(?head,?exp,?to):-
    BinaryExpression(?assign, ?exp, ?to),
    BasicBlockHead(?assign, ?head).

.decl PotentialExpression(?BB1:Instruction, ?BB2:Instruction, ?exp:BinExp, ?to:Var)
.output PotentialExpression

.decl NonIntersectionExpressions(?BB1:Instruction, ?BB2:Instruction, ?exp:BinExp,?to:Var)
.output NonIntersectionExpressions

PotentialExpression(?BB1, ?BB2, ?exp, ?to):-
    BinaryExpressionBB(?BB1,?exp,?to),
    NewMayPredecessorBBModuloThrow(?BB1,?BB2).

NonIntersectionExpressions(?BB1,?BB2, ?exp,?to):-
    PotentialExpression(?BB1, ?BB2, ?exp, ?to),
    NewMayPredecessorBBModuloThrow(?BB3, ?BB2),
    ?BB3 != ?BB1,
    !PotentialExpression(?BB3, ?BB2, ?exp, _),
    NrOfPredBB(?BB2, ?c),
    ?c > 1.

BinaryExpressionBB(?BB2, ?exp,?to):-
    BinaryExpressionBB(?BB1,?exp,?to),
    NewMayPredecessorBBModuloThrow(?BB1,?BB2),
    NrOfPredBB(?BB2,1).


//BinaryExpressionBB(?BB,?exp, ?to):-
//    PotentialExpression(?BB1, ?BB2, ?exp, ?to),
//    !NonIntersectionExpressions(?BB1, ?BB2, ?exp,?to).







