.decl VarSimpleName(x:Var, y:Var)
.input VarSimpleName(IO="file", filename="Var-SimpleName.facts", delimiter="\t")

.decl SpecialMethodInvocation(?instruction:symbol, ?index:float, ?signature:symbol, ?base:symbol, ?method:symbol)
.input SpecialMethodInvocation(IO="file", filename="SpecialMethodInvocation.facts", delimiter="\t")


.decl VirtualMethodInvocation(?instruction:symbol, ?index:float, ?signature:symbol, ?base:symbol, ?method:symbol)
.input VirtualMethodInvocation(IO="file", filename="VirtualMethodInvocation.facts", delimiter="\t")

.decl StoreInstanceField(?instruction:symbol, ?index:float, ?from:symbol, ?base:symbol, ?signature:symbol, ?method:symbol)
.input StoreInstanceField(IO="file", filename="StoreInstanceField.facts", delimiter="\t")

.decl LoadInstanceField(?instruction:symbol, ?index:float, ?to:symbol, ?base:symbol, ?signature:symbol, ?method:symbol)
.input LoadInstanceField(IO="file", filename="LoadInstanceField.facts", delimter="\t")

.decl Return(?instruction:symbol, ?index:float, ?var:symbol, ?method:symbol)
.input Return(IO="file", filename="Return.facts", delimter="\t")

 .decl IfVar(?instruction:Var, ?pos:float, ?var:Var)
 .input IfVar(IO="file", filename="IfVar.facts", delimter="\t")

.decl ActualParam(?instr:float, ?v1:Var, ?v2:Var)
.input ActualParam(IO="file", filename="ActualParam.facts", delimter="\t")


.decl AssignNumConstant(?assign:symbol, ?inst:float, ?const:symbol, ?var:symbol, ?meth:symbol)
.input AssignNumConstant(IO="file", filename="AssignNumConstant.facts", delimiter="\t")


.decl VarType(?var:Var, ?type:symbol)
.input VarType(IO="file", filename="Var-Type.facts", delimiter="\t")

.type Var <: symbol





.functor str_to_float(x:symbol):float
.functor testId(x:number):number
.functor retType(x:symbol):symbol
.decl test(?type:symbol)


test(?type):- VarType(?var,?type),AssignNumConstant(_,_,_,?var,_).




.output test