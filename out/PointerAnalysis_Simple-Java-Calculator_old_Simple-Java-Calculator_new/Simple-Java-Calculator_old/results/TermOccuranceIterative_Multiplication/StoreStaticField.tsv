<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack0	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes square>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack1	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes squareRoot>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack8	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes abs>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack9	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes[] $VALUES>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>/$stack6	<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes[] $VALUES>	<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack4	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes sin>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>/$stack0	<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes normal>	<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack6	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes log>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack7	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes rate>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack3	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes cos>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>/$stack2	<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes minus>	<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>/$stack3	<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes multiply>	<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack2	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes oneDevidedBy>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>/$stack5	<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes xpowerofy>	<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>/$stack1	<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes add>	<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>/$stack5	<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes tan>	<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>/$stack4	<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes divide>	<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>
