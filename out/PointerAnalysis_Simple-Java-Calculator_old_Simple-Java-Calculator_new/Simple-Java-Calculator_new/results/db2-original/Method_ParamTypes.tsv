<simplejavacalculator.Calculator: java.lang.Double calculateBiImpl()>	
<simplejavacalculator.Calculator: java.lang.Double calculateMono(simplejavacalculator.Calculator$MonoOperatorModes,java.lang.Double)>	simplejavacalculator.Calculator$MonoOperatorModes,java.lang.Double
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>	
<simplejavacalculator.UI: void <init>()>	
<simplejavacalculator.UI: void parsetoBinary()>	
<simplejavacalculator.UI: void writer(java.lang.Double)>	java.lang.Double
<simplejavacalculator.BufferedImageCustom: java.awt.Image imageReturn()>	
<simplejavacalculator.SimpleJavaCalculator: void main(java.lang.String[])>	java.lang.String[]
<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes valueOf(java.lang.String)>	java.lang.String
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>	
<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes valueOf(java.lang.String)>	java.lang.String
<simplejavacalculator.Calculator$BiOperatorModes: void <init>(java.lang.String,int)>	java.lang.String,int
<simplejavacalculator.UI: void init()>	
<simplejavacalculator.UI: void actionPerformed(java.awt.event.ActionEvent)>	java.awt.event.ActionEvent
<simplejavacalculator.UI: java.lang.Double reader()>	
<simplejavacalculator.BufferedImageCustom: void <init>()>	
<simplejavacalculator.SimpleJavaCalculator: void <init>()>	
<simplejavacalculator.Calculator: void <init>()>	
<simplejavacalculator.Calculator: java.lang.Double calculateBi(simplejavacalculator.Calculator$BiOperatorModes,java.lang.Double)>	simplejavacalculator.Calculator$BiOperatorModes,java.lang.Double
<simplejavacalculator.Calculator: java.lang.Double calculateEqual(java.lang.Double)>	java.lang.Double
<simplejavacalculator.Calculator: java.lang.Double reset()>	
<simplejavacalculator.Calculator$MonoOperatorModes: void <init>(java.lang.String,int)>	java.lang.String,int
<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes[] values()>	
<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes[] values()>	
