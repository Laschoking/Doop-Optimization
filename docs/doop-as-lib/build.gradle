/**
 * This Gradle build file shows how to run Doop as a library.
 *
 * Quick setup:
 *
 * 1. gradle build
 *
 * 2. Set DOOP_HOME to doop-home directory (see message printed by previous step).
 *
 * 3. gradle run
 */

plugins {
    id 'application'
}

repositories {
    // Uncomment to be able to use Doop's "publishToMavenLocal" task.
    // mavenLocal()

    mavenCentral()

    maven { url "http://centauri.di.uoa.gr:8081/artifactory/plast-deps" }
    maven { url "http://centauri.di.uoa.gr:8081/artifactory/plast-public" }
}

configurations {
    logic      { transitive = false }
    generators { transitive = false }
    apktool    { transitive = false }
}

def doopVersion = "4.+"
dependencies {
    logic   "org.clyze:doop:$doopVersion:logic-files"
    generators "org.clyze:soot-fact-generator:$doopVersion"
    generators "org.clyze:wala-fact-generator:$doopVersion"
    generators "org.clyze:dex-fact-generator:$doopVersion"
    apktool "ext:apktool:2.4.0"
    compile "org.clyze:doop:$doopVersion"
}

// Extract logic/generators/apktool dependencies to local "Doop home"
// directory and print message with corresponding value for
// environment variable DOOP_HOME.
task resolveDoopResources {
    doLast {
        def baseDir = "${projectDir}/doop-home"
        copy {
            from zipTree(configurations.logic.files[0])
            into baseDir
        }
        copy {
            from configurations.apktool.files[0]
            into "${baseDir}/resources"
        }
        def gen = configurations.generators.files
        if (gen) {
            copy {
                from gen
                into "${baseDir}/resources"
            }
        } else { println "WARNING: no fact generator found." }
        println "Doop resources installed, set environment variable: DOOP_HOME=${baseDir}"
    }
}
tasks.build.dependsOn resolveDoopResources

mainClassName = "DoopRunner"
