#pragma once

#define NormalHeapConsMacro(heap, type) \
   isHeapAllocation(heap), \
   isNormalHeap(heap), \
   HeapAllocation_Type(heap, type)

#define StringConstantConsMacro(heap, type) \
   isHeapAllocation(heap), \
   isStringConstant(heap), \
   HeapAllocation_Type(heap, type)

#define MethodHandleConstantConsMacro(heap, method, type) \
   isHeapAllocation(heap), \
   isMethodHandleConstant(heap), \
   MethodHandleConstant_Method(heap, method), \
   HeapAllocation_Type(heap, type)

#define ClassHeapConsMacro(heap, type) \
   isHeapAllocation(heap) \
   isClassHeap(heap), \
   HeapAllocation_Type(heap, type)

#define MockHeapConsMacro(heap, type) \
   isHeapAllocation(heap), \
   HeapAllocation_Type(heap, type)

#define MockValueConsMacro(value, type) \
   Value_isMock(value), \
   isValue(value), \
   Value_Type(value, type), \
   Value_DeclaringType(value, "java.lang.Object") \

// Copy of MockValueConsMacro but with proper component qualifers.
#define mainAnalysis_MockValueConsMacro(value, type) \
   mainAnalysis.Value_isMock(value), \
   isValue(value), \
   mainAnalysis.Value_Type(value, type), \
   mainAnalysis.Value_DeclaringType(value, "java.lang.Object") \

#define SpecialValueConsMacro(value, type) \
   isValue(value), \
   Value_Type(value, type), \
   Value_DeclaringType(value, "java.lang.Object") \

#define PlusVar(var, method, type) \
   isVar(var), \
   Var_Type(var, type), \
   Var_DeclaringMethod(var, method)

#define PlusType(type) \
   isType(type) \

#define PlusMethodInvocation(invocation) \
   isInstruction(invocation), \
   isMethodInvocation(invocation)

#define PlusVirtualMethodInvocation(ins) \
   isInstruction(ins), \
   isMethodInvocation(ins), \
   isVirtualMethodInvocation_Insn(ins)

#define PlusSpecialMethodInvocation(ins) \
   isInstruction(ins), \
   isMethodInvocation(ins), \
   isSpecialMethodInvocation_Insn(ins)

#define PlusStaticMethodInvocation(ins) \
   isInstruction(ins), \
   isMethodInvocation(ins), \
   isStaticMethodInvocation_Insn(ins)

#define NUM_CONSTANT(n, type) cat(cat(cat("num-constant-", n), "/"), type)

// Android-specific macro to qualify unqualified types in layout controls.
// Heuristic: if the name is unqualified, it may come from android.view or
// android.widget ("Android Programming: The Big Nerd Ranch Guide", chapter 32).
#define QUAL_CONTROL_TYPE(t, qType) \
  (qType = t ; qType = cat("android.view.", t) ; qType = cat("android.widget.", t))

#define MOCK_OBJECT_OF_TYPE(type) cat(type, "::MockObject")
