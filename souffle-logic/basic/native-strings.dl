.decl PossibleNativeCodeTargetMethod(?method:Method, ?function:symbol, ?file:symbol)

PossibleNativeCodeTargetMethod(?method, ?function, ?file) :-
  _NativeMethodTypeCandidate(?file, ?function, ?descriptor, _),
  _NativeNameCandidate(?file, ?function, ?name, _),
  Method_SimpleName(?method, ?name),
  Method_JVMDescriptor(?method, ?descriptor).

// PossibleNativeCodeTargetMethod(?method, ?function, ?file) :-
//   _NativeMethodTypeCandidate(?file, ?function, ?descriptor, ?offset1),
//   _NativeNameCandidate(?file, ?function, ?name, ?offset2),
//   Method_SimpleName(?method, ?name),
//   Method_JVMDescriptor(?method, ?descriptor),
//   (?offset1 - ?offset2) <= 5,
//   (?offset1 - ?offset2) >= -5.

// // Crude over-approximation for strings used in unknown positions:
// // assume matching methods are called from any function.
// PossibleNativeCodeTargetMethod(?method, ?function, ?file) :-
//   _NativeMethodTypeCandidate(?file, "-", ?descriptor, _),
//   _NativeNameCandidate(?file, "-", ?name, _),
//   _NativeLibEntryPoint(?file, ?function, _),
//   Method_SimpleName(?method, ?name),
//   Method_JVMDescriptor(?method, ?descriptor).

.decl PossibleNativeCodeTargetMethodLocalized(?method:Method, ?function:symbol, ?file:symbol)

PossibleNativeCodeTargetMethodLocalized(?method, ?function, ?file) :-
  PossibleNativeCodeTargetMethod(?method, ?function, ?file),
  ?function != "-".

// The following rules map native Java methods to native code entry
// points. Based on section "Resolving Native Method Names" in the JNI spec:
// https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html

.decl JNIMethod(?javaMethod:Method, ?type:ReferenceType, ?name:symbol, ?descriptor:symbol)

JNIMethod(?javaMethod, ?type, ?name, ?descriptor) :-
  Method_Modifier("native", ?javaMethod),
  Method_SimpleName(?javaMethod, ?name),
  Method_Descriptor(?javaMethod, ?descriptor),
  Method_DeclaringType(?javaMethod, ?type).

.decl OverloadedJNIMethod(?javaMethod:Method)

OverloadedJNIMethod(?javaMethod) :-
  JNIMethod(?javaMethod, ?type, ?name, _),
  MethodLookup(?name, _, ?type, ?method1),
  MethodLookup(?name, _, ?type, ?method2),
  ?method1 != ?method2.

.decl JNIMethod_NativeId(?javaMethod:Method, ?nativeId:symbol)
.output JNIMethod_NativeId

// Non-overloaded native method (default, always generated).
JNIMethod_NativeId(?javaMethod, ?nativeId) :-
  JNIMethod(?javaMethod, ?type, ?name, _),
  ?nativeId = cat("Java_", cat(?type, cat("_", ?name))).

// Overloaded native method.
JNIMethod_NativeId(?javaMethod, ?nativeId) :-
  OverloadedJNIMethod(?javaMethod),
  JNIMethod(?javaMethod, ?type, ?name, ?descriptor),
  ?nativeId = cat("Java_", cat(?type, cat("_", cat(?name, cat("__", ?descriptor))))).

// Call-graph edges from native methods. This only captures direct call-graph
// edges from native methods; if a native method calls other native code to do
// the call, that behavior will be missed.

.decl CallGraphEdgeFromNativeMethod(?nativeMethod:Method, ?targetMethod:Method)
.output CallGraphEdgeFromNativeMethod

CallGraphEdgeFromNativeMethod(?nativeMethod, ?targetMethod) :-
  PossibleNativeCodeTargetMethod(?targetMethod, ?function, _),
  JNIMethod_NativeId(?nativeMethod, ?function).
