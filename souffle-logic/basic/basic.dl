#include "../commonMacros.dl"

.comp Basic {

#include "exceptions.dl"
#include "finalization.dl"
#include "method-lookup.dl"
#include "method-resolution.dl"
#include "type-hierarchy.dl"
#include "native-strings.dl"

.decl AnyMainMethodDeclaration(?method:Method, ?type:ClassType)
AnyMainMethodDeclaration(?method, ?type) :-
   Method_DeclaringType(?method, ?type),
   Method_SimpleName(?method, "main"),
   Method_Descriptor(?method, "void(java.lang.String[])"),
   Method_Modifier("public", ?method),
   Method_Modifier("static", ?method).

.decl BlacklistedHeapAllocation(value: Value)
.output BlacklistedHeapAllocation

BlacklistedHeapAllocation(?value) :-
  AssignHeapAllocation(?value, _, ?method),
  Method_DeclaringType(?method, ?class),
  isClassType(?class),
  basic.SubtypeOf(?class, ?superclass),
  (?superclass = "java.util.Map";
    ?superclass = "java.util.Collection";
    ?superclass = "java.util.Dictionary").

BlacklistedHeapAllocation(?value) :-
  AssignHeapAllocation(?value, _, ?method),
  Method_DeclaringType(?method, ?class),
  isClassType(?class),
  match(?class, "java.lang.*").
  // (match(?class, "java.io.*");
  //  match(?class, "java.net.*");
  //  match(?class, "java.xml.*");
  //  match(?class, "java.lang.*")).

// .decl HeapAllocationInClass(?heap:Value, ?class:ClassType)

// HeapAllocationInClass(?heap, ?class) :-
//   AssignHeapAllocation(?heap, _, ?method),
//   Method_DeclaringType(?method, ?class).

// BlacklistedHeapAllocation(?heap) :-
//   HeapAllocationInClass(?heap, ?class),
//   HeapAllocationNumberPerClass(?class, ?n),
//   ?n > 100.

// .decl HeapAllocationNumberPerClass(?class:ClassType, ?number:number)   
// .output HeapAllocationNumberPerClass

// HeapAllocationNumberPerClass(?class, ?n) :-
//   isClassType(?class),
//   ?n = count : {HeapAllocationInClass(_, ?class)}.

.decl MainMethodDeclaration(?method:Method)

MainMethodDeclaration(?method) :-
#ifdef DISCOVER_MAIN_METHODS
  // Consider every main() in the application a "main method".
  ApplicationClass(?type),
#else
  // Use input facts for "main" methods.
  MainClass(?type),
#endif // DISCOVER_MAIN_METHODS
  AnyMainMethodDeclaration(?method, ?type).

#ifdef ANDROID
// Android apps start by running ActivityThread.main() or other
// internal entry points.
// TODO: this rule should only fire when analyzing an APK, not an AAR.
MainMethodDeclaration(?method) :-
  ( ?method = "<android.app.ActivityThread: void main(java.lang.String[])>"
  ; ?method = "<com.android.internal.os.RuntimeInit: void main(java.lang.String[])>"),
  isMethod(?method).
#endif // ANDROID

}

.init basic = Basic

#ifdef CFG_ANALYSIS
#include "../addons/cfg-analysis/analysis.dl"
#endif
