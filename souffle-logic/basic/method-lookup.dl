/**
 * Virtual method resolution
 *
 * TODO Test for accessibility.
 */
.decl MethodLookup(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)

.decl _MethodLookup_WithLen(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method, ?len:number)
.decl _MethodLookup_MoreThanOne(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType)
.decl _MethodLookup_ClassResolution(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
.decl _MethodLookup_ClosestInterface(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
.decl _MethodLookup_MultiClosestInterfaces(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType)
.decl _MethodLookup_ImpossibleClosest(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)

/**
 * Handling of the diamond problem in Java
 * https://www.javabrahman.com/java-8/java-8-multiple-inheritance-conflict-resolution-rules-and-diamond-problem/
 */
// Only one candidate
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, _),
    !_MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type).

// Mutliple candidates, the one defined in a class wins
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_ClassResolution(?simplename, ?descriptor, ?type, ?method).

// Multiple candidates, none defined in a class, pick the closest in the hierarchy
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method),
    !_MethodLookup_MultiClosestInterfaces(?simplename, ?descriptor, ?type).

// Multiple candidates, none define in a class, picke the closest that is not also higher in the hierarchy
// E.g. interface A, interface B extends A, class C implements B, A
// Pick the definition from B, though C also implements A.
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method),
    !_MethodLookup_ImpossibleClosest(?simplename, ?descriptor, ?type, ?method).


_MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, 0) :-
    MethodImplemented(?simplename, ?descriptor, ?type, ?method).

_MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, n + 1) :-
    DirectSuperclass(?type, ?supertype),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?supertype, ?method, n),
    !MethodImplemented(?simplename, ?descriptor, ?type, _).

_MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, n + 1) :-
    DirectSuperinterface(?type, ?supertype),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?supertype, ?method, n),
    !MethodImplemented(?simplename, ?descriptor, ?type, _).

_MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type) :-
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method1, _),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method2, _),
    ?method1 != ?method2.

_MethodLookup_ClassResolution(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type),
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, _),
    Method_DeclaringType(?method, ?supertype),
    isClassType(?supertype).

_MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method) :-
    _MethodLookup_MoreThanOne(?simplename, ?descriptor, ?type),
    ?minLen = min ?len : { _MethodLookup_WithLen(?simplename, ?descriptor, ?type, _, ?len) },
    _MethodLookup_WithLen(?simplename, ?descriptor, ?type, ?method, ?minLen),
    !_MethodLookup_ClassResolution(?simplename, ?descriptor, ?type, _).

_MethodLookup_MultiClosestInterfaces(?simplename, ?descriptor, ?type) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method1),
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method2),
    ?method1 != ?method2.

_MethodLookup_ImpossibleClosest(?simplename, ?descriptor, ?type, ?method2) :-
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method1),
    _MethodLookup_ClosestInterface(?simplename, ?descriptor, ?type, ?method2),
    Method_DeclaringType(?method1, ?type1),
    Method_DeclaringType(?method2, ?type2),
    SubtypeOf(?type1, ?type2),
    ?type1 != ?type2.


/**
 * Is there a non-abstract method declaration?
 */
.decl MethodImplemented(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)


#ifdef SANITY

// Helper relation to filter out covariant methods.
.decl CovariantMethods(?meth1:Method, ?meth2:Method)

CovariantMethods(?meth, ?methSub) :-
  SubtypeOf(?typeSub, ?type),
  Method_DeclaringType(?meth, ?type),
  Method_DeclaringType(?methSub, ?typeSub),
  Method_SimpleName(?meth, ?name),
  Method_SimpleName(?methSub, ?name),
  Method_Descriptor(?meth, ?descriptor),
  Method_Descriptor(?methSub, ?descriptor),
  Method_ReturnType(?meth, ?retType),
  Method_ReturnType(?methSub, ?retTypeSub),
  SubtypeOfDifferent(?retTypeSub, ?retType).
CovariantMethods(?meth, ?methSub) :-
  CovariantMethods(?methSub, ?meth).

// Method lookup should be a function of the first three arguments
// (simple name, descriptor, type).
.decl DuplicateMethodLookup(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method1:Method, ?method2:Method)

DuplicateMethodLookup(?simplename, ?descriptor, ?type, ?method1, ?method2):-
  MethodLookup(?simplename, ?descriptor, ?type, ?method1),
  MethodLookup(?simplename, ?descriptor, ?type, ?method2),
  ?method1 != ?method2,
  ?simplename != "<init>",
  ?simplename != "<clinit>",
  !CovariantMethods(?method1, ?method2).

.decl DuplicateMethodImplemented(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method1:Method, ?method2:Method)

DuplicateMethodImplemented(?simplename, ?descriptor, ?type, ?method1, ?method2):-
  MethodImplemented(?simplename, ?descriptor, ?type, ?method1),
  MethodImplemented(?simplename, ?descriptor, ?type, ?method2),
  ?method1 != ?method2,
  ?simplename != "<init>",
  ?simplename != "<clinit>",
  !CovariantMethods(?method1, ?method2).

#endif // SANITY

/**
 * Method overriding
 *
 * This shouldn't be too expensive, once MethodLookup has been computed,
 * and it's a useful concept.
 */
.decl MethodOverridesOther(?methodSub:Method, ?methodSuper:Method)
MethodOverridesOther(?methSub, ?methSuper) :-
  SubtypeOf(?subtype, ?supertype),
  Method_DeclaringType(?methSuper, ?supertype),
  Method_SimpleName(?methSuper, ?simplename),
  Method_Descriptor(?methSuper, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?subtype, ?methSub),
  ?methSub != ?methSuper.

/**
 * Arrays
 *
 * TODO MethodLookup of clone in an array type now results in
 *      Object.clone. This is not according to the spec, but in the
 *      Sun JVM arrays don't have a declared clone method either. The
 *      bytecode does indicate a call to clone in the array class, but
 *      the Jimple code turns this into a call of
 *      java.lang.Object.clone()
 *
 * TODO Alternative, better implementation: just make java.lang.Object
 *      a direct superclass of array types, something we should do
 *      anyway.
 */
MethodLookup(?simplename, ?descriptor, ?arraytype, ?method) :-
    isArrayType(?arraytype),
    isType(?objectType),
    MethodImplemented(?simplename, ?descriptor, ?objectType, ?method),
    ?objectType = "java.lang.Object".

MethodImplemented(?simplename, ?descriptor, ?type, ?method) :-
    Method_SimpleName(?method, ?simplename),
    Method_Descriptor(?method, ?descriptor),
    Method_DeclaringType(?method, ?type),
    ! Method_Modifier("abstract", ?method).

// Covariant method resolution, used to "go to definition" in server mode. Also
// used by the standalone CHA script.
//
// Logic that finds overridden methods with covariant return types.
// Covariant methods are found locally in each class by matching
// bridge methods (generated by javac) with normal methods.

.decl _BridgeMethod(?bridge:Method, ?name:symbol, ?type:Type)
.decl MethodMightBeCovariantBridge(?bridge:Method, ?meth:Method)

_BridgeMethod(?bridge, ?name, ?type) :-
   Method_Modifier("bridge", ?bridge),
   Method_SimpleName(?bridge, ?name),
   Method_DeclaringType(?bridge, ?type),
   ?name != "<clinit>",
   ?name != "<init>".

MethodMightBeCovariantBridge(?bridge, ?meth) :-
   Method_SimpleName(?meth, ?name),
   _BridgeMethod(?bridge, ?name, ?bridgetype),
   Method_DeclaringType(?meth, ?bridgetype),
   !Method_Modifier("bridge", ?meth).

//// Greatly suboptimal this way.
// MethodMightBeCovariantBridge(?bridge, ?meth) :-
//    Method_Modifier("bridge", ?bridge),
//    Method_SimpleName(?bridge, ?sameName),
//    ?sameName != "<clinit>",
//    ?sameName != "<init>",
//    Method_SimpleName(?meth, ?sameName),
//    !Method_Modifier("bridge", ?meth),
//    Method_DeclaringType(?bridge, ?type),
//    Method_DeclaringType(?meth, ?type).

.decl MethodNotCovariantBridge(?meth1:Method, ?meth2:Method)

// REVIEW: using _Var_Type instead of Var_Type to avoid
// recursion-through-negation.
MethodNotCovariantBridge(?meth1, ?meth2) :-
   MethodMightBeCovariantBridge(?meth1, ?meth2),
   FormalParam(?sameIndex, ?meth1, ?formal1),
   _Var_Type(?formal1, ?type1),
   FormalParam(?sameIndex, ?meth2, ?formal2),
   _Var_Type(?formal2, ?type2),
   ?type1 != ?type2.

MethodNotCovariantBridge(?meth1, ?meth2) :-
   MethodMightBeCovariantBridge(?meth1, ?meth2),
   FormalParam(?sameIndex, ?meth1, _),
   !FormalParam(?sameIndex, ?meth2, _).

MethodNotCovariantBridge(?meth1, ?meth2) :-
   MethodMightBeCovariantBridge(?meth1, ?meth2),
   FormalParam(?sameIndex, ?meth2, _),
   !FormalParam(?sameIndex, ?meth1, _).

.decl Method_CovariantBridge(?bridge:Method, ?cometh:Method)

Method_CovariantBridge(?bridge, ?cometh) :-
   MethodMightBeCovariantBridge(?bridge, ?cometh),
   !MethodNotCovariantBridge(?bridge, ?cometh),
   Method_ReturnType(?bridge, ?retType),
   Method_ReturnType(?cometh, ?coRetType),
   SubtypeOfDifferent(?coRetType, ?retType).

.decl MethodImplementedModuloCovariance(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)

// Superset of MethodImplemented, also containing covariant methods.
MethodImplementedModuloCovariance(?name, ?descriptor, ?type, ?method) :-
    MethodImplemented(?name, ?descriptor, ?type, ?method).
MethodImplementedModuloCovariance(?name, ?descriptor, ?type, ?comethod) :-
    MethodImplementedModuloCovariance(?name, _, ?type, ?comethod),
    Method_CovariantBridge(?method, ?comethod),
    Method_SimpleName(?method, ?name),
    Method_Descriptor(?method, ?descriptor).
