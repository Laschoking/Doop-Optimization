
#ifndef DISABLE_POINTS_TO
VarPointsTo(?hctx, ?argArray, ?ctx, ?args),
ArrayIndexPointsTo(?hctx, ?argArrayContent, ?hctx, ?argArray) :-
   isImmutableHContext(?hctx),
   basic.MainMethodDeclaration(?mainMethod),
   ReachableContext(?ctx, ?mainMethod),
   FormalParam(0, ?mainMethod, ?args),
   MainMethodArgArray(?argArray),
   MainMethodArgArrayContent(?argArrayContent).
#endif // DISABLE_POINTS_TO

/**
 *
 *  Conversion to souffle logic native-delta.logic below
 *
 **/

#define PlusAssignLocal(strFrom, strTo, strMethod) \
  AssignLocal(strFrom, strTo, strMethod) :- \
    isVar(strFrom), \
    isVar(strTo), \
    isMethod(strMethod)

#define PlusStoreStaticField(method, local, field) \
  StoreStaticField(local, field, method) :- \
    isMethod(method), \
    isVar(local), \
    isField(field)

// Populating this relation generates simulated native values.
.decl SimulateNativeAllocation(?strMethod: Method, ?strHeap: HeapAllocation, ?strConstructor: Method)

// Generate value.
AssignHeapAllocation(?strHeap, ?return, ?strMethod),
Value_DeclaringType(?strHeap, ?strType) :-
  SimulateNativeAllocation(?strMethod, ?strHeap, _),
  Method_DeclaringType(?strMethod, ?strType),
  NativeReturnVar(?return, ?strMethod),
  isHeapAllocation(?strHeap).

// Generate construction site.
SpecialMethodInvocation_Base(?newInstrId, ?return),
Instruction_Method(?newInstrId, ?strMethod),
MethodInvocation_Method(?newInstrId, strConstructor),
PlusSpecialMethodInvocation(?newInstrId),
Instruction_Index(?newInstrId, ?index) :-
  SimulateNativeAllocation(?strMethod, _, strConstructor),
  isMethod(?strMethod),
  NativeReturnVar(?return, ?strMethod),
  isMethod(strConstructor),
  ?index = 1,
  ?newInstrId = cat(?strMethod, cat("/native ", strConstructor)).

.decl SimulatedNativeAllocation(?heap:HeapAllocation, ?method:Method)
.output SimulatedNativeAllocation

#define SimulateNativeStringArrayAllocation(strMethod, strArray, strElement, strElementType) \
  SimulatedNativeAllocation(strArray, strMethod). \
  SimulatedNativeAllocation(strElement, strMethod). \
  \
  AssignHeapAllocation(strArray, ?return, strMethod) \
    :- \
      isMethod(strMethod), \
      NativeReturnVar(?return, strMethod), \
      isHeapAllocation(strArray). \
  \
  isVar(cat(strMethod, "/@native-array-element")), \
  Var_Type(cat(strMethod, "/@native-array-element"), strElementType), \
  Var_DeclaringMethod(cat(strMethod, "/@native-array-element"), strMethod), \
  AssignHeapAllocation(strElement, cat(strMethod, "/@native-array-element"), strMethod), \
  StoreArrayIndex(cat(strMethod, "/@native-array-element"), ?base, strMethod) \
    :- \
      isMethod(strMethod), \
      NativeReturnVar(?base, strMethod), \
      isType(strElementType), \
      isHeapAllocation(strElement)

#define SimulateNativeStaticToVirtual(strMethod, strVirtual) \
  PlusVirtualMethodInvocation(cat(strMethod, cat("/native ", strVirtual))), \
  VirtualMethodInvocation(cat(strMethod, cat("/native ", strVirtual)), strVirtual, strMethod), \
  VirtualMethodInvocation_Base(cat(strMethod, cat("/native ", strVirtual)), ?base), \
  Instruction_Method(cat(strMethod, cat("/native ", strVirtual)), strMethod), \
  MethodInvocation_Method(cat(strMethod, cat("/native ", strVirtual)), strVirtual), \
  Instruction_Index(cat(strMethod, cat("/native ", strVirtual)), ?index) \
    :- \
      isMethod(strMethod), \
      FormalParam(0, strMethod, ?base), \
      isMethod(strVirtual), \
      ?index = 1.\
  \
  PlusMethodInvocation(cat(strMethod, cat("/native ", strVirtual))), \
  AssignReturnValue(cat(strMethod, cat("/native ", strVirtual)), ?return) \
    :- \
      isMethod(strMethod), \
      NativeReturnVar(?return, strMethod)

/**********************************************************************************
 *
 * java.lang.Object
 *
 **********************************************************************************/

/**
 * <java.lang.Object: java.lang.Object clone()>
 *
 * TODO could throw CloneNotSupportedException
 *
 * TODO should check if the object is Cloneable.
 *
 * TODO should return a clone of the heap allocation (not
 *      identity). The behaviour implemented here is based on Soot.
 */
AssignLocal(?this, ?ret, ?method) :-
  ?method = "<java.lang.Object: java.lang.Object clone()>",
  isMethod(?method),
  ThisVar(?method, ?this),
  ReturnVar(?ret, ?method).


/**********************************************************************************
 *
 * java.lang.System
 *
 ***************************************************/

/**
 * <java.lang.System: void setIn0(java.io.InputStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setIn0(java.io.InputStream)>",
  "<java.lang.System: void setIn0(java.io.InputStream)>/@parameter0",
  "<java.lang.System: java.io.InputStream in>").


// For Wala:
PlusStoreStaticField(
  "<java.lang.System: void setIn0(java.io.InputStream)>",
  "<java.lang.System: void setIn0(java.io.InputStream)>/v1",
  "<java.lang.System: java.io.InputStream in>").

/**
 * <java.lang.System: void setOut0(java.io.PrintStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setOut0(java.io.PrintStream)>",
  "<java.lang.System: void setOut0(java.io.PrintStream)>/@parameter0",
  "<java.lang.System: java.io.PrintStream out>").

// For Wala:
PlusStoreStaticField(
  "<java.lang.System: void setOut0(java.io.PrintStream)>",
  "<java.lang.System: void setOut0(java.io.PrintStream)>/v1",
  "<java.lang.System: java.io.PrintStream out>").

/**
 * <java.lang.System: void setErr0(java.io.PrintStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setErr0(java.io.PrintStream)>",
  "<java.lang.System: void setErr0(java.io.PrintStream)>/@parameter0",
  "<java.lang.System: java.io.PrintStream err>").

PlusStoreStaticField(
  "<java.lang.System: void setErr0(java.io.PrintStream)>",
  "<java.lang.System: void setErr0(java.io.PrintStream)>/v1",
  "<java.lang.System: java.io.PrintStream err>").

/**
 * <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
 */
PlusVar(cat(?invocation, "/@tmp-arraycopy"), ?inmethod, ?tmpType),
LoadArrayIndex(?src, cat(?invocation, "/@tmp-arraycopy"), ?inmethod),
StoreArrayIndex(cat(?invocation, "/@tmp-arraycopy"), ?dest, ?inmethod) :-
   ?arraycopy = "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>",
   isMethod(?arraycopy),
   StaticMethodInvocation(?invocation, ?arraycopy, ?inmethod),
   ActualParam(0, ?invocation, ?src),
   ActualParam(2, ?invocation, ?dest),
   isMethodInvocation(?invocation),
   ?tmpType = "java.lang.Object",
   isType(?tmpType).

/**********************************************************************************
 *
 * sun.misc.Unsafe
 *
 **********************************************************************************/
// For now handle these as array operations, not as field operations
StoreArrayIndex(?from, ?base, ?inmethod) :-
  ?casObject = "<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>",
  isMethod(?casObject),
  VirtualMethodInvocation(?invocation, ?casObject, ?inmethod),
  ActualParam(0, ?invocation, ?base),
  ActualParam(3, ?invocation, ?from).

StoreArrayIndex(?from, ?base, ?inmethod) :-
  (?putObj = "<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>";
   ?putObj = "<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>";
   ?putObj = "<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>";
   ?putObj = "<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>"),
  isMethod(?putObj),
  VirtualMethodInvocation(?invocation, ?putObj, ?inmethod),
  ActualParam(0, ?invocation, ?base),
  ActualParam(2, ?invocation, ?from).

LoadArrayIndex(?base, ?to, ?inmethod) :-
  (?getObj = "<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>";
   ?getObj = "<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>";
   ?getObj = "<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>"),
  isMethod(?getObj),
  VirtualMethodInvocation(?invocation, ?getObj, ?inmethod),
  ActualParam(0, ?invocation, ?base),
  AssignReturnValue(?invocation, ?to).

/**********************************************************************************
 *
 * java.io.FileSystem
 *
 **********************************************************************************/

#if defined(JRE3) || defined (JRE4) || defined(JRE5) || defined(JRE6)
SimulateNativeAllocation(
  "<java.io.FileSystem: java.io.FileSystem getFileSystem()>",
  "java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem",
  "<java.io.UnixFileSystem: void <init>()>").
#endif // JRE < 1.7

#ifdef ANDROID
// Native Android method.
SimulateNativeStringArrayAllocation(
  "<java.io.UnixFileSystem: java.lang.String[] list0(java.io.File)>",
  "<java.io.UnixFileSystem: java.lang.String[] list0(java.io.File)>/new java.lang.String[]/0",
  "<java.io.UnixFileSystem: java.lang.String[] list0(java.io.File)>/new java.lang.String/0",
  "java.lang.String").
#else
// Native OpenJDK method.
SimulateNativeStringArrayAllocation(
  "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>",
  "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String[]/0",
  "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String/0",
  "java.lang.String").
#endif // ANDROID

/**********************************************************************************
 *
 * java.lang.ref.Finalizer
 *
 **********************************************************************************/

/**
 * Indirect invocations of finalize methods from java.lang.ref.Finalizer.
 *
 * Object.finalize is a protected method, so it cannot be directly
 * invoked. Finalizer uses an indirection via native code to
 * circumvent this. This rule implements this indirection.
 */
SimulateNativeStaticToVirtual(
  "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",
  "<java.lang.Object: void finalize()>").

/**********************************************************************************
 *
 * java.security.AccessController
 *
 **********************************************************************************/

/**
 * The run methods of privileged actions are invoked through the
 * AccessController.doPrivileged method. This introduces an
 * indirection via native code that needs to be simulated in a pointer
 * analysis.
 *
 * Call from an invocation of doPrivileged to an implementation of the
 * PrivilegedAction.run method that will be indirectly invoked.
 *
 * The first parameter of a doPrivileged invocation (a
 * PrivilegedAction) is assigned to the 'this' variable of 'run()'
 * method invocation.
 *
 * The return variable of the 'run()' method of a privileged action is
 * assigned to the return result of the doPrivileged method
 * invocation.
 *
 * TODO for PrivilegedExceptionAction, catch exceptions and wrap them in a PriviligedActionException.
 */
SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",
  "<java.security.PrivilegedAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",
  "<java.security.PrivilegedAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",
  "<java.security.PrivilegedExceptionAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",
  "<java.security.PrivilegedExceptionAction: java.lang.Object run()>").

#ifndef ANDROID
/**********************************************************************************
 *
 * sun.misc.Perf
 *
 **********************************************************************************/
SimulateNativeAllocation(
  "<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>",
  "<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>/new java.nio.DirectByteBuffer/0",
  "<java.nio.DirectByteBuffer: void <init>()>").
#endif // ANDROID

/**********************************************************************************
 *
 * java.lang.ref
 *
 **********************************************************************************/

// REVIEW: does this need more handling, e.g., ReferenceQueue?

.decl StoreIntoWeakReference(?basehctx:configuration.HContext, ?basevalue:Value, ?ctx:configuration.Context, ?from:Var)
.decl LoadFromReference(?ctx:configuration.Context, ?to:Var, ?basehctx:configuration.HContext, ?basevalue:Value)

.decl StoreIntoWeakReferenceArgs(?from:Var, ?base:Var)
StoreIntoWeakReferenceArgs(?from, ?base) :-
  ?weakRefCtor = "<java.lang.ref.WeakReference: void <init>(java.lang.Object)>",
  MethodInvocation_Method(?invo, ?weakRefCtor),
  OptSpecialMethodInvocationBase(?invo, ?base),
  ActualParam(0, ?invo, ?from).

StoreIntoWeakReference(?basehctx, ?basevalue, ?ctx, ?from) :-
  StoreIntoWeakReferenceArgs(?from, ?base),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

.decl LoadFromReferenceArgs(?base:Var, ?to:Var)
LoadFromReferenceArgs(?base, ?to) :-
  ?refGet = "<java.lang.ref.Reference: java.lang.Object getReferent()>",
  MethodInvocation_Method(?invo, ?refGet),
  OptSpecialMethodInvocationBase(?invo, ?base),
  AssignReturnValue(?invo, ?to).

LoadFromReference(?ctx, ?to, ?basehctx, ?basevalue) :-
  LoadFromReferenceArgs(?base, ?to),
  VarPointsTo(?basehctx, ?basevalue, ?ctx, ?base).

HeapInterproceduralAssign(?ctxTo, ?to, ?ctxFrom, ?from) :-
  LoadFromReference(?ctxTo, ?to, ?basehctx, ?basevalue),
  StoreIntoWeakReference(?basehctx, ?basevalue, ?ctxFrom, ?from),
  !Value_Null(?basevalue).
  .plan 1:(2,1)


#ifdef SIMULATE_NATIVE_RETURNS
// Crude heuristic: assume that every native method that returns a
// class/array type C, returns an object allocated in that method. This is
// an underapproximation: the method could return objects of a subtype of C
// but we cannot model all of them in practice as the type hierarchy under
// C can be big (for example when C=java.lang.Object).

.decl ReachableNativeMethodInvocation(?ctx:configuration.Context, ?invo:MethodInvocation, ?nativeMethod:Method)
.output ReachableNativeMethodInvocation

.decl _NativeMethodInvocation(?invo:MethodInvocation, ?nativeMethod:Method)
_NativeMethodInvocation(?invo, ?nativeMethod) :-
  Method_Modifier("native", ?nativeMethod),
  MethodInvocation_Method(?invo, ?nativeMethod).

ReachableNativeMethodInvocation(?ctx, ?invo, ?nativeMethod) :-
  _NativeMethodInvocation(?invo, ?nativeMethod),
  ReachableContext(?ctx, ?nativeMethod).

.decl NativeMethodReturningValue(?m:Method, ?t:Type, ?return:Var, ?v:Value)
.output NativeMethodReturningValue

#define NativeReturnValId(t, m) cat("<native ", cat(t, cat(" value allocated in ", cat(m, ">"))))

#ifndef DISABLE_POINTS_TO
VarPointsTo(?hctx, NativeReturnValId(?t, ?m), ?ctx, ?return),
#endif // DISABLE_POINTS_TO
NativeMethodReturningValue(?m, ?t, ?return, NativeReturnValId(?t, ?m)),
MockValueConsMacro(NativeReturnValId(?t, ?m), ?t),
ReachableValue(?hctx, NativeReturnValId(?t, ?m)) :-
  ReachableNativeMethodInvocation(?ctx, _, ?m),
  NativeReturnVar(?return, ?m),
  Var_Type(?return, ?t),
  (isClassType(?t) ; isArrayType(?t)),
  isImmutableHContext(?hctx).
#endif // SIMULATE_NATIVE_RETURNS

// Native contexts are currently another name for immutable contexts.
.decl isNativeContext(?ctx:configuration.Context)
isNativeContext(?ctx) :- isImmutableContext(?ctx).

#ifdef SCAN_NATIVE_CODE

// A filtered version of the cross-product.
.decl HighlyPossibleNativeCodeTargetMethod(?method:Method, ?function:symbol, ?file:symbol)
// Accept calls to non-constructors.
HighlyPossibleNativeCodeTargetMethod(?method, ?function, ?file) :-
  basic.PossibleNativeCodeTargetMethod(?method, ?function, ?file),
  !basic.ClassConstructor(?method, _).
// Accept calls to constructors if instance methods are reachable.
HighlyPossibleNativeCodeTargetMethod(?method, ?function, ?file) :-
  basic.PossibleNativeCodeTargetMethod(?method, ?function, ?file),
  basic.ClassConstructor(?method, ?type),
  Method_DeclaringType(?instanceMethod, ?type),
  Reachable(?instanceMethod),
  !Method_Modifier("static", ?instanceMethod).
// Accept calls to constructors if instance fields are used.
HighlyPossibleNativeCodeTargetMethod(?method, ?function, ?file) :-
  basic.PossibleNativeCodeTargetMethod(?method, ?function, ?file),
  basic.ClassConstructor(?method, ?type),
  Field_DeclaringType(?field, ?type),
  ( StoreHeapInstanceField(?field, _, _, _, _)
  ; LoadHeapInstanceField(_, _, ?field, _, _)),
  !Field_Modifier("static", ?field).

// Reachability for methods discovered by the native code scanner.
.decl ReachableMethodFromNativeCode(?method:Method)
.decl ReachableContextFromNative(?ctx:configuration.Context, ?method:Method, ?function:symbol, ?file:symbol)

ReachableMethodFromNativeCode(?method),
ReachableContextFromNative(?ctx, ?method, ?function, ?file) :-
  HighlyPossibleNativeCodeTargetMethod(?method, ?function, ?file),
  isNativeContext(?ctx).

// This rule handles the possibility of <clinit> being triggered on
// the call from native. The rule is useful for calculating recall
// against the dynamic HeapDL analysis but it can be skipped without
// affecting reachability results.
ReachableMethodFromNativeCode(?clinit) :-
  ReachableMethodFromNativeCode(?method),
  Method_DeclaringType(?method, ?class),
  ClassInitializer(?class, ?clinit).

.decl ReachableAppMethodFromNativeCode(?method:Method)
ReachableAppMethodFromNativeCode(?method) :-
  ReachableMethodFromNativeCode(?method),
  ApplicationMethod(?method).

// Call-graph edges from native methods. This only captures direct call-graph
// edges from native methods; if a native method calls other native code to do
// the call, that behavior will be missed.

.decl CallGraphEdgeFromNativeMethod(?targetMethod:Method, ?nativeMethod:Method, ?function:symbol, ?file:symbol)
.output CallGraphEdgeFromNativeMethod

CallGraphEdgeFromNativeMethod(?targetMethod, ?nativeMethod, ?function, ?file) :-
  HighlyPossibleNativeCodeTargetMethod(?targetMethod, ?function, ?file),
  basic.JNIMethod_NativeId(?nativeMethod, ?function).

// Filtered CallGraphEdgeFromNativeMethod, in the "application" part.
.decl AppCallGraphEdgeFromNativeMethod(?targetMethod:Method, ?nativeMethod:Method)
.output AppCallGraphEdgeFromNativeMethod

AppCallGraphEdgeFromNativeMethod(?targetMethod, ?nativeMethod) :-
  CallGraphEdgeFromNativeMethod(?targetMethod, ?nativeMethod, _, _),
  ApplicationMethod(?targetMethod),
  ApplicationMethod(?nativeMethod).

// Native allocations detected by the native scanner.
.decl NativeAllocation(?constructor:Method, ?function:symbol, ?file:symbol, ?type:ReferenceType)
NativeAllocation(?constructor, ?function, ?file, ?type) :-
  HighlyPossibleNativeCodeTargetMethod(?constructor, ?function, ?file),
  basic.ClassConstructor(?constructor, ?type).

// Native allocations trigger finalization code in the Android runtime. See:
// https://android.googlesource.com/platform/libcore/+/master/luni/src/main/java/java/lang/ref/FinalizerReference.java
#ifdef ANDROID
ReachableMethodFromNativeCode(?finalizerAdd) :-
  NativeAllocation(_, _, _, _),
  ?finalizerAdd = "<java.lang.ref.FinalizerReference: void add(java.lang.Object)>",
  isMethod(?finalizerAdd).
#endif // ANDROID


// Process methods found by the native scanner. This includes mocking of arguments.

ReachableContext(?ctx, ?meth) :-
  ReachableContextFromNative(?ctx, ?meth, _, _).

#ifndef DISABLE_POINTS_TO
// Mock arguments for methods called from native code.
MockValueConsMacro(?mockId, ?frmType),
VarPointsTo(?immHCtx, ?mockId, ?ctx, ?frm) :-
  ReachableContextFromNative(?ctx, ?method, ?function, ?file),
  FormalParam(_, ?method, ?frm),
  _Var_Type(?frm, ?frmType),
  isImmutableHContext(?immHCtx),
  ?mockId = cat("<mock native object of type ", cat(?frmType, cat(" from ", cat(?file, cat(":", cat(?function, ">")))))).

// Mock 'this' for methods called from native code.
MockValueConsMacro(?mockId, ?type),
VarPointsTo(?immHCtx, ?mockId, ?ctx, ?this) :-
  ReachableContextFromNative(?ctx, ?method, ?function, ?file),
  ThisVar(?method, ?this),
  _Var_Type(?this, ?type),
  isImmutableHContext(?immHCtx),
  ?mockId = cat("<mock receiver of type ", cat(?type, cat(" from ", cat(?file, cat(":", cat(?function, ">")))))).
#endif // DISABLE_POINTS_TO

#endif // SCAN_NATIVE_CODE
