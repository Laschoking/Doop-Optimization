/**
// Original blueprint for modeling of Android events. This comment should
// probably be kept even when the code gets far more sophisticated. It
// will show the original thinking, which will be a good starting point
// for understanding.

// -Every application-level activity/service/content provider/broadcast
//  receiver class instantiated with a new object. All public methods of
//  these objects deemed reachable. (REVIEW: with what arguments?) Also
//  protected methods that override library methods.

// -Layout/View class: transitive subtype of android.view.ViewGroup or
//  android.view.View
//   * Every layout control (application-level or not) that appears in
//     the XML (with resource id) is instantiated (REVIEW: with what
//     links to other controls? Call constructors with some arguments,
//     perhaps?)
//   * Every layout control instantiated (in any way) has its public
//     methods whose names start with "on" be reachable (REVIEW: with
//     what arguments?)
//   * Refinement: certainly we need a mock LayoutInflater object passed
//     to a fragment's "onCreateView", to allow calling "inflate" on it.
//   * Refinement: return right view for findViewById, (Receiver is
//     parent view, but we assume it's correct.)
//   * View.inflate called with an id should return the appropriate view

// -A class is a listener or a callback if it's a subtype of a class or
//  interface with "Callback" or "Listener" in its name
//   * Every instantiated listener or callback object (opt.: that flows
//     to a library method that accepts a listener interface) has its
//     public methods whose names start with "on" be reachable (REVIEW:
//     with what arguments?)
**/

#include "android-xml.dl"

/**
 * App Components, in layout resources or dynamically registered
**/

.decl AndroidOriginalAppComponent(?type:ReferenceType)
AndroidOriginalAppComponent(?type) :-
  (Activity(?type), !DisabledActivity(?type));
  Service(?type);
  BroadcastReceiver(?type);
  ContentProvider(?type);
  AndroidApplication(?type).

AndroidAppComponent(?type) :-
  AndroidOriginalAppComponent(?type).

.decl RegisterBroadCastReceiverVar(?var:Var)
RegisterBroadCastReceiverVar(?var) :-
  Method_SimpleName(?method, "registerReceiver"),
  MethodInvocation_Method(?invocation, ?method),
  ActualParam(0, ?invocation, ?var),
  ApplicationVar(?var),
  Var_Type(?var, ?type),
  basic.SupertypeOf("android.content.BroadcastReceiver", ?type).

AndroidAppComponent(?type),
ReifiedAndroidObjectValue(?value, ?type) :-
  RegisterBroadCastReceiverVar(?var),
  VarPointsTo(_, ?value, _, ?var),
  Value_Type(?value, ?type),
  isReferenceType(?type),
  !AndroidOriginalAppComponent(?type).

// Create a new heap object per component declared in layout
// (XML) resources. (REVIEW) These are normal heap objects.
MockValueConsMacro(cat("<Android component object ", cat(?type, ">")), ?type),
ReifiedComponent(?type, cat("<Android component object ", cat(?type, ">"))) :-
  AndroidOriginalAppComponent(?type),
  isReferenceType(?type).

ReifiedAndroidObjectValue(?value, ?type) :-
  ReifiedComponent(?type, ?value).

PublicMethodOfComponent(?meth) :-
  AndroidAppComponent(?type),
  basic.MethodDeclaredOrInherited(?meth, ?type),
  Method_Modifier("public", ?meth).

ProtectedMethodOfComponent(?meth) :-
  AndroidAppComponent(?type),
  basic.MethodDeclaredOrInherited(?meth, ?type),
  Method_Modifier("protected", ?meth).

.decl NonPrivateConcreteMethodOfComponent(?meth:Method)
NonPrivateConcreteMethodOfComponent(?meth) :-
  AndroidAppComponent(?type),
  basic.MethodDeclaredOrInherited(?meth, ?type),
  !Method_Modifier("private", ?meth),
  !Method_Modifier("abstract", ?meth).

// The protected method overrides one in a library type, hence it's
// callable from the library.
OverridingProtectedMethodOfComponent(?methConcrete) :-
  ProtectedMethodOfComponent(?meth),
  AppMethodOverridesAndroidLibraryMethod(?methConcrete, ?meth).

ForcedReachableAndroidContext(?ctx, ?meth) :-
//// Weaken. Seems reasonable.
//  (PublicMethodOfComponent(?meth);
//   OverridingProtectedMethodOfComponent(?meth);
  (NonPrivateConcreteMethodOfComponent(?meth);
   AndroidCallbackMethod(?meth, _)),
  isImmutableContext(?ctx).

// By marking them "ForcedReachable" we enable their mocking, not just reachability.
ForcedReachableAndroidContext(?ctx, ?meth) :-
  AndroidEntryPoint(?meth),
  isImmutableContext(?ctx).

/**
 * Layout control objects
**/

#define LAYOUT_CONTROL(id, type) cat("<layout control object ", cat(id, cat(" of type ", cat(type, ">"))))

// Create a new heap object per control object declared in layout
// (XML) resources. (REVIEW) These are normal heap objects.
MockValueConsMacro(?layoutId, ?type),
ReifiedLayoutControl(?type, ?id, ?layoutId) :-
  LayoutControl(?id, ?type, _),
  isReferenceType(?type),
  ?layoutId = LAYOUT_CONTROL(?id, ?type).

ReifiedAndroidObjectValue(?value, ?type) :-
  ReifiedLayoutControl(?type, _, ?value).

SensitiveLayoutControlValue(?value) :-
  ReifiedLayoutControl(?type, ?id, ?value),
  SensitiveLayoutControl(?id, ?type, _).

// Create layout controls from XML elements by looking up their
// Android id (@id/x) in the R resource fields.
.decl XMLLayoutControl(?file:symbol, ?nodeId:symbol, ?id:symbol)
.output XMLLayoutControl

XMLLayoutControl(?file, ?nodeId, ?id),
LayoutControl(?id, ?class, "-") :-
  XMLAndroidId(?file, ?nodeId, _, "id", ?resourceLabel, ?class),
  Field_SimpleName(?fld, ?resourceLabel),
  ApplicationPackage(?appPkg),
  Field_DeclaringType(?fld, cat(?appPkg, ".R$id")),
  Field_Modifier("final", ?fld),
  FieldInitialValue(?fld, ?id).

// Make password controls sensitive.
SensitiveLayoutControl(?id, ?class, "-") :-
  XMLAndroidId(?file, ?nodeId, _, _, _, ?class),
  XMLAndroidPasswordControl(?file, ?nodeId),
  XMLLayoutControl(?file, ?nodeId, ?id).

// Handle library-callable "on*" methods of layout controls

.decl OnEventMethod(?meth:Method)
OnEventMethod(?meth) :-
  Method_SimpleName(?meth, ?simplename),
  (match("on.*", ?simplename);
   match("before.*", ?simplename);
   match("after.*", ?simplename)).

PublicOnMethodOfLayoutControl(?meth) :-
  basic.MethodDeclaredOrInherited(?meth, ?type),
  LayoutControl(_, ?type, _),
  OnEventMethod(?meth),
  Method_Modifier("public", ?meth).

ProtectedOnMethodOfLayoutControl(?meth) :-
  basic.MethodDeclaredOrInherited(?meth, ?type),
  LayoutControl(_, ?type, _),
  OnEventMethod(?meth),
  Method_Modifier("protected", ?meth).

OverridingProtectedOnMethodOfLayoutControl(?methConcrete) :-
  ProtectedOnMethodOfLayoutControl(?meth),
  AppMethodOverridesAndroidLibraryMethod(?methConcrete, ?meth).

ForcedReachableAndroidContext(?ctx, ?meth) :-
  (PublicOnMethodOfLayoutControl(?meth);
   OverridingProtectedOnMethodOfLayoutControl(?meth)),
  isImmutableContext(?ctx).

// Relation ReachableLayoutControl registers all types whose methods
// (constructors plus on* methods) are to be made reachable.
.decl ReachableLayoutControl(?type:ReferenceType)
ForcedReachableAndroidContext(?ctx, ?meth) :-
  ReachableLayoutControl(?type),
  Method_DeclaringType(?meth, ?type),
  (Method_SimpleName(?meth, "<init>") ; OnEventMethod(?meth)),
  isImmutableContext(?ctx).

// Create special values for layout controls made reachable by the analysis.
MockValueConsMacro(?value, ?type),
ReifiedAndroidObjectValue(?value, ?type) :-
  ReachableLayoutControl(?type),
  ?value = cat("<reachable layout control of type ", cat(?type, ">")).

// Make launcher activity methods forced-reachable.
ReachableLayoutControl(?type) :- LauncherActivity(?type), !DisabledActivity(?type).

#ifdef DISABLE_POINTS_TO
// Crude rule for disabled points-to: make all detected control/fragment
// constructors and callbacks reachable.
ReachableLayoutControl(?class) :- XMLFragment_Class(_, _, ?class).
ReachableLayoutControl(?class) :- LayoutControl(_, ?class, _).
ReachableLayoutControl(?class) :- LayoutBehavior(?class).
#endif // DISABLE_POINTS_TO

// Consider action view classes reachable.
ReachableLayoutControl(?class) :- ActionViewType(?class).

/**
 * Intents and Bundles
**/

// No implicit reachability for methods, just instantiate mock objects to be
// used as arguments elsewhere.
ImplicitlyInstantiatedLibraryType(?type) :-
  (?type = "android.content.Intent";
   ?type = "android.os.Bundle"),
  isReferenceType(?type).

MockValueConsMacro(cat("<Android library object ", cat(?type, ">")), ?type),
ReifiedLibraryObject(?type, cat("<Android library object ", cat(?type, ">"))) :-
  ImplicitlyInstantiatedLibraryType(?type),
  isReferenceType(?type).

ReifiedAndroidObjectValue(?value, ?type) :-
  ReifiedLibraryObject(?type, ?value).

// Make "void onCreate(Bundle)" reachable.
ForcedReachableAndroidContext(?ctx, ?method) :-
  ReachableLayoutControl(?activityType),
  Activity(?activityType),
  Method_DeclaringType(?method, ?activityType),
  Method_SimpleName(?method, "onCreate"),
  Method_JVMDescriptor(?method, "(Landroid/os/Bundle;)V"),
  isImmutableContext(?ctx).

/**
 * View objects
**/

AndroidViewType(?type) :-
  basic.SubtypeOf(?type, ?supertype),
  (?supertype = "android.view.View";
   ?supertype = "android.view.ViewGroup").

// anantoni: Make the getters and setters of classes extending View reachable
//// REVIEW: this seems pretty liberal
MockValueConsMacro(cat("<Android view object ", cat(?viewType, ">")), ?viewType),
ReifiedAndroidObjectValue(cat("<Android view object ", cat(?viewType, ">")), ?viewType),
ForcedReachableAndroidContext(?ctx, ?meth) :-
  Method_SimpleName(?meth, ?simplename),
  (match("set.*", ?simplename);
   match("get.*", ?simplename)),
  basic.ConcreteMethodDeclared(?meth, ?viewType),
  AndroidViewType(?viewType),
  isImmutableContext(?ctx).


// Keep Activity methods for onClick behavior.
MockValueConsMacro(cat("<Android activity object ", cat(?type, ">")), ?type),
ReifiedAndroidObjectValue(cat("<Android activity object ", cat(?type, ">")), ?type),
ForcedReachableAndroidContext(?ctx, ?method) :-
  AndroidCallbackMethod(?method, ?type),
  isImmutableContext(?ctx).


// Recognize "Keep" annotations on methods.
MockValueConsMacro(cat("<Android keep object ", cat(?type, ">")), ?type),
ReifiedAndroidObjectValue(cat("<Android keep object ", cat(?type, ">")), ?type),
ForcedReachableAndroidContext(?ctx, ?method) :-
  Method_Annotation(?method, "android.support.annotation.Keep"),
  Method_DeclaringType(?method, ?type),
  isImmutableContext(?ctx).


/**
 * Listeners and callbacks
**/

// In addition to general listener/callback types, we add some interfaces with "on"
// methods that are used for callbacks.
AndroidLibraryListenerType(?type) :-
  AndroidLibraryType(?type),
  (contains("Listener", ?type);
   contains("Callback", ?type);
   contains("Observer", ?type);
   contains("android.content.ServiceConnection", ?type)).

ListenerType(?type) :-
  AndroidLibraryListenerType(?listenerType),
  basic.SubtypeOf(?type, ?listenerType),
  isReferenceType(?type).

AndroidApplicationListenerClass(?class) :-
  AndroidApplicationClass(?class),
  ListenerType(?class),
  isClassType(?class).

PublicOnMethodOfReachableListener(?meth) :-
  LibraryReachableAppListenerType(?class),
  basic.MethodDeclaredOrInherited(?meth, ?class),
  OnEventMethod(?meth),
  Method_Modifier("public", ?meth).

ProtectedOnMethodOfReachableListener(?meth) :-
  LibraryReachableAppListenerType(?class),
  basic.MethodDeclaredOrInherited(?meth, ?class),
  OnEventMethod(?meth),
  Method_Modifier("protected", ?meth).

OverridingProtectedOnMethodOfReachableListener(?methConcrete) :-
  ProtectedOnMethodOfReachableListener(?meth),
  AppMethodOverridesAndroidLibraryMethod(?methConcrete, ?meth).

ForcedReachableAndroidContext(?ctx, ?meth) :-
  (PublicOnMethodOfReachableListener(?meth);
   OverridingProtectedOnMethodOfReachableListener(?meth)),
  isImmutableContext(?ctx).

//// Note that all of the above (unlike earlier logic for views, components,
//// layout controls) is not applied indiscriminately, but only to "LibraryReachable"
//// listener types. These are defined below.

// REVIEW: be liberal: if an object is a listener, and it is instantiated
// in the application, then consider it to flow to the library.
ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType) :-
  ReachableApplicationObjectOfType(?hctx, ?value, ?ofType),
  AndroidApplicationListenerClass(?ofType).

TypeHasApplicationObjectFlowingToLibrary(?ofType),
LibraryReachableAppListenerType(?ofType) :-
  TypeHasReachableApplicationObject(?ofType),
  AndroidApplicationListenerClass(?ofType).

  
// Same if the class constant object of a listener is instantiated
// somewhere, explicitly (via <className>.class).
// REVIEW: for extra soundness, we can consider all ReifiedClass objects.
//  But this will probably destroy precision.
.decl ListenerClassConstantValue(?classHeap:Value, ?type:ReferenceType)
ListenerClassConstantValue(?classHeap, ?type) :-
  ClassHeap_InstanceType(?classHeap, ?type),
  // or: ReifiedClass(?type, ?classHeap),  // needs reflection enabled!
  AndroidApplicationListenerClass(?type).

ApplicationObjectFlowingToLibrary(?hctx, ?mockListener, ?type),
MockValueConsMacro(?mockListener, ?type) :-
  ListenerClassConstantValue(?classHeap, ?type),
  ReachableValue(?hctx, ?classHeap),
  ?mockListener = cat("<mock Android listener-like object ", cat(?type, ">")).

TypeHasApplicationObjectFlowingToLibrary(?type),
LibraryReachableAppListenerType(?type) :-
  ListenerClassConstantValue(_, ?type),
  TypeHasReachableValue(?type).


//// More precise logic.
//// Currently this is too conservative. We need to model more of
//// the environment, such as "getActivity", for
//// this to work well.
// LibraryMethodArgAcceptingListeners(?formal) :-
//   Method:DeclaringType[?meth] = ?type,
//   AndroidLibraryType(?type),
//   FormalParam[_, ?meth] = ?formal,
//   Var:Type[?formal] = ?formalType,
//   ListenerType(?formalType).

// ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType) :-
//   VarPointsTo(?hctx, ?value, _, ?formal),
//   LibraryMethodArgAcceptingListeners(?formal),
//   Value:Type[?value] = ?ofType,
//   AndroidApplicationListenerClass(?ofType).

// LibraryReachableAppListenerType(?type) :-
//   ApplicationObjectFlowingToLibrary(_, _, ?type),
//   AndroidApplicationListenerClass(?type).


///**
// * Public methods of activities
// * REVIEW: This seems like a no-op. Activities are components. All their
// *  public methods are reachable.
//**/
//
//// make reachable public methods of Activities that take a View as first arg
//ForcedReachableAndroidContext(?ctx, ?meth),
//ReachableContext(?ctx, ?meth) :-
//  Method_Modifier("public", ?meth),
//  FormalParam(0, ?meth, ?arg),
//  Var_Type(?arg, "android.view.View"),
//  basic.ConcreteMethodDeclared(?meth, ?class),
//  Activity(?class),
//  isImmutableContext(?ctx).


/**
 * Binders, Parcelables
**/

// Objects that implement IBinder are "remotable", used as part of a simple IPC
// mechanism. Objects that implement Parcelable can be written and restored
// from a Parcel. All their methods overriding library methods become reachable.
// We term all of these objects "Packable".

.decl AndroidPackableType(?type:ReferenceType)
AndroidPackableType(?type) :-
  isReferenceType(?type),
  ( ?type = "android.os.IBinder"
  ; ?type = "android.os.Parcelable"
  ; ?type = "android.os.Parcelable$Creator").

.decl AndroidApplicationPackableClass(?class:ClassType)
AndroidApplicationPackableClass(?class) :-
  AndroidApplicationClass(?class),
  basic.SubtypeOf(?class, ?binderType),
  AndroidPackableType(?binderType),
  isClassType(?class).

.decl ReachableAppPackableMethodOverridingLib(?methConcrete:Method)
ReachableAppPackableMethodOverridingLib(?methConcrete) :-
  LibraryReachableAppPackableClass(?class),
  basic.MethodDeclaredOrInherited(?methConcrete, ?class),
  AppMethodOverridesAndroidLibraryMethod(?methConcrete, _).

ForcedReachableAndroidContext(?ctx, ?methConcrete) :-
  ReachableAppPackableMethodOverridingLib(?methConcrete),
  isImmutableContext(?ctx).

.decl LibraryReachableAppPackableClass(?class:ClassType)
// REVIEW: be liberal: if an object is a binder, and it is instantiated
// in the application, then consider it to flow to the library.
ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType) :-
  ReachableApplicationObjectOfType(?hctx, ?value, ?ofType),
  AndroidApplicationPackableClass(?ofType).

TypeHasApplicationObjectFlowingToLibrary(?ofType),
LibraryReachableAppPackableClass(?ofType) :-
  TypeHasReachableApplicationObject(?ofType),
  AndroidApplicationPackableClass(?ofType).

////////////////////////////////////////////////////////////////////////
// But more importantly: backwards reasoning (reflection-like) for calls
// that return Packables. If in reachable application code there is a
// call to an Intent or Bundle method that returns a Parcelable (or
// similar) and if that Parcelable gets to a cast, consider the cast
// type to be instantiatable and mock it
////////////////////////////////////////////////////////////////////////

.decl LibraryMethodReturningPackable(?method:Method, ?retType:ReferenceType)
LibraryMethodReturningPackable(?method, ?retType) :-
  Method_ReturnType(?method, ?retType),
  AndroidPackableType(?retType),
  Method_DeclaringType(?method, ?libType),
  AndroidLibraryType(?libType).

.decl AppInvoReturningLibraryPackable(?invo:Instruction, ?retType:ReferenceType)
AppInvoReturningLibraryPackable(?invo, ?retType) :-
  LibraryMethodReturningPackable(?tomethod, ?retType),
  MethodInvocation_Method(?invo, ?tomethod),
  // no need for virtual resolution here. We want to see that the original method is in lib
  Instruction_Method(?invo, ?inmethod),
  Method_DeclaringType(?inmethod, ?class),
  AndroidApplicationClass(?class).

.decl SpecialMissingPackableValue(?invocation:MethodInvocation, ?value:Value)
// debugging
.output SpecialMissingPackableValue
SpecialValueConsMacro(?value, ?retType),
SpecialMissingPackableValue(?invo, ?value) :-
  AppInvoReturningLibraryPackable(?invo, ?retType),
  ?value = cat(cat("<special object for missing packable values ", ?invo), ">").

#ifndef DISABLE_POINTS_TO
VarPointsTo(?hctx, ?value, ?ctx, ?return) :-
  SpecialMissingPackableValue(?invocation, ?value),
  Instruction_Method(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  isImmutableHContext(?hctx),
  AssignReturnValue(?invocation, ?return).
#endif // DISABLE_POINTS_TO

// counterpart of the above, to also cover analyses without points-to
ReachableValue(?hctx, ?value) :-
  SpecialMissingPackableValue(?invocation, ?value),
  Instruction_Method(?invocation, ?inmethod),
  Reachable(?inmethod),
  isImmutableHContext(?hctx).

MockValueConsMacro(?value, ?concreteType),
VarPointsTo(?hctx, ?value, ?ctx, ?to),
ReifiedAndroidObjectValue(?value, ?concreteType) :-
  SpecialMissingPackableValue(_, ?specialvalue),
  VarPointsTo(?hctx, ?specialvalue, ?ctx, ?from),
  AssignCast(?concreteType, ?from, ?to, _),
  isClassType(?concreteType),
  ?value = cat("<Android inferred object of type ", cat(?concreteType, ">")).
// REVIEW: Just one globally? No invo?


/**
 * HACK for Runnable modeling. There are thread APIs we don't fully model,
 * so we currently just force reachability of all "run" methods.
**/

ForcedReachableAndroidContext(?ctx, ?runmeth) :-
  TypeHasReachableApplicationObject(?type),
  Method_SimpleName(?runmeth, "run"),
  basic.MethodDeclaredOrInherited(?runmeth, ?type),
  isImmutableContext(?ctx).


/**
 * Javascript interfacing
**/

// The following predicates cover the two clients that can be attached to
// a WebView adding functionality: the WebViewClient and the WebChromeClient.
// Both the overriden methods and the non-overriden are kept, not sure
// if the latter are needed.
WebClientType(?type):-
  basic.SubtypeOf(?type, ?supertype),
  (?supertype = "android.webkit.WebViewClient";
   ?supertype = "android.webkit.WebChromeClient").

.decl ForcedReachableFromJavascriptContext(?ctx:configuration.Context, ?meth:Method)

ForcedReachableFromJavascriptContext(?ctx, ?meth),
ForcedReachableAndroidContext(?ctx, ?meth) :-
  basic.ConcreteMethodDeclared(?meth, ?class),
  (Method_Modifier("protected", ?meth);
   Method_Modifier("public", ?meth)),
  TypeHasReachableApplicationObject(?class),
  WebClientType(?class),
  isImmutableContext(?ctx).

//// REVIEW: I'm not sure if the current general-purpose mocking doesn't handle
////  most of this anyway. My problem is that this rule creates mock objects based
////  on formal types alone--e.g., interfaces or abstract classes.
// MockValueConsMacro(cat("<Android JavaScript object ", cat(?formalType, ">")), ?formalType),
// ReifiedAndroidObjectValue(cat("<Android JavaScript object ", cat(?formalType, ">")), ?formalType) :-
//   _ForcedReachableFromJavascriptContext(_, ?meth),
//   FormalParam(_, ?meth, ?formal),
//  Var_Type(?formal, ?formalType).

.decl ArgToAddJavascriptInterface(?var:Var)

ArgToAddJavascriptInterface(?var) :-
  Method_SimpleName(?addjsmethod, "addJavascriptInterface"),
  Method_DeclaringType(?addjsmethod, "android.webkit.WebView"),
  FormalParam(0, ?addjsmethod, ?var).

ForcedReachableAndroidContext(?ctx, ?meth) :-
  ArgToAddJavascriptInterface(?var),
  VarPointsTo(_, ?value, _, ?var),
  Value_Type(?value, ?type),
  basic.ConcreteMethodDeclared(?meth, ?type),
  //Method_Annotation(?meth,"android.webkit.JavascriptInterface"),
  isImmutableContext(?ctx).

/**
 * General-purpose handling of all forced-reachable methods. Make their
 * mocking as complete as possible. This uses the earlier ForcedReachable...
 * and ReifiedAndroidObject... relations, or any objects that would
 * exist anyway.
**/

#ifdef DISABLE_POINTS_TO
// The (looser) counterpart of all the rules that use
// ReifiedAndroidObjectValue, to also cover the case of no points-to
// reasoning. We rarely enable logic just for the case of no-points-to
// reasoning. But this rule is imprecise: it does not replicate the
// full preconditions upon which a ReifiedAndroidObjectValue ends up
// in a VPT set. Therefore we want to use this loose rule only when we
// don't do normal points-to reasoning.
ReachableValue(?hctx, ?value) :-
  ReifiedAndroidObjectValue(?value, _),
  isImmutableHContext(?hctx).
#endif // DISABLE_POINTS_TO

// Link the two concepts: if an object is a ReifiedAndroidObjectValue,
// make its constructors ForcedReachableAndroidContext.
ForcedReachableAndroidContext(?ctx, ?meth) :-
  ReifiedAndroidObjectValue(_, ?type),
  basic.ClassConstructor(?meth, ?type),
  isImmutableContext(?ctx).

#ifndef DISABLE_POINTS_TO
// For all the above forced reachable methods, supply a receiver
// object of the appropriate type. Either mock object ...
VarPointsTo(?hctx, ?value, ?ctx, ?this) :-
  ForcedReachableAndroidContext(?ctx, ?meth),
  basic.ConcreteMethodDeclared(?meth, ?class),
  ReifiedAndroidObjectValue(?value, ?class),
  isImmutableHContext(?hctx),
//  Method_DeclaringType(?meth, ?class),
  ThisVar(?meth, ?this).
#ifndef X_CONTEXT_REMOVER
  .plan 1:(4,1,2,3,5)
#endif // X_CONTEXT_REMOVER



// ... or a plain reachable object flowing to the library.
VarPointsTo(?hctx, ?value, ?ctx, ?this) :-
  ForcedReachableAndroidContext(?ctx, ?meth),
  basic.ConcreteMethodDeclared(?meth, ?ofType),
  ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType),
  ThisVar(?meth, ?this).
 .plan 1:(3,2,1,4)


// ... and do the same for argument objects.
// REVIEW: this is imprecise. It assigns any argument to a
// type-compatible value, regardless of the hierarchy of actual
// graphical components. One could also perhaps distinguish
// objects initialized by different constructors.
VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  FormalOfForcedReachableAndroidContext(?ctx, ?formal, ?formalType),
  isImmutableHContext(?hctx),
  basic.SubtypeOf(?type, ?formalType),
  ReifiedAndroidObjectValue(?value, ?type).
#ifndef X_CONTEXT_REMOVER
 .plan 1:(2,1,3,4)
#endif // X_CONTEXT_REMOVER

FormalOfForcedReachableContext(?ctx, ?formal, ?formalType) :-
  ForcedReachableAndroidContext(?ctx, ?meth),
  FormalParam(_, ?meth, ?formal),
  Var_Type(?formal, ?formalType).

// Attempt at a policy that yields a reasonable compromise between
// precision and completeness: ask for real objects of a most-refined
// subclass, or of identical type to the declared one.
.decl _NotMostRefinedType(?type:ReferenceType)
_NotMostRefinedType(?type) :-
  ConcreteClass(?type),
  basic.SubtypeOf(?other, ?type),
  ?other != ?type.

VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  FormalOfForcedReachableAndroidContext(?ctx, ?formal, ?formalType),
  ApplicationObjectFlowingToLibrary(?hctx, ?value, ?formalType).
#ifndef X_CONTEXT_REMOVER
 .plan 1:(2,1)
#endif // X_CONTEXT_REMOVER

VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  FormalOfForcedReachableAndroidContext(?ctx, ?formal, ?formalType),
  basic.SubtypeOf(?type, ?formalType),
  !_NotMostRefinedType(?type),
  ApplicationObjectFlowingToLibrary(?hctx, ?value, ?type).
#ifndef X_CONTEXT_REMOVER
 .plan 1:(3,2,1)
#endif // X_CONTEXT_REMOVER

//// REVIEW Ad hoc, but useful?
// Assign discovered components to all compatible local vars of mocked methods!

// TODO: generalize this by
// 1) getting info from factgen (Application, Component).
// 2) Be more liberal with variable types.
VarPointsTo(?hctx, ?value, ?ctx, ?var) :-
  ReifiedApplicationAndCompatibleVar(?value, ?var),
  Var_DeclaringMethod(?var, ?method),
  ForcedReachableAndroidContext(?ctx, ?method),
  isImmutableHContext(?hctx).

.decl ReifiedApplicationAndCompatibleVar(?value:Value, ?var:Var)
ReifiedApplicationAndCompatibleVar(?value, ?var) :-
  ReifiedComponent(?type, ?value),
  AndroidApplication(?type),
  Var_Type(?var, ?type).
#endif // DISABLE_POINTS_TO

/**
 * View and fragment retrieval by id
**/

// Support view retrieval by id. If a call to an appropriate method is
// found, we short-circuit it and return the right view object.
ViewRetrievalByArg0MethodInvocation(?invo) :-
  (?calleeName = "inflate";
   ?calleeName = "getView";
   ?calleeName = "findViewById"),
  Method_SimpleName(?method, ?calleeName),
  ?retType = "android.view.View",
  Method_ReturnType(?method, ?retType),
  isType(?retType),
  MethodInvocation_Method(?invo, ?method).
// Lots of wrapper methods. Let's do more liberal matching.
  // (Method:Id(?signature:"<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>");
  //  Method:Id(?signature:"<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>");
  //  Method:Id(?signature:"<android.view.View: android.view.View findViewById(int)>")
  // ).

// Support fragment retrieval by id (similar to rule about view retrieval).
FragmentRetrievalByArg0MethodInvocation(?invo) :-
  Method_SimpleName(?method, "findFragmentById"),
  Method_Arity(?method, 1),
  ( ?retSuperType = "android.app.Fragment"
  ; ?retSuperType = "androidx.fragment.app.Fragment"
  ; ?retSuperType = "android.support.v4.app.Fragment"
  ),
  isType(?retSuperType),
  Method_ReturnType(?method, ?retType),
  basic.SubtypeOf(?retType, ?retSuperType),
  MethodInvocation_Method(?invo, ?method).

// The variables holding the layout control id and the retrieved
// layout control at one of these invocations.

VarsAtInvocationRetrievingLayoutControl(?ret, ?var) :-
  (FragmentRetrievalByArg0MethodInvocation(?invo);
   ViewRetrievalByArg0MethodInvocation(?invo)),
  AssignReturnValue(?invo, ?ret),
  ActualParam(0, ?invo, ?var).


LayoutControlObjectValueFromId(?controlValue, ?numId) :-
  LayoutControl(?numId, ?type, _),
  ReifiedLayoutControl(?type, ?numId, ?controlValue).

// ... and the clincher: given an id for a layout control object, at
// one of the invocation sites of methods retrieving layout controls,
// return the appropriate layout control object. REVIEW: the ?hctx is
// a hack, which currently doesn't matter since it's the immutable
// hctx anyway.  I can't see why we'd need to RecordMacro-create a new
// hctxt, since these layout objects are unique.
VarPointsTo(?hctx, ?controlValue, ?ctx, ?ret) :-
  VarsAtInvocationRetrievingLayoutControl(?ret, ?var),
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  LayoutControlObjectValueFromId(?controlValue, ?numId),
  NumConstantRawInt(?numId),
  Var_Type(?ret, ?retType),
  Value_Num(?value, ?numId, ?retType).
///// HACK, HACK, HACK below!!!!!
///// ids seemed broken, so I just return whatever. Fixed now (?)
//  Value_Num(?value, _, _),
//  LayoutControlObjectValueFromId(?controlValue, _).


/**
 * Multidimensional arrays in Android may use reflection, e.g. this:
 *   String[][] array = new String[1][1];
 * is compiled as follows (Jimple):
 *   $r1 = newarray (int)[2];
 *   $r1[0] = 1;
 *   $r1[0] = 1;
 *   $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>(class "Ljava/lang/String;", $r1);
 *   $r3 = (java.lang.String[][]) $r2;
 * The rules below infer this heap allocation (via the type in the last cast),
 * even when reflection support is off.
**/

#ifndef DISABLE_POINTS_TO
// Special handling for multidimensional arrays.
NotSpecialObject(?value),
NotEmptyArrayValue(?value),
MockValueConsMacro(?value, ?type),
configuration.RecordContextRequest(?ctx, ?value, ?from),
MultiDimensionalArrayTemp(?value, ?invocation, ?type, ?ctx, ?from) :-
  ?method = "<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>",
  StaticMethodInvocation(?invocation, ?method, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  AssignReturnValue(?invocation, ?from),
  OptAssignCast(?type, _, ?from),
  ?value = cat(cat(?invocation, ":"), ?type).

UninitializedArray(?hctx, ?value, ?invocation, ?type),
VarPointsTo(?hctx, ?value, ?ctx, ?from) :-
  MultiDimensionalArrayTemp(?value, ?invocation, ?type, ?ctx, ?from),
  configuration.RecordContextRequest(?ctx, ?value, ?from),
  configuration.RecordContextResponse(?ctx, ?value, ?from, ?hctx).

NotSpecialObject(?value),
NotEmptyArrayValue(?value),
MockValueConsMacro(?value, ?arrayType),
UninitializedArray(?hctx, ?value, ?invocation, ?arrayType),
ArrayIndexPointsTo(?hctx, ?value, ?hctx, ?basevalue) :-
  ComponentType(?type, ?arrayType),
  isArrayType(?arrayType),
  UninitializedArray(?hctx, ?basevalue, ?invocation, ?type),
  ?value = cat(cat(?invocation, ":"), ?arrayType).
#endif // DISABLE_POINTS_TO


/**
 * Fragments and fragment transactions.
**/

#ifdef DISABLE_POINTS_TO

// Handle reflective instantiation of fragments in types-only.
ReachableLayoutControl(?fragmentSubType) :-
  Reachable(?method),
  _AssignHeapAllocation(_, _, ?heap, _, ?method, _),
  ClassHeap_InstanceType(?heap, ?fragmentSubType),
  basic.SubtypeOf(?fragmentSubType, ?fragmentType),
  ( ?fragmentType = "android.app.Fragment"
  ; ?fragmentType = "androidx.fragment.app.Fragment"
  ).

#endif // DISABLE_POINTS_TO

// REVIEW: Doesn't the Fact type Activity suffice?
.decl ActivityVar(?var:Var)
ActivityVar(?var) :-
  Var_Type(?var, ?vartype),
  basic.SupertypeOf("android.app.Activity", ?vartype).

.decl BindFragment(?activityThis:Var, ?fragmentParam:Var)
// Binding fragment's parent
// A method call to a fragment add/replace inside an activity class
// has this-variable ?activityThis and actual arg ?fragmentParam
BindFragment(?activityThis, ?fragmentParam) :-
  Method_DeclaringType(?method, "android.app.FragmentTransaction"),
  (Method_SimpleName(?method, "add") ;
   Method_SimpleName(?method, "replace")),
  MethodInvocation_Method(?invocation, ?method),
  ActualParam(_, ?invocation, ?fragmentParam),
  Instruction_Method(?invocation, ?inmethod),
  ThisVar(?inmethod, ?activityThis),
  ActivityVar(?activityThis).

// TODO: this is only partial support for fragments, and we fail
// DroidBench's FragmentLifecycle2 benchmark

.decl ActivityVarInType(?var:Var, ?ctx:configuration.Context, ?type:Type)
ActivityVarInType(?var, ?ctx, ?type) :-
  ReachableContext(?ctx, ?method),
  Var_DeclaringMethod(?var, ?method),
  ActivityVar(?var),
  Method_DeclaringType(?method, ?type).


// REVIEW: this is just bad. The immutable context alone indicates it.

// The parameter to a fragment-transaction call points to a value
// in which an activity var can be found. Consider the current object values
// to flow to the activity param!
OptInterproceduralAssign(?ctxTo, ?varAcc, ?ctxFrom, ?activityThis) :-
  BindFragment(?activityThis, ?fragmentParam),
  VarPointsTo(_, ?value, _, ?fragmentParam),
  Value_Type(?value, ?type),
  ActivityVarInType(?varAcc, ?ctxTo, ?type),
  isImmutableContext(?ctxFrom).


/**
 * Asynchronous tasks
**/

// Asynchronous tasks are treated as synchronous method calls
.decl AsynchTaskExecute(?param:Var, ?base:Var)

AsynchTaskExecute(?param, ?base) :-
   Method_DeclaringType(?method, "android.os.AsyncTask"),
   Method_SimpleName(?method, "execute"),
   MethodInvocation_Method(?invocation, ?method),
   ActualParam(_, ?invocation, ?param),
   Var_Type(?param, ?type),
   isArrayType(?type),
   MethodInvocation_Base(?invocation, ?base).

ForcedReachableAndroidContext(?ctx, ?method),
OptInterproceduralAssign(?ctx, ?formal, ?callerCtx, ?actual),
VarPointsTo(?hctx, ?baseValue, ?ctx, ?this) :-
   AsynchTaskExecute(?actual, ?base),
   VarPointsTo(?hctx, ?baseValue, ?callerCtx, ?base),
   isImmutableContext(?ctx),
   Value_Type(?baseValue, ?type),
   Method_DeclaringType(?method, ?type),
   Method_SimpleName(?method, "doInBackground"),
   FormalParam(0, ?method, ?formal),
   // TODO: requires proper method resolution
   ThisVar(?method, ?this).

/**
 * Contribute to the global summary relation
**/
ApplicationEntryPoint(?meth) :-
  ForcedReachableAndroidContext(_, ?meth),
  ApplicationMethod(?meth).

/**
 * Forced-reachable Android contexts are reachable contexts.
 */
ReachableContext(?ctx, ?meth) :-
  ForcedReachableAndroidContext(?ctx, ?meth).

/**
 * Unobfuscated classes and members: special treatment
**/

.decl ApplicationPackageRegex(?regex:symbol)

ApplicationPackageRegex(cat(?package, ".*")) :-
  _ApplicationPackage(?package).

.decl UnobfuscatedApplicationClass(?type:ReferenceType)
.output UnobfuscatedApplicationClass
UnobfuscatedApplicationClass(?type) :-
  ApplicationClass(?type),
  (match("android.*", ?type);
   match("butterknife.*", ?type);
   match("cn.*", ?type);
   match("com.*", ?type);
   match("dagger.*", ?type);
   match("de.*", ?type);
   match("ezvcard.*", ?type);
   match("dk.*", ?type);
   match("fi.*", ?type);
   match("org.*", ?type);
   match("in.*", ?type);
   match("io.*", ?type);
   match("it.*", ?type);
   match("me.*", ?type);
   match("mobi.*", ?type);
   match("net.*", ?type);
   match("pl.*", ?type);
   match("javax.*", ?type);
   match("edu.*", ?type);
   match("oauth.*", ?type);
   match("okhttp3.*", ?type);
   match("okio.*", ?type);
   match("retrofit.*", ?type);
   match("retrofit2.*", ?type);
   match("secondary.*", ?type);
   match("twitter4j.*", ?type)).
UnobfuscatedApplicationClass(?type) :-
  ApplicationClass(?type),
  ApplicationPackageRegex(?regex),
  match(?regex, ?type).

// Report application classes considered obfuscated by the analysis.
.decl ObfuscatedApplicationClass(?type:ReferenceType)
ObfuscatedApplicationClass(?type) :-
  ApplicationClass(?type),
  !UnobfuscatedApplicationClass(?type).

.decl UnobfuscatedMethod(?meth:Method)
.output UnobfuscatedMethod

// A method with a long-ish name is likely unobfuscated, especially in
// an unobfuscated class.
UnobfuscatedMethod(?meth) :-
  UnobfuscatedApplicationClass(?type),
  Method_DeclaringType(?meth, ?type),
  Method_SimpleName(?meth, ?name),
  strlen(?name) > 2,
  ?name != "<init>",
  ?name != "<clinit>".
  
UnobfuscatedMethod(?meth) :-
  ApplicationMethod(?meth),
  Method_SimpleName(?meth, ?name),
  strlen(?name) > 5,
  ?name != "<init>",
  ?name != "<clinit>".

// Heuristic to determine whether we are dealing with obfuscated input.
// One can also enable/disable the logic by changing the percentage of
// classes required for determining that obfuscation is on.
.decl ObfuscationOn()
ObfuscationOn() :-
  ?unobfCount = count : UnobfuscatedApplicationClass(_),
  ?allCount = count : ApplicationClass(_),
  ?unobfCount < ?allCount / 2.

// Second heuristic for telling obfuscation is on. The number of total
// unobfuscated methods is small (less than a quarter of app methods)!
ObfuscationOn() :-
  ?unobfCount = count : UnobfuscatedMethod(_),
  ?allCount = count : ApplicationMethod(_),
  ?unobfCount < ?allCount / 4.

// If obfuscation is on, then treat all unobfuscated method names as
// entry points: the programmer probably had a "keep" specification for
// them. Note that Keep* are both input and derived predicates.
KeepMethod(?meth) :-
  ObfuscationOn(),
  UnobfuscatedMethod(?meth).

KeepClass(?type) :-
  ObfuscationOn(),
  UnobfuscatedApplicationClass(?type).

// .decl MethodFullJVMDescriptor(?method:Method, ?jvmFullName:symbol)

// .output MethodFullJVMDescriptor

// MethodFullJVMDescriptor(?method, ?jvmFullName) :-
//   MethodInvocation_Method(_, ?method),
//   Method_DeclaringType(?method, ?className),
//   Method_JVMDescriptor(?method, ?sig),
//   Method_SimpleName(?method, ?simplename),
//   ?jvmFullName = cat("L", cat(?className, cat(";:", cat(?simplename, ?sig)))).

/**
 * General-purpose helpers
**/

AndroidLibraryType(?type) :-
  isReferenceType(?type),
  match("android.*", ?type).

// REVIEW: is this needed? android.support classes are included in the
// application for compatibility with older Android versions. For several
// purposes we consider them library, not app.
AndroidApplicationClass(?class) :-
  ApplicationClass(?class). 
//  !AndroidLibraryType(?class).

.decl AppClassSubtypesLibClass(?type:ReferenceType, ?libType:ReferenceType)
AppClassSubtypesLibClass(?type, ?libraryType) :-
  AndroidApplicationClass(?type),
  basic.SupertypeOf(?libraryType, ?type),
  AndroidLibraryType(?libraryType).

.decl LookupReturnsAppMethod(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:ReferenceType, ?method:Method)
LookupReturnsAppMethod(?simplename, ?descriptor, ?type, ?methConcrete) :-
  basic.MethodLookup(?simplename, ?descriptor, ?type, ?methConcrete),
  AndroidApplicationClass(?type).

AppMethodOverridesAndroidLibraryMethod(?methConcrete, ?meth) :-
  AppClassSubtypesLibClass(?type, ?libraryType),
  Method_DeclaringType(?meth, ?libraryType),
  Method_SimpleName(?meth, ?simplename),
  Method_Descriptor(?meth, ?descriptor),
  LookupReturnsAppMethod(?simplename, ?descriptor, ?type, ?methConcrete).

.decl AndroidApplicationValue(?value:Value, ?ofType:Type)
AndroidApplicationValue(?value, ?ofType) :-
  AndroidApplicationClass(?ofType),
  Value_Type(?value, ?ofType).

// ... all analysis-reachable application objects
ReachableApplicationObjectOfType(?hctx, ?value, ?ofType) :-
  AndroidApplicationValue(?value, ?ofType),
  VarPointsTo(?hctx, ?value, _, _).

// and similar info for type-based analyses
TypeHasReachableApplicationObject(?type) :-
  TypeHasReachableValue(?type),
  AndroidApplicationClass(?type).


.decl AndroidLibraryVar(?var:Var)
AndroidLibraryVar(?var) :-
  AndroidLibraryType(?libraryType),
  Method_DeclaringType(?method, ?libraryType),
  Var_DeclaringMethod(?var, ?method).

// The reasonable definition is below. This is augmented with some
// more liberal special cases
ApplicationObjectFlowingToLibrary(?hctx, ?value, ?ofType) :-
  AndroidLibraryVar(?var),
  VarPointsTo(?hctx, ?value, _, ?var),
  AndroidApplicationValue(?value, ?ofType).

.decl AndroidReachableLibraryVarOfType(?var:Var, ?varType:Type)
AndroidReachableLibraryVarOfType(?var, ?varType) :-
  AndroidLibraryVar(?var),
  Var_DeclaringMethod(?var, ?method),
  Reachable(?method),
  Var_Type(?var, ?varType).

// REVIEW: currently this is unused. It faithfully mimicks the
// ApplicationObjectFlowingToLibrary logic, but for types. But
// no further logic seems to be enabled by types alone.
TypeHasApplicationObjectFlowingToLibrary(?type) :-
  AndroidReachableLibraryVarOfType(_, ?varType),
  basic.SubtypeOf(?type, ?varType),
  TypeHasReachableApplicationObject(?type).

// Classes whose methods should be all considered reachable. For
// types-only, there must also be a reachable value of the class.
.decl ForcedReachableAndroidClass(?ctx:configuration.Context, ?type:ReferenceType)

ForcedReachableContext(?ctx, ?method) :-
  ForcedReachableAndroidClass(?ctx, ?type),
  Method_DeclaringType(?method, ?type).

#include "../addons/butterknife.dl"
#include "../addons/glide.dl"

#ifndef DISABLE_POINTS_TO
// Mock call to Activity.attach().
ReachableContext(?ctx, ?method),
VarPointsTo(?hctx, ?value, ?ctx, ?this) :-
  isMethod(?method),
  ?method = "<android.app.Activity: void attach(android.content.Context,android.app.ActivityThread,android.app.Instrumentation,android.os.IBinder,int,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,android.app.Activity$NonConfigurationInstances,android.content.res.Configuration,java.lang.String,com.android.internal.app.IVoiceInteractor,android.view.Window)>",
  AppClassSubtypesLibClass(?activityType, "android.app.Activity"),
  Value_Type(?value, ?activityType),
  ThisVar(?method, ?this),
  isImmutableHContext(?hctx),
  isImmutableContext(?ctx).
#endif // DISABLE_POINTS_TO
