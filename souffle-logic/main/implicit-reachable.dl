#ifndef EXCLUDE_IMPLICITLY_REACHABLE_CODE

/**
 * Implicitly reachable methods are invoked by the JVM on startup.
 */

#define IMPLICIT_REACHABLE(m) ImplicitReachable(m) :- isMethod(m)

IMPLICIT_REACHABLE("<java.lang.System: void initializeSystemClass()>").
IMPLICIT_REACHABLE("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>").
IMPLICIT_REACHABLE("<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>").
IMPLICIT_REACHABLE("<java.lang.ThreadGroup: void <init>()>").
IMPLICIT_REACHABLE("<java.lang.Thread: void exit()>").
IMPLICIT_REACHABLE("<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>").
IMPLICIT_REACHABLE("<java.lang.ClassLoader: void <init>()>").
IMPLICIT_REACHABLE("<java.lang.ClassLoader: java.lang.Class loadClassInternal(java.lang.String)>").
IMPLICIT_REACHABLE("<java.lang.ClassLoader: void checkPackageAccess(java.lang.Class,java.security.ProtectionDomain)>").
IMPLICIT_REACHABLE("<java.lang.ClassLoader: void addClass(java.lang.Class)>").
IMPLICIT_REACHABLE("<java.lang.ClassLoader: long findNative(java.lang.ClassLoader,java.lang.String)>").
IMPLICIT_REACHABLE("<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>").

/**
 * TODO: this method does not seems to be implicitly reachable. There is a
 * method Finalizer.runFinalization, but this method is invoked via a native call
 * from Runtime.runFinalization. runFinalizer is invoked from the FinalizerThread,
 * which the analysis should be able to figure out by itself.

IMPLICIT_REACHABLE("<java.lang.ref.Finalizer: void runFinalizer()>").
*/

#ifndef MICRO

// Make test entry points implicitly reachable by discovering their
// annotations. This can also discover the entry points of
// XCorpus.
#ifdef DISCOVER_TESTS
#include "../addons/testing/test-discovery.dl"

ForcedReachable(?m) :- TestNGAnnotatedMethod(?m).
ForcedReachable(?m) :- JUnitAnnotatedMethod(?m).
ForcedReachable(?m) :- JUnitGenerator(?m).
ForcedReachable(?m) :- JUnitTestMethod(?m, _).
ForcedReachable(?m) :- EvoSuiteEntryPoint(?m).
#endif // DISCOVER_TESTS

// Contribute to the global summary relation.
ApplicationEntryPoint(?meth) :-
  ForcedReachable(?meth),
  ApplicationMethod(?meth).

.decl ForcedReachableContext(?ctx:configuration.Context, ?meth:Method)

// Forced reachable methods are invoked by unknown callers.
ForcedReachableContext(?ctx, ?method) :-
  ForcedReachable(?method),
  isImmutableContext(?ctx).

// Forced-reachable contexts are reachable contexts.
ReachableContext(?ctx, ?meth) :-
  ForcedReachableContext(?ctx, ?meth).

// Formals of forced-reachable contexts, recorded here for mocking.
.decl FormalOfForcedReachableContext(?ctx:configuration.Context, ?formal:Var, ?formalType:Type)
FormalOfForcedReachableContext(?ctx, ?formal, ?formalType) :-
  ForcedReachableContext(?ctx, ?meth),
  FormalParam(_, ?meth, ?formal),
  Var_Type(?formal, ?formalType).

// REVIEW: this is imprecise, it assigns a mock argument for each
// parameter in a forced-reachable method.
MockValueConsMacro(?value, ?formalType),
VarPointsTo(?hctx, ?value, ?ctx, ?formal) :-
  FormalOfForcedReachableContext(?ctx, ?formal, ?formalType),
  isImmutableHContext(?hctx),
  basic.SubtypeOf(?type, ?formalType),
  ?value = cat("<mock value for forced-reachable parameter ", cat(?formal, ">")).

/*
 * The following rules handle the 'keep' specification, by
 * forcing reachability and mocking of all "keep" methods.
 */

// 'keep'/'root' = make method reachable.
ForcedReachable(?meth) :-
  (KeepMethod(?meth) ; RootCodeElement(?meth)),
  isMethod(?meth).

// Not clear what ProGuard does with "keep" annotations for classes, but certainly
// I've seen documented behavior in industrial code that expects it to keep no-arg
// constructors.
ForcedReachable(?meth) :-
  KeepClass(?class),
  basic.ClassConstructor(?meth, ?class),
  !FormalParam(_, ?meth, _).

// 'keep class members' / 'keep classes with members' = keep all class
// methods if the class has a reachable method. We assume that 'keep
// classes with members' has already been resolved and the tuples only
// concern the types that apply.
ForcedReachableContext(?ctx, ?method) :-
  ( KeepClassMembers(?method) ; KeepClassesWithMembers(?method) ),
  Method_DeclaringType(?method, ?type),
  Method_DeclaringType(?someMethod, ?type),
  Reachable(?someMethod),
  isImmutableContext(?ctx).

#endif // MICRO

#endif // EXCLUDE_IMPLICITLY_REACHABLE_CODE
