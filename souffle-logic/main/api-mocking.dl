/**
 * This file contains information about mocked API elements.
 * This information is reused by both the points-to and the data-flow analyses.
 */

// Basic "spec" relation: method returns mock value (of some type).
.decl MockedMethodReturns(?method:Method, ?alloc:HeapAllocation, ?type:ReferenceType)
.output MockedMethodReturns

/** java.sql mocking */

// Model DriverManager.getConnection().
MockedMethodReturns(?method, ?value, ?type) :-
  ?method = "<java.sql.DriverManager: java.sql.Connection getConnection(java.lang.String,java.util.Properties,java.lang.Class)>",
  basic.SubtypeOf(?type, "java.sql.Connection"),
  isClassType(?type),
  ?value = cat("<mock SQL connection of type ", cat(?type, ">")).


/** Android API mocking */

#ifdef ANDROID

// System services are mocked.
.decl SystemService(?type:ReferenceType)
.output SystemService
// Ignore non-existent system service types (due to analysis platform version).
#define SYSTEM_SERVICE(s) SystemService(s) :- isReferenceType(s)

// Classes gathered from https://developer.android.com/reference/android/content/Context#getSystemService(java.lang.String)
// and https://developer.android.com/reference/android/content/Context#getSystemService(java.lang.Class%3CT%3E)
SYSTEM_SERVICE("android.view.WindowManager").
SYSTEM_SERVICE("android.view.LayoutInflater").
SYSTEM_SERVICE("android.app.ActivityManager").
SYSTEM_SERVICE("android.service.wallpaper.WallpaperService").
SYSTEM_SERVICE("android.os.PowerManager").
SYSTEM_SERVICE("android.app.AlarmManager").
SYSTEM_SERVICE("android.app.NotificationManager").
SYSTEM_SERVICE("android.app.KeyguardManager").
SYSTEM_SERVICE("android.location.LocationManager").
SYSTEM_SERVICE("android.app.SearchManager").
SYSTEM_SERVICE("android.os.Vibrator").
SYSTEM_SERVICE("android.os.VibratorManager").
SYSTEM_SERVICE("android.net.ConnectivityManager").
SYSTEM_SERVICE("android.net.IpSecManager").
SYSTEM_SERVICE("android.net.wifi.WifiManager").
SYSTEM_SERVICE("android.net.wifi.aware.WifiAwareManager").
SYSTEM_SERVICE("android.net.wifi.p2p.WifiP2pManager").
SYSTEM_SERVICE("android.view.inputmethod.InputMethodManager").
SYSTEM_SERVICE("android.app.UiModeManager").
SYSTEM_SERVICE("android.app.DownloadManager").
SYSTEM_SERVICE("android.os.BatteryManager").
SYSTEM_SERVICE("android.app.job.JobScheduler").
SYSTEM_SERVICE("android.app.usage.NetworkStatsManager").
SYSTEM_SERVICE("android.os.HardwarePropertiesManager").
SYSTEM_SERVICE("android.content.pm.verify.domain.DomainVerificationManager").
SYSTEM_SERVICE("android.media.AudioManager").
SYSTEM_SERVICE("android.media.MediaRouter").
SYSTEM_SERVICE("android.telephony.TelephonyManager").
SYSTEM_SERVICE("android.telephony.SubscriptionManager").

// Helper releation: getSystemService() methods.
.decl GetSystemServiceMethod(?method:Method)

GetSystemServiceMethod("<android.content.Context: java.lang.Object getSystemService(java.lang.String)>").
GetSystemServiceMethod("<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>").

#ifdef DISABLE_POINTS_TO
// These methods must be declared when running very shallow analyses.
GetSystemServiceMethod("<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>").

.decl ShallowMockedMethod(?method:Method)
.output ShallowMockedMethod

ShallowMockedMethod("<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>").

MockedMethodReturns(?method, MOCK_OBJECT_OF_TYPE(?type), ?type) :-
  ShallowMockedMethod(?method),
  isMethod(?method),
  Method_ReturnType(?method, ?type),
  isClassType(?type),
  !ClassModifier("abstract", ?type).
#endif // DISABLE_POINTS_TO

// Mock return values of Context.getSystemService().
MockedMethodReturns(?method, ?alloc, ?type),
HeapAllocation_Type(?alloc, ?type) :-
  SystemService(?type),
  GetSystemServiceMethod(?method),
  ?alloc = cat("<system service of type ", cat(?type, ">")).

// Mock return values of TelephonyManager getters.
isStringConstant(?alloc),
HeapAllocation_Type(?alloc, "java.lang.String"),
MockedMethodReturns(?method, ?alloc, "java.lang.String") :-
  ( ?method = "<android.telephony.TelephonyManager: java.lang.String getDeviceId()>"
  ; ?method = "<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)>"
  ; ?method = "<android.telephony.TelephonyManager: java.lang.String getImei()>"
  ; ?method = "<android.telephony.TelephonyManager: java.lang.String getImei(int)>"
  ; ?method = "<android.telephony.TelephonyManager: java.lang.String getMeid()>"
  ; ?method = "<android.telephony.TelephonyManager: java.lang.String getMeid(int)>"),
  ?alloc = "<mock device id>".

#endif // ANDROID

#ifdef X_MODEL_STDLIB

.decl OpaqueInstanceInvocation(?invo:MethodInvocation, ?base:Var, ?method:Method)
.output OpaqueInstanceInvocation
OpaqueInstanceInvocation(?invo, ?base, ?method) :-
  isOpaqueInstruction(?invo),
  ( _SpecialMethodInvocation(?invo, _, ?method, ?base, _)
  ; _VirtualMethodInvocation(?invo, _, ?method, ?base, _)).


.decl CollectionValueIn(?baseValue:Value, ?value:Value)
.output CollectionValueIn

CollectionValueIn(?baseValue, ?value) :-
  OpaqueInstanceInvocation(?invo, ?base, ?method),
  CollectionMethod(?method, "IN"),
  ActualParam(_, ?invo, ?arg),
  mainAnalysis.VarPointsTo(_, ?baseValue, ?ctx, ?base),
  mainAnalysis.VarPointsTo(_, ?value, ?ctx, ?arg).

mainAnalysis.VarPointsTo(?hctx, ?value, ?ctx, ?ret) :-
  OpaqueInstanceInvocation(?invo, ?base, ?method),
  CollectionMethod(?method, "OUT"),
  AssignReturnValue(?invo, ?ret),
  mainAnalysis.VarPointsTo(_, ?baseValue, ?ctx, ?base),
  CollectionValueIn(?baseValue, ?value),
  isImmutableHContext(?hctx).

#endif // X_MODEL_STDLIB

