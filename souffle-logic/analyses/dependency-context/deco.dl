// Main schema
.type Modifier
.type Type
.type PrimitiveType = Type
.type ReferenceType = Type
.type ArrayType = ReferenceType
.type ClassType = ReferenceType
.type InterfaceType = ReferenceType
.decl isType(?t:Type)
.decl isReferenceType(?t:ReferenceType)
.decl isArrayType(?t:ArrayType)
.decl isClassType(?t:ClassType)
.decl isInterfaceType(?t:InterfaceType)
.decl DirectSuperclass(?class:ClassType, ?superclass:ClassType)
.input DirectSuperclass(IO="file", filename="DirectSuperclass.facts", delimiter="\t")
.decl DirectSuperinterface(?ref:ReferenceType, ?interface:InterfaceType)
.input DirectSuperinterface(IO="file", filename="DirectSuperinterface.facts", delimiter="\t")
.decl ApplicationClass(?ref:ReferenceType)
.decl MainClass(?class:ClassType)
.input MainClass(IO="file", filename="MainClass.facts", delimiter="\t")
.type Field
.decl Field_DeclaringType(?field:Field, ?declaringClass:ReferenceType)
.type MethodDescriptor
.type Method
.decl Method_DeclaringType(?method:Method, ?declaringType:ReferenceType)
.decl Method_ReturnType(?method:Method, ?returnType:Type)
.decl Method_SimpleName(?method:Method, ?simpleName:symbol)
.decl Method_ParamTypes(?method:Method, ?params:symbol)
.decl Method_Descriptor(?method:Method, ?descriptor:MethodDescriptor)
.decl Method_Modifier(?mod:Modifier, ?method:Method)
.input Method_Modifier(IO="file", filename="Method-Modifier.facts", delimiter="\t")
.decl FormalParam(?index:number, ?method:Method, ?var:Var)
.input FormalParam(IO="file", filename="FormalParam.facts", delimiter="\t")
.decl ThisVar(?method:Method, ?var:Var)
.type Var
.decl Var_Type(?var:Var, ?type:Type)
.input Var_Type(IO="file", filename="Var-Type.facts", delimiter="\t")
.decl Var_DeclaringMethod(?var:Var, ?method:Method)
.type HeapAllocation
.decl HeapAllocation_Type(?heap:HeapAllocation, ?type:Type)
.decl MainMethodArgArray(?heap:HeapAllocation)
.decl MainMethodArgArrayContent(?heap:HeapAllocation)
.type Instruction
.decl Instruction_Method(?insn:Instruction, ?inMethod:Method)
.type FieldInstruction = Instruction
.type LoadInstanceField_Insn = FieldInstruction
.type StoreInstanceField_Insn = FieldInstruction
.type LoadStaticField_Insn = FieldInstruction
.type StoreStaticField_Insn = FieldInstruction
.type ArrayInstruction = Instruction
.type LoadArrayIndex_Insn = ArrayInstruction
.type StoreArrayIndex_Insn = ArrayInstruction
.type AssignInstruction = Instruction
.type AssignLocal_Insn = AssignInstruction
.type AssignCast_Insn = AssignInstruction
.type AssignHeapAllocation_Insn = AssignInstruction
.type ReturnInstruction = Instruction
.type ReturnNonvoid_Insn = ReturnInstruction
.type MethodInvocation = Instruction
.type VirtualMethodInvocation_Insn = MethodInvocation
.type StaticMethodInvocation_Insn = MethodInvocation
.decl isVirtualMethodInvocation_Insn(?insn:VirtualMethodInvocation_Insn)
.decl isStaticMethodInvocation_Insn(?insn:StaticMethodInvocation_Insn)
.decl FieldInstruction_Signature(?insn:FieldInstruction, ?sign:Field)
.decl LoadInstanceField_Base(?insn:LoadInstanceField_Insn, ?var:Var)
.decl LoadInstanceField_To(?insn:LoadInstanceField_Insn, ?var:Var)
.decl StoreInstanceField_From(?insn:StoreInstanceField_Insn, ?var:Var)
.decl StoreInstanceField_Base(?insn:StoreInstanceField_Insn, ?var:Var)
.decl LoadStaticField_To(?insn:LoadStaticField_Insn, ?var:Var)
.decl StoreStaticField_From(?insn:StoreStaticField_Insn, ?var:Var)
.decl ComponentType(?arrayType:ArrayType, ?componentType:Type)
.input ComponentType(IO="file", filename="ComponentType.facts", delimiter="\t")
.decl LoadArrayIndex_Base(?insn:LoadArrayIndex_Insn, ?var:Var)
.decl LoadArrayIndex_To(?insn:LoadArrayIndex_Insn, var:Var)
.decl StoreArrayIndex_From(?insn:StoreArrayIndex_Insn, ?var:Var)
.decl StoreArrayIndex_Base(?insn:StoreArrayIndex_Insn, ?var:Var)
.decl AssignInstruction_To(?insn:AssignInstruction, ?to:Var)
.decl AssignCast_From(?insn:AssignCast_Insn, ?from:Var)
.decl AssignCast_Type(?insn:AssignCast_Insn, ?type:Type)
.decl AssignLocal_From(?insn:AssignLocal_Insn, ?from:Var)
.decl AssignHeapAllocation_Heap(?insn:AssignHeapAllocation_Insn, ?heap:HeapAllocation)
.decl ReturnNonvoid_Var(?return:ReturnNonvoid_Insn, ?var:Var)
.decl MethodInvocation_Method(?invocation:MethodInvocation, ?signature:Method)
.decl AssignReturnValue(?invocation:MethodInvocation, ?to:Var)
.input AssignReturnValue(IO="file", filename="AssignReturnValue.facts", delimiter="\t")
.decl ActualParam(?index:number, ?invocation:MethodInvocation, ?var:Var)
.input ActualParam(IO="file", filename="ActualParam.facts", delimiter="\t")
.decl VirtualMethodInvocation_Base(?invocation:VirtualMethodInvocation_Insn, ?base:Var)
.decl VirtualMethodInvocation_SimpleName(?invocation:MethodInvocation, ?simplename:symbol)
.decl VirtualMethodInvocation_Descriptor(?invocation:MethodInvocation, ?descriptor:MethodDescriptor)
.decl SpecialMethodInvocation_Base(?invocation:MethodInvocation, ?base:Var)
.decl MethodInvocation_Base(?invocation:MethodInvocation, ?base:Var)

// Fat schema
.decl LoadInstanceField(?base:Var, ?sig:Field, ?to:Var, ?inmethod:Method) 
.decl StoreInstanceField(?from:Var, ?base:Var, ?signature:Field, ?inmethod:Method) 
.decl LoadStaticField(?sig:Field, ?to:Var, ?inmethod:Method) 
.decl StoreStaticField(?from:Var, ?signature:Field, ?inmethod:Method) 
// .decl LoadArrayIndex(?base:Var, ?to:Var, ?inmethod:Method) 
// .decl StoreArrayIndex(?from:Var, ?base:Var, ?inmethod:Method) 
.decl AssignCast(?type:Type, ?from:Var, ?to:Var, ?inmethod:Method) 
.decl AssignLocal(?from:Var, ?to:Var, ?inmethod:Method) 
.decl AssignHeapAllocation(?heap:HeapAllocation, ?to:Var, ?inmethod:Method) 
.decl ReturnVar(?var:Var, ?method:Method) 
.decl StaticMethodInvocation(?invocation:MethodInvocation, ?signature:Method, ?inmethod:Method) 

// imports
.decl _ClassType(?class:symbol)
.input _ClassType(IO="file", filename="ClassType.facts", delimiter="\t")
isType(?class),
isReferenceType(?class),
isClassType(?class) :-
  _ClassType(?class).
.decl _ArrayType(?arrayType:symbol)
.input _ArrayType(IO="file", filename="ArrayType.facts", delimiter="\t")
isType(?arrayType),
isReferenceType(?arrayType),
isArrayType(?arrayType) :-
  _ArrayType(?arrayType).
.decl _InterfaceType(?interface:symbol)
.input _InterfaceType(IO="file", filename="InterfaceType.facts", delimiter="\t")
isType(?interface),
isReferenceType(?interface),
isInterfaceType(?interface) :-
  _InterfaceType(?interface).
.decl _Var_DeclaringMethod(?var:symbol, ?method:symbol)
.input _Var_DeclaringMethod(IO="file", filename="Var-DeclaringMethod.facts", delimiter="\t")
Var_DeclaringMethod(?var, ?method) :-
  _Var_DeclaringMethod(?var, ?method).
.decl _ApplicationClass(?type:symbol)
.input _ApplicationClass(IO="file", filename="ApplicationClass.facts", delimiter="\t")
isType(?type),
isReferenceType(?type),
ApplicationClass(?type) :-
  _ApplicationClass(?type).
.decl _ThisVar(?method:symbol, ?var:symbol)
.input _ThisVar(IO="file", filename="ThisVar.facts", delimiter="\t")
ThisVar(?method, ?var) :-
  _ThisVar(?method, ?var).
.decl _NormalHeap(?id:symbol, ?type:symbol)
.input _NormalHeap(IO="file", filename="NormalHeap.facts", delimiter="\t")
isType(?type),
HeapAllocation_Type(?id, ?type) :-
  _NormalHeap(?id, ?type).
.decl _StringConstant(?id:symbol)
.input _StringConstant(IO="file", filename="StringConstant.facts", delimiter="\t")
HeapAllocation_Type(?id, "java.lang.String") :-
  _StringConstant(?id).
.decl _AssignHeapAllocation(?instruction:symbol, ?index:number, ?heap:symbol, ?to:symbol, ?inmethod:symbol, ?linenumber:number)
.input _AssignHeapAllocation(IO="file", filename="AssignHeapAllocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
  _AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?method, ?linenumber).
.decl _AssignLocal(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?inmethod:symbol)
.input _AssignLocal(IO="file", filename="AssignLocal.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  _AssignLocal(?instruction, ?index, ?from, ?to, ?method).
.decl _AssignCast(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol)
.input _AssignCast(IO="file", filename="AssignCast.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  _AssignCast(?instruction, ?index, ?from, ?to, ?type, ?method).
.decl _Field(?signature:symbol, ?declaringClass:symbol, ?simplename:symbol, ?type:symbol)
.input _Field(IO="file", filename="Field.facts", delimiter="\t")
Field_DeclaringType(?signature, ?declaringType) :-
  _Field(?signature, ?declaringType, _, _).
MethodInvocation_Base(?invocation, ?base) :-
  VirtualMethodInvocation_Base(?invocation, ?base) ;
  SpecialMethodInvocation_Base(?invocation, ?base).
.decl _StaticMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?method:symbol)
.input _StaticMethodInvocation(IO="file", filename="StaticMethodInvocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
isStaticMethodInvocation_Insn(?instruction),
MethodInvocation_Method(?instruction, ?signature) :-
  _StaticMethodInvocation(?instruction, ?index, ?signature, ?method).
.decl _SpecialMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?method:symbol)
.input _SpecialMethodInvocation(IO="file", filename="SpecialMethodInvocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
SpecialMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
  _SpecialMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).
.decl _VirtualMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?method:symbol)
.input _VirtualMethodInvocation(IO="file", filename="VirtualMethodInvocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
isVirtualMethodInvocation_Insn(?instruction),
VirtualMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
  _VirtualMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).
.decl _Method(?method:symbol, ?simplename:symbol, ?descriptor:symbol, ?declaringType:symbol, ?returnType:symbol, ?jvmDescriptor:symbol, ?arity:number)
.input _Method(IO="file", filename="Method.facts", delimiter="\t")
Method_SimpleName(?method, ?simplename),
Method_ParamTypes(?method, ?params),
Method_DeclaringType(?method, ?declaringType),
Method_ReturnType(?method, ?returnType) :-
  _Method(?method, ?simplename, ?params, ?declaringType, ?returnType, ?jvmDescriptor, ?arity).
Method_Descriptor(?method, ?descriptor) :-
  Method_ReturnType(?method, ?returnType),
  Method_ParamTypes(?method, ?params),
  ?descriptor = cat(?returnType, cat("(", cat(?params, ")"))).
.decl _StoreInstanceField(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?signature:symbol, ?method:symbol)
.input _StoreInstanceField(IO="file", filename="StoreInstanceField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
  _StoreInstanceField(?instruction, ?index, ?from, ?base, ?signature, ?method).
.decl _LoadInstanceField(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?signature:symbol, ?method:symbol)
.input _LoadInstanceField(IO="file", filename="LoadInstanceField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
  _LoadInstanceField(?instruction, ?index, ?to, ?base, ?signature, ?method).
.decl _StoreStaticField(?instruction:symbol, ?index:number, ?from:symbol, ?signature:symbol, ?method:symbol)
.input _StoreStaticField(IO="file", filename="StoreStaticField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from) :-
  _StoreStaticField(?instruction, ?index, ?from, ?signature, ?method).
.decl _LoadStaticField(?instruction:symbol, ?index:number, ?to:symbol, ?signature:symbol, ?method:symbol)
.input _LoadStaticField(IO="file", filename="LoadStaticField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to) :-
  _LoadStaticField(?instruction, ?index, ?to, ?signature, ?method).
.decl _StoreArrayIndex(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?method:symbol)
.input _StoreArrayIndex(IO="file", filename="StoreArrayIndex.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from) :-
  _StoreArrayIndex(?instruction, ?index, ?from, ?base, ?method).
.decl _LoadArrayIndex(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?method:symbol)
.input _LoadArrayIndex(IO="file", filename="LoadArrayIndex.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to) :-
  _LoadArrayIndex(?instruction, ?index, ?to, ?base, ?method).
.decl _Return(?instruction:symbol, ?index:number, ?var:symbol, ?method:symbol)
.input _Return(IO="file", filename="Return.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
ReturnNonvoid_Var(?instruction, ?var) :-
  _Return(?instruction, ?index, ?var, ?method).

// fat schema population
LoadInstanceField(?base, ?sig, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  LoadInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig),
  LoadInstanceField_To(?insn, ?to).
StoreInstanceField(?from, ?base, ?sig, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  StoreInstanceField_From(?insn, ?from),
  StoreInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig).
LoadStaticField(?sig, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  FieldInstruction_Signature(?insn, ?sig),
  LoadStaticField_To(?insn, ?to).
StoreStaticField(?from, ?sig, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  StoreStaticField_From(?insn, ?from),
  FieldInstruction_Signature(?insn, ?sig).
AssignCast(?type, ?from, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  AssignCast_From(?insn, ?from),
  AssignInstruction_To(?insn, ?to),
  AssignCast_Type(?insn, ?type).
AssignLocal(?from, ?to, ?inmethod) :-
  AssignInstruction_To(?insn, ?to),
  Instruction_Method(?insn, ?inmethod),
  AssignLocal_From(?insn, ?from).
AssignHeapAllocation(?heap, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  AssignHeapAllocation_Heap(?insn, ?heap),
  AssignInstruction_To(?insn, ?to).
ReturnVar(?var, ?method) :-
  Instruction_Method(?insn, ?method),
  ReturnNonvoid_Var(?insn, ?var).
StaticMethodInvocation(?invocation, ?signature, ?inmethod) :-
  isStaticMethodInvocation_Insn(?invocation),
  Instruction_Method(?invocation, ?inmethod),
  MethodInvocation_Method(?invocation, ?signature).
HeapAllocation_Type(?heap, ?type),
MainMethodArgArray(?heap) :-
  ?heap = "<<main method array>>",
  ?type = "java.lang.String[]".
HeapAllocation_Type(?heap, ?type),
MainMethodArgArrayContent(?heap) :-
  ?heap = "<<main method array content>>",
  ?type = "java.lang.String".
VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
VirtualMethodInvocation_Descriptor(?invocation, ?descriptor) :-
  isVirtualMethodInvocation_Insn(?invocation),
  MethodInvocation_Method(?invocation, ?signature),
  Method_SimpleName(?signature, ?simplename),
  Method_Descriptor(?signature, ?descriptor).

// Basic (type-based) analysis
.comp Basic {
.decl MethodLookup(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:Type, ?method:Method)
.decl MethodImplemented(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:Type, ?method:Method)
.decl DirectSubclass(?a:Type, ?c:Type)
.decl Subclass(?c:Type, ?a:Type)
.decl Superclass(?c:Type, ?a:Type)
.decl Superinterface(?k:Type, ?c:Type)
.decl SubtypeOf(?subtype:Type, ?type:Type)
.decl SupertypeOf(?supertype:Type, ?type:Type)
.decl SubtypeOfDifferent(?subtype:Type, ?type:Type)
.decl MainMethodDeclaration(?method:Method)
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
  MethodImplemented(?simplename, ?descriptor, ?type, ?method).
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
  (DirectSuperclass(?type, ?supertype) ;
   DirectSuperinterface(?type, ?supertype)),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method),
  ! MethodImplemented(?simplename, ?descriptor, ?type, _).
MethodImplemented(?simplename, ?descriptor, ?type, ?method) :-
  Method_SimpleName(?method, ?simplename),
  Method_Descriptor(?method, ?descriptor),
  Method_DeclaringType(?method, ?type),
  ! Method_Modifier("abstract", ?method).
DirectSubclass(?a, ?c) :-
  DirectSuperclass(?a, ?c).
Subclass(?c, ?a) :-
  DirectSubclass(?a, ?c).
Subclass(?c, ?a) :-
  Subclass(?b, ?a),
  DirectSubclass(?b, ?c).
Superclass(?c, ?a) :-
  Subclass(?a, ?c).
Superinterface(?k, ?c) :-
  DirectSuperinterface(?c, ?k).
Superinterface(?k, ?c) :-
  DirectSuperinterface(?c, ?j),
  Superinterface(?k, ?j).
Superinterface(?k, ?c) :-
  DirectSuperclass(?c, ?super),
  Superinterface(?k, ?super).
SupertypeOf(?s, ?t) :-
  SubtypeOf(?t, ?s).
SubtypeOf(?s, ?s) :-
  isClassType(?s).
SubtypeOf(?s, ?t) :-
  Subclass(?t, ?s).
SubtypeOf(?s, ?t) :-
  isClassType(?s),
  Superinterface(?t, ?s).
SubtypeOf(?s, ?t) :-
  isInterfaceType(?s),
  isType(?t),
  ?t = "java.lang.Object".
SubtypeOf(?s, ?s) :-
  isInterfaceType(?s).
SubtypeOf(?s, ?t) :-
  isInterfaceType(?s),
  Superinterface(?t, ?s).
SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isType(?t),
  ?t = "java.lang.Object".
SubtypeOf(?s, ?t) :-
  ComponentType(?s, ?sc),
  ComponentType(?t, ?tc),
  isReferenceType(?sc),
  isReferenceType(?tc),
  SubtypeOf(?sc, ?tc).
SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.lang.Cloneable".
SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.io.Serializable".
SubtypeOf(?t, ?t) :-
  isType(?t).
SubtypeOfDifferent(?s, ?t) :-
  SubtypeOf(?s, ?t),
  ?s != ?t.
MainMethodDeclaration(?method) :-
  MainClass(?type),
  Method_DeclaringType(?method, ?type),
  ?method != "<java.util.prefs.Base64: void main(java.lang.String[])>",
  ?method != "<sun.java2d.loops.GraphicsPrimitiveMgr: void main(java.lang.String[])>",
  ?method != "<sun.security.provider.PolicyParser: void main(java.lang.String[])>",
  Method_SimpleName(?method, "main"),
  Method_Descriptor(?method, "void(java.lang.String[])"),
  Method_Modifier("public", ?method),
  Method_Modifier("static", ?method).
}
.init basic = Basic


// Pre-analysis for dependencies. Dense relations, over entire code
// base (not just reachable) but local, so it shouldn't matter much.
.decl DependentVars(var1:Var, var2:Var)
.decl InitDependentVars(var1:Var, var2:Var)

.decl VarOfReferenceType(var:Var)
VarOfReferenceType(var) :-
  Var_Type(var, type),
  isReferenceType(type).

InitDependentVars(from, to) :-
  (AssignLocal(from, to, _);
   AssignCast(_, from, to, _)),
  VarOfReferenceType(from),
  VarOfReferenceType(to).

InitDependentVars(base, to) :-
  LoadInstanceField(base, _, to, _),
  VarOfReferenceType(to).

InitDependentVars(var, ret) :-
  (VirtualMethodInvocation_Base(caller, var);
   SpecialMethodInvocation_Base(caller, var);
   ActualParam(_, caller, var)),
  AssignReturnValue(caller, ret),
  VarOfReferenceType(var),
  VarOfReferenceType(ret).

InitDependentVars(var1, var2) :-
  InitDependentVars(var2, var1).
  
DependentVars(var, var) :-
  Var_Type(var, _).

DependentVars(var1, var2) :-
  DependentVars(var1, var3),
  InitDependentVars(var3, var2).

// Unify receiver and args in a single numbering. Receiver is -1. 
.decl IndexToActual(caller:MethodInvocation, i:number, actual:Var)
IndexToActual(caller, -1, var) :-
  VirtualMethodInvocation_Base(caller, var);
  SpecialMethodInvocation_Base(caller, var).
IndexToActual(caller, i, var) :-
  ActualParam(i, caller, var),
  VarOfReferenceType(var).

.decl VarForInvocation(caller:MethodInvocation, var:Var)
VarForInvocation(caller, var) :-
  IndexToActual(caller, _, var).

.decl VarsInSameInvocation(caller:MethodInvocation, var1:Var, var2:Var)
VarsInSameInvocation(caller, var1, var2) :-
  VarForInvocation(caller, var1),
  VarForInvocation(caller, var2).

// Equivalence classes of arguments (including receiver) for a single method call.
.decl VarsInSameArgEquivalenceClass(caller:MethodInvocation, var1:Var, var2:Var)
VarsInSameArgEquivalenceClass(caller, var1, var2) :-
  VarsInSameInvocation(caller, var1, var2),
  DependentVars(var1, var2).

// Actual arguments are not uniquely identified by var name, sadly! A weekend wasted
// so I could be reminded of this.
.type IndexedArg = [ var:Var, i:number ]

.decl DecomposeIndexedArg(caller:MethodInvocation, arg:IndexedArg, var:Var, i:number) 
DecomposeIndexedArg(caller, [var, i], var, i) :-
  IndexToActual(caller, i, var).  

.decl LaterArgInSameInvocation(caller:MethodInvocation, arg:IndexedArg, argLater:IndexedArg)
LaterArgInSameInvocation(caller, arg, argLater) :-
  DecomposeIndexedArg(caller, arg, _, i),
  DecomposeIndexedArg(caller, argLater, _, j),
  i < j.

.decl LaterArgInArgEquivalenceClass(caller:MethodInvocation, arg:IndexedArg, argLater:IndexedArg)
LaterArgInArgEquivalenceClass(caller, arg, argLater) :-
  LaterArgInSameInvocation(caller, arg, argLater),
  DecomposeIndexedArg(caller, arg, var, _),
  DecomposeIndexedArg(caller, argLater, varLater, _),
  VarsInSameArgEquivalenceClass(caller, var, varLater).

.decl NotNextArgInArgEquivalenceClass(caller:MethodInvocation, arg:IndexedArg, argLater:IndexedArg)
NotNextArgInArgEquivalenceClass(caller, arg, argLater) :-
  LaterArgInArgEquivalenceClass(caller, arg, argLater),
  LaterArgInArgEquivalenceClass(caller, arg, argOther),
  LaterArgInArgEquivalenceClass(caller, argOther, argLater).

.decl NextArgInArgEquivalenceClass(caller:MethodInvocation, arg:IndexedArg, argNextr:IndexedArg)
NextArgInArgEquivalenceClass(caller, arg, argNext) :-
  LaterArgInArgEquivalenceClass(caller, arg, argNext),
  !NotNextArgInArgEquivalenceClass(caller, arg, argNext).

.decl PrevArgInArgEquivalenceClass(caller:MethodInvocation, arg:IndexedArg, argPrev:IndexedArg)
PrevArgInArgEquivalenceClass(caller, arg, argPrev) :-
  NextArgInArgEquivalenceClass(caller, argPrev, arg).

.decl FirstArgInArgEquivalenceClass(caller:MethodInvocation, arg:IndexedArg)
FirstArgInArgEquivalenceClass(caller, arg) :-
  DecomposeIndexedArg(caller, arg, _, _),
  !NextArgInArgEquivalenceClass(caller, _, arg).

.decl RepresentativeOfArgInArgEquivalenceClass(caller:MethodInvocation, arg:IndexedArg, argRepr:IndexedArg)
RepresentativeOfArgInArgEquivalenceClass(caller, argRepr, argRepr) :-
  FirstArgInArgEquivalenceClass(caller, argRepr).

RepresentativeOfArgInArgEquivalenceClass(caller, arg, argRepr) :-
  FirstArgInArgEquivalenceClass(caller, argRepr),
  LaterArgInArgEquivalenceClass(caller, argRepr, arg).

// Equivalence classes represented by their first arg (in receiver, arg0, arg1, ... order)
.decl LaterArgEquivalenceClass(caller:MethodInvocation, argRepr:IndexedArg, argReprLater:IndexedArg)
LaterArgEquivalenceClass(caller, argRepr, argReprLater) :-
  LaterArgInSameInvocation(caller, argRepr, argReprLater),
  FirstArgInArgEquivalenceClass(caller, argRepr),
  FirstArgInArgEquivalenceClass(caller, argReprLater).

.decl NotNextArgEquivalenceClass(caller:MethodInvocation, argRepr:IndexedArg, argReprLater:IndexedArg)
NotNextArgEquivalenceClass(caller, argRepr, argReprLater) :-
  LaterArgEquivalenceClass(caller, argRepr, argReprLater),
  LaterArgEquivalenceClass(caller, argRepr, argReprOther),
  LaterArgEquivalenceClass(caller, argReprOther, argReprLater).

.decl NextArgEquivalenceClass(caller:MethodInvocation, argRepr:IndexedArg, argReprLater:IndexedArg)
NextArgEquivalenceClass(caller, argRepr, argReprNext) :-
  LaterArgEquivalenceClass(caller, argRepr, argReprNext),
  !NotNextArgEquivalenceClass(caller, argRepr, argReprNext).

.decl FirstArgEquivalenceClass(caller:MethodInvocation, argRepr:IndexedArg)
FirstArgEquivalenceClass(caller, argRepr) :-
  FirstArgInArgEquivalenceClass(caller, argRepr),
  !NextArgEquivalenceClass(caller, _, argRepr).


// /// For diagnostics

// .decl Problem1(caller:MethodInvocation, arg:IndexedArg, arg1:IndexedArg, arg2:IndexedArg)
// Problem1(caller, arg, arg1, arg2) :-
//   NextArgInArgEquivalenceClass(caller, arg, arg1),
//   NextArgInArgEquivalenceClass(caller, arg, arg2),
//   arg1 != arg2.
// .output Problem1

// .decl Problem2(caller:MethodInvocation, arg:IndexedArg, arg1:IndexedArg, arg2:IndexedArg)
// Problem2(caller, arg, arg1, arg2) :-
//   NextArgEquivalenceClass(caller, arg, arg1),
//   NextArgEquivalenceClass(caller, arg, arg2),
//   arg1 != arg2.
// .output Problem2

// .decl Problem3(caller:MethodInvocation)
// Problem3(caller) :-
//   RepresentativeOfArgInArgEquivalenceClass(caller, argOther, arg),
//   RepresentativeOfArgInArgEquivalenceClass(caller, argOther, arg1),
//   arg != arg1.

// Problem3(caller) :-
//   FirstArgInArgEquivalenceClass(caller, arg),
//   RepresentativeOfArgInArgEquivalenceClass(caller, arg, arg1),
//   arg != arg1.

// Problem3(caller) :-
//   FirstArgEquivalenceClass(caller, arg1),
//   FirstArgEquivalenceClass(caller, arg2),
//   arg1 != arg2.

// Problem3(caller) :-
//   LaterArgInArgEquivalenceClass(caller, arg, argLater),
//   LaterArgInArgEquivalenceClass(caller, argLater, arg).
  
// Problem3(caller) :-
//   LaterArgEquivalenceClass(caller, arg, argLater),
//   LaterArgEquivalenceClass(caller, argLater, arg).
  
// Problem3(caller) :-
//   NextArgInArgEquivalenceClass(caller, arg, arg1),
//   NextArgInArgEquivalenceClass(caller, arg, arg2),
//   arg1 != arg2.
// .output Problem3


//// For statistics

// .decl LessThanDependentVars(varSmall:Var, varLarge:Var)
// LessThanDependentVars(varSmall, varLarge) :-
//   DependentVars(varSmall, varLarge),
//   ord(varSmall) < ord(varLarge).

// // This representative is not necessarily an argument of the call. Elsewhere we compute representatives per call.
// .decl RepresentativeDependentVar(var:Var, varRep:Var)
// RepresentativeDependentVar(var, varRep) :-
//   DependentVars(var, varRep),
//   !LessThanDependentVars(_, varRep).

// .decl ArgEquivalenceClassesForInvocation(caller:MethodInvocation, varRep:Var)
// ArgEquivalenceClassesForInvocation(caller, varRep) :-
//   RepresentativeDependentVar(var, varRep),
//   VarForInvocation(caller, var).

// .decl CountArgEquivalenceClassesForInvocation(caller:MethodInvocation, num:number)
// CountArgEquivalenceClassesForInvocation(caller, num) :-
//   MethodInvocation_Method(caller, _),
//   num = count: ArgEquivalenceClassesForInvocation(caller, _).

// .decl CountVarsForInvocation(caller:MethodInvocation, num:number)
// CountVarsForInvocation(caller, num) :-
//   MethodInvocation_Method(caller, _),
//   num = count: VarForInvocation(caller, _).

// .decl VarsAndArgEquivalenceClassesForInvocation(caller:MethodInvocation, numVars:number, numClasses:number)
// VarsAndArgEquivalenceClassesForInvocation(caller, numVars, numClasses) :-
//   CountArgEquivalenceClassesForInvocation(caller, numClasses),
//   CountVarsForInvocation(caller, numVars).
  
.output DependentVars
.output RepresentativeOfArgInArgEquivalenceClass

// .output RepresentativeDependentVar
// .output VarsAndArgEquivalenceClassesForInvocation

.output FirstArgInArgEquivalenceClass

.output NextArgInArgEquivalenceClass
.output NextArgEquivalenceClass
.output LaterArgInArgEquivalenceClass
.output VarsInSameArgEquivalenceClass
.output VarsInSameInvocation
.output FirstArgEquivalenceClass


// Main (value-based) analysis
.functor singleton_mapping(symbol,symbol,symbol):number
.functor empty_mapping():number
.functor combine_strict(number,number):number
.functor combine_loose(number,number):number
.functor mapcol_to_string(number):symbol

// low-level lexical macros
#define COMBINE_STRICT(e1, e2) temp##e1##e2, temp##e1##e2 = @combine_strict(e1, e2), temp##e1##e2 != 0
#define COMBINE_STRICT3(e1, e2, e3) temp##e1##e2##e3, temp##e1##e2##e3 = @combine_strict(e3, @combine_strict(e1, e2)), \
   temp##e1##e2##e3 != 0

.type Dependencies = number

.decl VarPointsTo(var:Var, heap:HeapAllocation, localDeps:Dependencies, globalDeps:Dependencies)
.decl InstanceFieldPointsTo(baseObj:HeapAllocation, fld:Field, obj:HeapAllocation, globalDeps:Dependencies)
.decl StaticFieldPointsTo(fld:Field, heap:HeapAllocation, globalDeps:Dependencies)

.decl EmptyDependencies(dep: number)
EmptyDependencies(dep) :-
  dep = @empty_mapping().

.decl Reachable(meth:Method)

Reachable(meth) :-
  CallGraphEdge(_, meth).

Reachable(method) :-
  basic.MainMethodDeclaration(method).

Reachable(clinit) :-
  InitializedClass(class),
  ClassInitializer(class, clinit).

// Reachable(meth) :-
//   MethodDependencies(meth, _, _).

// .decl MethodDependencies(meth:Method, localDeps:Dependencies, globalDeps:Dependencies)
// MethodDependencies(method, deps, deps) :-
//   basic.MainMethodDeclaration(method),
//   EmptyDependencies(deps).

// // REVIEW: maybe global deps should be stronger
// MethodDependencies(clinit, deps, deps) :-
//   InitializedClass(class),
//   ClassInitializer(class, clinit),
//   EmptyDependencies(deps).
  
.decl TentativeCallGraphEdge(invocation:MethodInvocation, meth:Method)
.decl CallGraphEdge(invocation:MethodInvocation, meth:Method)

TentativeCallGraphEdge(invocation, toMethod) :-
  VarPointsTo(base, heap, _, _),
  VirtualMethodInvocation_Base(invocation, base),
  HeapAllocation_Type(heap, heaptype),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor),
  basic.MethodLookup(simplename, descriptor, heaptype, toMethod).

TentativeCallGraphEdge(invocation, toMethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, _),
  MethodInvocation_Method(invocation, toMethod).

TentativeCallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  StaticMethodInvocation(invocation, tomethod, inmethod).

.decl MapActualToFormal(caller:MethodInvocation, actual:IndexedArg, method:Method, formal:Var)
MapActualToFormal(caller, arg, method, formal) :-
  TentativeCallGraphEdge(caller, method),
  DecomposeIndexedArg(caller, arg, _, -1),
  ThisVar(method, formal).

MapActualToFormal(caller, arg, method, formal) :-
  TentativeCallGraphEdge(caller, method),
  DecomposeIndexedArg(caller, arg, _, i),
  FormalParam(i, method, formal).

// DESIGN choice: ignore all global deps when crossing method boundaries
// DESIGN2: eliminate global dependencies from InstanceFieldPointsTo (always null)
// DESIGN3: eliminate global dependencies from StaticFieldPointsTo (always null)

// Most of the complexity has to do with calls. Dependencies exist between variables in the same
// "dependence" equivalence class. Arguments in different equivalence classes are uncorrelated.
.decl DependenciesForArgEquivalenceClassUpToArg(caller:MethodInvocation, tomethod:Method, arg:IndexedArg,
   callerLDeps:Dependencies, calleeLDeps:Dependencies, globalDeps:Dependencies)
DependenciesForArgEquivalenceClassUpToArg(caller, method, argRepr, callerLDeps, calleeLDeps, globalDeps) :-
  TentativeCallGraphEdge(caller, method),
  FirstArgInArgEquivalenceClass(caller, argRepr),
  DecomposeIndexedArg(caller, argRepr, varRepr, _),
  VarPointsTo(varRepr, obj, callerLDeps, globalDeps),
  MapActualToFormal(caller, argRepr, method, formal),
  calleeLDeps = @singleton_mapping(formal, obj, obj).  // localDeps get reset at a call
 .plan 1:(4,3,2,1,5), 2:(5,2,1,3,4)

.decl AuxDependenciesUpToArgWithNext(caller:MethodInvocation, tomethod:Method, argNext:IndexedArg,
   callerLDeps:Dependencies, calleeLDeps:Dependencies, globalDeps:Dependencies)
AuxDependenciesUpToArgWithNext(caller, method, argNext, callerLDeps, calleeLDeps, globalDeps) :-
  DependenciesForArgEquivalenceClassUpToArg(caller, method, arg, callerLDeps, calleeLDeps, globalDeps),
  NextArgInArgEquivalenceClass(caller, arg, argNext).

.decl AuxPointsToOfActualWithFormal(caller:MethodInvocation, method:Method, arg:IndexedArg, obj:HeapAllocation,
   deltaCallerLDeps:Dependencies, deltaGlobalDeps:Dependencies, formal:Var)
AuxPointsToOfActualWithFormal(caller, method, arg, obj, deltaCallerLDeps, deltaGlobalDeps, formal) :-
  MapActualToFormal(caller, arg, method, formal),
  DecomposeIndexedArg(caller, arg, varNext, _),
  VarPointsTo(varNext, obj, deltaCallerLDeps, deltaGlobalDeps).
 .plan 1:(3,2,1)

LocalDependenciesCheckRequest(preCallerLDeps, deltaCallerLDeps),
GlobalDependenciesCheckRequest(preGlobalDeps, deltaGlobalDeps) :-
  AuxDependenciesUpToArgWithNext(caller, method, argNext, preCallerLDeps, _, preGlobalDeps),
  AuxPointsToOfActualWithFormal(caller, method, argNext, _, deltaCallerLDeps, deltaGlobalDeps, _).
 .plan 1:(2,1)
 
DependenciesForArgEquivalenceClassUpToArg(caller, method, argNext, callerLDeps, calleeLDeps, globalDeps) :-
  AuxDependenciesUpToArgWithNext(caller, method, argNext, preCallerLDeps, preCalleeLDeps, preGlobalDeps),
  AuxPointsToOfActualWithFormal(caller, method, argNext, obj, deltaCallerLDeps, deltaGlobalDeps, formal),
//  callerLDeps = COMBINE_STRICT(preCallerLDeps, deltaCallerLDeps),
//  globalDeps = COMBINE_STRICT(preGlobalDeps, deltaGlobalDeps),
  ValidLocalDependenciesCheckResponse(preCallerLDeps, deltaCallerLDeps, callerLDeps),
  ValidGlobalDependenciesCheckResponse(preGlobalDeps, deltaGlobalDeps, globalDeps),
/// DESIGN (or at least in that spirit)
//  EmptyDependencies(globalDeps), preGlobalDeps = preGlobalDeps, deltaGlobalDeps = deltaGlobalDeps,
  addOnDeps = @singleton_mapping(formal, obj, obj),
  calleeLDeps = @combine_loose(preCalleeLDeps, addOnDeps).  // cannot conflict
// .plan 1:(2,1)
 .plan 1:(2,1,3,4), 2:(3,1,2,4), 3:(4,1,2,3)
// .plan 1:(2,1,3,4), 2:(3,2,1,4)
/// DESIGN
// .plan 1:(2,1,3), 2:(3,2,1)

// DependenciesForArgEquivalenceClassUpToArg(caller, method, argNext, callerLDeps, calleeLDeps, globalDeps) :-
//   AuxDependenciesUpToArgWithNext(caller, method, argNext, preCallerLDeps, preCalleeLDeps, preGlobalDeps),
//   DecomposeIndexedArg(caller, argNext, varNext, _),
//   VarPointsTo(varNext, obj, deltaCallerLDeps, deltaGlobalDeps), 
//   callerLDeps = COMBINE_STRICT(preCallerLDeps, deltaCallerLDeps),
//   globalDeps = COMBINE_STRICT(preGlobalDeps, deltaGlobalDeps),
//   MapActualToFormal(caller, argNext, method, formal),
//   addOnDeps = @singleton_mapping(formal, obj, obj),
//   calleeLDeps = @combine_loose(preCalleeLDeps, addOnDeps).  // cannot conflict
//  .plan 1:(3,2,1,4), 2:(4,1,2,3)


// Call them "tentative" just as a warning that the call-graph edge may not be realized in the end,
// since some other arg equivalence class may not get values.
.decl TentativeDependenciesForArgEquivalenceClass(caller:MethodInvocation, tomethod:Method, argRepr:IndexedArg,
   callerLDeps:Dependencies, calleeLDeps:Dependencies, globalDeps:Dependencies)
TentativeDependenciesForArgEquivalenceClass(caller, method, argRepr, callerLDeps, calleeLDeps, globalDeps) :-
/// DESIGN
//  DependenciesForArgEquivalenceClassUpToArg(caller, method, arg, callerLDeps, calleeLDeps, globalDeps),
  DependenciesForArgEquivalenceClassUpToArg(caller, method, arg, callerLDeps, calleeLDeps, _),
  EmptyDependencies(globalDeps),
  RepresentativeOfArgInArgEquivalenceClass(caller, arg, argRepr),
  !NextArgInArgEquivalenceClass(caller, arg, _).

// Dependencies should never be compared between equivalence classes. However we choose to finalize a call-graph
// edge only when dependencies exist for all arguments.
.decl DependenciesExistUpToArgEquivalenceClass(caller:MethodInvocation, tomethod:Method, argRepr:IndexedArg)

DependenciesExistUpToArgEquivalenceClass(caller, tomethod, argRepr) :-
  TentativeDependenciesForArgEquivalenceClass(caller, tomethod, argRepr, _, _, _),
  FirstArgEquivalenceClass(caller, argRepr).

DependenciesExistUpToArgEquivalenceClass(caller, tomethod, argRepr) :-
  DependenciesExistUpToArgEquivalenceClass(caller, tomethod, argPrev),
  NextArgEquivalenceClass(caller, argPrev, argRepr),
  TentativeDependenciesForArgEquivalenceClass(caller, tomethod, argRepr, _, _, _).
 .plan 1:(3,2,1)

.decl DependenciesForAllArgEquivalenceClasses(caller:MethodInvocation, tomethod:Method)
DependenciesForAllArgEquivalenceClasses(caller, tomethod) :-
  DependenciesExistUpToArgEquivalenceClass(caller, tomethod, argReprLast),
  !NextArgEquivalenceClass(caller, argReprLast, _).

// One way to satisfy "for all" is if no reference args (or receiver) exist, i.e., not a single
// arg equivalence class is formed.
DependenciesForAllArgEquivalenceClasses(caller, tomethod) :-
  TentativeCallGraphEdge(caller, tomethod),
  NoReferencesPassedToCall(caller).

// The call is real!
CallGraphEdge(caller, method) :-
  TentativeCallGraphEdge(caller, method),
  DependenciesForAllArgEquivalenceClasses(caller, method).

.decl DependenciesForArgEquivalenceClass(caller:MethodInvocation, tomethod:Method, argRepr:IndexedArg,
   callerLDeps:Dependencies, calleeLDeps:Dependencies, globalDeps:Dependencies)
DependenciesForArgEquivalenceClass(caller, method, argRepr, callerLDeps, calleeLDeps, globalDeps) :-
  CallGraphEdge(caller, method),
  TentativeDependenciesForArgEquivalenceClass(caller, method, argRepr, callerLDeps, calleeLDeps, globalDeps).
 .plan 1:(2,1)

// Here's the cool trick: we collected all consistent dependency mappings in tuples,
// right? But we never said that the formals or "this" of a callee have these
// values. Now we let them have whatever values they want, as long as they
// are consistent with these deps! I.e., they get the right values by selecting
// from a larger set.

.decl AuxPointsToRelationshipToTest(caller:MethodInvocation, method:Method, argRepr:IndexedArg,
  formal:Var, obj:HeapAllocation)
AuxPointsToRelationshipToTest(caller, method, argRepr, formal, obj) :-
  VarPointsTo(actual, obj, _, _),
  DecomposeIndexedArg(caller, arg, actual, _),
  RepresentativeOfArgInArgEquivalenceClass(caller, arg, argRepr),
  MapActualToFormal(caller, arg, method, formal).
 .plan 1:(4,2,1,3)

VarPointsTo(formal, obj, calleeLDeps, globalDeps) :-
  DependenciesForArgEquivalenceClass(caller, method, argRepr, _, calleeLDeps, globalDeps),
  AuxPointsToRelationshipToTest(caller, method, argRepr, formal, obj),
  deltaLDeps = @singleton_mapping(formal, obj, obj),
  dummy = COMBINE_STRICT(calleeLDeps, deltaLDeps), dummy = dummy.
 .plan 1:(2,1)


// For the return value of a call, we need to check that it is compatible with
// some dependency from *each* equivalence class! Only then we accept it as a valid
// return for the current call-site.

.decl FormalReturnVPT(method:Method, obj:HeapAllocation, lDeps:Dependencies, gDeps:Dependencies)
FormalReturnVPT(method, obj, lDeps, gDeps) :-
  VarPointsTo(var, obj, lDeps, gDeps),
  ReturnVar(var, method).

.decl ReturnCompatibleUpToEquivalenceClass(caller:MethodInvocation, method:Method, argRepr:IndexedArg,
   callerLDeps:Dependencies, globalDeps:Dependencies, obj:HeapAllocation, calleeLDeps:Dependencies)

ReturnCompatibleUpToEquivalenceClass(caller, method, argRepr, callerLDeps, globalDeps, obj, rLDeps) :-
  DependenciesForArgEquivalenceClass(caller, method, argRepr, callerLDeps, calleeLDeps, preGlobalDeps),
  FirstArgEquivalenceClass(caller, argRepr),
  FormalReturnVPT(method, obj, rLDeps, rGDeps),
  dummy = COMBINE_STRICT(calleeLDeps, rLDeps), dummy = dummy,
/// DESIGN
//   globalDeps = COMBINE_STRICT(preGlobalDeps, rGDeps).
//  .plan 1:(3,1,2)
  EmptyDependencies(globalDeps), preGlobalDeps = preGlobalDeps, rGDeps = rGDeps.
 .plan 1:(3,1,2,4)

ReturnCompatibleUpToEquivalenceClass(caller, method, argRepr, callerLDeps, globalDeps, obj, calleeLDeps) :-
  ReturnCompatibleUpToEquivalenceClass(caller, method, preArgRepr, callerLDeps, preGlobalDeps, obj, calleeLDeps),
  NextArgEquivalenceClass(caller, preArgRepr, argRepr),
  DependenciesForArgEquivalenceClass(caller, method, argRepr, _, deltaCalleeLDeps, deltaGlobalDeps),
  dummy = COMBINE_STRICT(calleeLDeps, deltaCalleeLDeps), dummy = dummy,
  // REVIEW: to avoid explosion, we don't combine caller local dependencies between different equivalence
  // classes. These would combine successfully, due to independence. The result, however, is that we keep
  // the caller dependencies of the very first arg equivalence class only. With the current logic
  // for equivalence classes, this is fully general: there can be at most one when there is a return value.
/// DESIGN
//  globalDeps = COMBINE_STRICT(preGlobalDeps, deltaGlobalDeps).
  EmptyDependencies(globalDeps), preGlobalDeps = preGlobalDeps, deltaGlobalDeps = deltaGlobalDeps.
 .plan 1:(3,2,1,4) 

.decl NoReferencesPassedToCall(caller:MethodInvocation)
NoReferencesPassedToCall(caller) :-
  MethodInvocation_Method(caller, _),
  !FirstArgEquivalenceClass(caller, _).

.decl ValidReturnValue(caller:MethodInvocation, method:Method, 
   callerLDeps:Dependencies, globalDeps:Dependencies, obj:HeapAllocation)

ValidReturnValue(caller, method, callerLDeps, globalDeps, obj) :-
  CallGraphEdge(caller, method),
  NoReferencesPassedToCall(caller),
  FormalReturnVPT(method, obj, _, globalDeps),
  EmptyDependencies(callerLDeps).
 .plan 1:(3,1,2,4)

ValidReturnValue(caller, method, callerLDeps, globalDeps, obj) :-
  ReturnCompatibleUpToEquivalenceClass(caller, method, argRepr, callerLDeps, globalDeps, obj, _),
  !NextArgEquivalenceClass(caller, argRepr, _).

VarPointsTo(local, obj, callerLDeps, globalDeps) :-
  ValidReturnValue(caller, _, callerLDeps, globalDeps, obj),
  AssignReturnValue(caller, local).
  

/* 
 * intra-procedural rules
 */

VarPointsTo(var, heap, emptyDeps, emptyDeps) :-
  AssignHeapAllocation(heap, var, inmethod),
  Reachable(inmethod),
  EmptyDependencies(emptyDeps).

// VarPointsTo(var, heap, localDeps, emptyDeps) :-
//   AssignHeapAllocation(heap, var, inmethod),
//   Reachable(inmethod),
//   EmptyDependencies(emptyDeps),
//   localDeps = @singleton_mapping(var, heap, heap).  // introduce a new mapping on allocation!

// VarPointsTo(to, obj, localDeps, globalDeps) :-
//   VarPointsTo(from, obj, preLocalDeps, globalDeps),
//   AssignLocal(from, to, _),
//   addOnDeps = @singleton_mapping(from, obj, obj),
//   localDeps = COMBINE_STRICT(preLocalDeps, addOnDeps).

// VarPointsTo(to, obj, localDeps, globalDeps) :-
//   VarPointsTo(from, obj, preLocalDeps, globalDeps),
//   AssignCast(type, from, to, _),
//   basic.SupertypeOf(type, heaptype),
//   HeapAllocation_Type(obj, heaptype),
//   addOnDeps = @singleton_mapping(from, obj, obj),
//   localDeps = COMBINE_STRICT(preLocalDeps, addOnDeps).

// No need to introduce mapping when the value remains unchanged!
VarPointsTo(to, obj, localDeps, globalDeps) :-
  VarPointsTo(from, obj, localDeps, globalDeps),
  AssignLocal(from, to, _).
  
VarPointsTo(to, obj, localDeps, globalDeps) :-
  VarPointsTo(from, obj, localDeps, globalDeps),
  AssignCast(type, from, to, _),
  basic.SupertypeOf(type, heaptype),
  HeapAllocation_Type(obj, heaptype).

.decl AuxStoredObjectIntoField(heap:HeapAllocation, fld:Field, base:Var, fLDeps:Dependencies, fGDeps:Dependencies)
AuxStoredObjectIntoField(heap, fld, base, fLDeps, fGDeps) :-
  VarPointsTo(from, heap, fLDeps, fGDeps),
  StoreInstanceField(from, base, fld, _).

InstanceFieldPointsTo(baseheap, fld, heap, globalDeps) :-
  AuxStoredObjectIntoField(heap, fld, base, fLDeps, fGDeps),
  VarPointsTo(base, baseheap, bLDeps, bGDeps),
  dummy1 = COMBINE_STRICT(fLDeps, bLDeps), dummy1 = dummy1,
/// DESIGN2
//  globalDeps = COMBINE_STRICT(fGDeps, bGDeps), 
// .plan 1:(2,1,3)
  dummy2 = COMBINE_STRICT(fGDeps, bGDeps), dummy2 = dummy2,
  EmptyDependencies(globalDeps).
 .plan 1:(2,1,3)
/// Basically disable all global dependencies for InstanceFieldPointsTo

StaticFieldPointsTo(fld, heap, globalDeps) :-
  VarPointsTo(from, heap, _, fGDeps),
  StoreStaticField(from, fld, _),
//  globalDeps = fGDeps.
// DESIGN3
  EmptyDependencies(globalDeps), fGDeps = fGDeps.

.decl AuxAccessPath(base:Var, fld:Field, str:symbol)
AuxAccessPath(base, fld, cat(base, cat("___.___", fld))) :-
  LoadInstanceField(base, fld, _, _).

.decl AuxLoadPointsTo(baseheap:HeapAllocation, fld:Field, to:Var, apText:symbol, lDeps:Dependencies, gDeps:Dependencies) 
AuxLoadPointsTo(baseheap, fld, to, apText, localDeps, gDeps) :-
  VarPointsTo(base, baseheap, localDeps, gDeps),
  LoadInstanceField(base, fld, to, _),
  AuxAccessPath(base, fld, apText).

VarPointsTo(to, heap, localDeps, globalDeps) :-
  AuxLoadPointsTo(baseheap, fld, to, apText, localDeps, bGDeps),
  InstanceFieldPointsTo(baseheap, fld, heap, hGDeps),
/// DESIGN2
//  oldGlobalDeps = COMBINE_STRICT(bGDeps, hGDeps),
  newGlobalDeps = @singleton_mapping(apText, heap, heap),
/// DESIGN2
//  globalDeps = @combine_loose(newGlobalDeps, oldGlobalDeps).
// .plan 1:(2,1)
  globalDeps = @combine_loose(newGlobalDeps, bGDeps), hGDeps = hGDeps.
 .plan 1:(2,1)

VarPointsTo(to, heap, emptyDeps, globalDeps) :-
  StaticFieldPointsTo(fld, heap, hGDeps),
  LoadStaticField(fld, to, inmethod),
  Reachable(inmethod), 
  newGlobalDeps = @singleton_mapping(fld, heap, heap),
  globalDeps = @combine_loose(newGlobalDeps, hGDeps),
  EmptyDependencies(emptyDeps).
 .plan 1:(3,2,1,4)


// class initialization
.decl ClassInitializer(type:Type, method:Method)
.decl InitializedClass(classOrInterface:Type)
ClassInitializer(type, method) :-
  basic.MethodImplemented("<clinit>", "void()", type, method).
InitializedClass(superclass) :-
  InitializedClass(class),
  DirectSuperclass(class, superclass).
InitializedClass(superinterface) :-
  InitializedClass(classOrInterface),
  DirectSuperinterface(classOrInterface, superinterface).
InitializedClass(class) :-
  basic.MainMethodDeclaration(method),
  Method_DeclaringType(method, class).
InitializedClass(class) :-
  Reachable(inmethod),
  AssignHeapAllocation(heap, _, inmethod),
  HeapAllocation_Type(heap, class).
InitializedClass(class) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  isStaticMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_DeclaringType(signature, class).
InitializedClass(classOrInterface) :-
  Reachable(inmethod),
  StoreStaticField(_, signature, inmethod),
  Field_DeclaringType(signature, classOrInterface).
InitializedClass(classOrInterface) :-
  Reachable(inmethod),
  LoadStaticField(signature, _, inmethod),
  Field_DeclaringType(signature, classOrInterface).


/*
 *  Optimization predicates. Mostly request-response patterns.
 */
 
// Last-level optimization. Just a Datalog cache for the C++ results.
.decl LocalDependenciesCheckRequest(deps1: Dependencies, deps2: Dependencies)
.decl __LocalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)
.decl ValidLocalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)
.decl IsValidLocalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies)
.decl GlobalDependenciesCheckRequest(deps1: Dependencies, deps2: Dependencies)
.decl __GlobalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)
.decl ValidGlobalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)

__LocalDependenciesCheckResponse(deps1, deps2, resDeps) :-
  LocalDependenciesCheckRequest(deps1, deps2),
  resDeps = @combine_strict(deps1, deps2).

ValidLocalDependenciesCheckResponse(deps1, deps2, resDeps) :-
  __LocalDependenciesCheckResponse(deps1, deps2, resDeps),
  resDeps != 0.

IsValidLocalDependenciesCheckResponse(deps1, deps2) :-
  ValidLocalDependenciesCheckResponse(deps1, deps2, _).

__GlobalDependenciesCheckResponse(deps1, deps2, resDeps) :-
  GlobalDependenciesCheckRequest(deps1, deps2),
  resDeps = @combine_strict(deps1, deps2).

ValidGlobalDependenciesCheckResponse(deps1, deps2, resDeps) :-
  __GlobalDependenciesCheckResponse(deps1, deps2, resDeps),
  resDeps != 0.


/*
 * output
 */
.decl TextVarPointsTo(var:Var, heap:HeapAllocation, textLocalDeps:symbol, textGlobalDeps:symbol)
TextVarPointsTo(var, heap, lDepsOut, gDepsOut) :-
  VarPointsTo(var, heap, lDeps, gDeps),
  lDepsOut = @mapcol_to_string(lDeps),
  gDepsOut = @mapcol_to_string(gDeps).

.decl InsensVarPointsTo(var:Var, heap:HeapAllocation)
InsensVarPointsTo(var, heap) :-
  VarPointsTo(var, heap, _, _).

// .decl CallGraphEdgeWithSomeDependencies(invo:MethodInvocation, callee:Method)
// CallGraphEdgeWithSomeDependencies(invo, callee) :-
//   CallGraphEdgeWithDependencies(invo, callee, _, _, _).


.output CallGraphEdge
.output TextVarPointsTo
.output InsensVarPointsTo
.output InstanceFieldPointsTo
.output StaticFieldPointsTo
.output MapActualToFormal

/*
.output MethodDependencies
.output CallGraphEdgeWithDependencies
.output CallGraphEdgeWithSomeDependencies
.output DependenciesUpToActual
.output DependenciesForThis
*/