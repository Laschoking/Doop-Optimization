// Main schema
.type Modifier
.type Type
.type PrimitiveType = Type
.type ReferenceType = Type
.type ArrayType = ReferenceType
.type ClassType = ReferenceType
.type InterfaceType = ReferenceType
.decl isType(?t:Type)
.decl isReferenceType(?t:ReferenceType)
.decl isArrayType(?t:ArrayType)
.decl isClassType(?t:ClassType)
.decl isInterfaceType(?t:InterfaceType)
.decl DirectSuperclass(?class:ClassType, ?superclass:ClassType)
.input DirectSuperclass(IO="file", filename="DirectSuperclass.facts", delimiter="\t")
.decl DirectSuperinterface(?ref:ReferenceType, ?interface:InterfaceType)
.input DirectSuperinterface(IO="file", filename="DirectSuperinterface.facts", delimiter="\t")
.decl ApplicationClass(?ref:ReferenceType)
.decl MainClass(?class:ClassType)
.input MainClass(IO="file", filename="MainClass.facts", delimiter="\t")
.type Field
.decl Field_DeclaringType(?field:Field, ?declaringClass:ReferenceType)
.type MethodDescriptor
.type Method
.decl Method_DeclaringType(?method:Method, ?declaringType:ReferenceType)
.decl Method_ReturnType(?method:Method, ?returnType:Type)
.decl Method_SimpleName(?method:Method, ?simpleName:symbol)
.decl Method_ParamTypes(?method:Method, ?params:symbol)
.decl Method_Descriptor(?method:Method, ?descriptor:MethodDescriptor)
.decl Method_Modifier(?mod:Modifier, ?method:Method)
.input Method_Modifier(IO="file", filename="Method-Modifier.facts", delimiter="\t")
.decl FormalParam(?index:number, ?method:Method, ?var:Var)
.input FormalParam(IO="file", filename="FormalParam.facts", delimiter="\t")
.decl ThisVar(?method:Method, ?var:Var)
.type Var
.decl Var_Type(?var:Var, ?type:Type)
.input Var_Type(IO="file", filename="Var-Type.facts", delimiter="\t")
.decl Var_DeclaringMethod(?var:Var, ?method:Method)
.type HeapAllocation
.decl HeapAllocation_Type(?heap:HeapAllocation, ?type:Type)
.decl MainMethodArgArray(?heap:HeapAllocation)
.decl MainMethodArgArrayContent(?heap:HeapAllocation)
.type Instruction
.decl Instruction_Method(?insn:Instruction, ?inMethod:Method)
.type FieldInstruction = Instruction
.type LoadInstanceField_Insn = FieldInstruction
.type StoreInstanceField_Insn = FieldInstruction
.type LoadStaticField_Insn = FieldInstruction
.type StoreStaticField_Insn = FieldInstruction
.type ArrayInstruction = Instruction
.type LoadArrayIndex_Insn = ArrayInstruction
.type StoreArrayIndex_Insn = ArrayInstruction
.type AssignInstruction = Instruction
.type AssignLocal_Insn = AssignInstruction
.type AssignCast_Insn = AssignInstruction
.type AssignHeapAllocation_Insn = AssignInstruction
.type ReturnInstruction = Instruction
.type ReturnNonvoid_Insn = ReturnInstruction
.type MethodInvocation = Instruction
.type VirtualMethodInvocation_Insn = MethodInvocation
.type StaticMethodInvocation_Insn = MethodInvocation
.decl isVirtualMethodInvocation_Insn(?insn:VirtualMethodInvocation_Insn)
.decl isStaticMethodInvocation_Insn(?insn:StaticMethodInvocation_Insn)
.decl FieldInstruction_Signature(?insn:FieldInstruction, ?sign:Field)
.decl LoadInstanceField_Base(?insn:LoadInstanceField_Insn, ?var:Var)
.decl LoadInstanceField_To(?insn:LoadInstanceField_Insn, ?var:Var)
.decl StoreInstanceField_From(?insn:StoreInstanceField_Insn, ?var:Var)
.decl StoreInstanceField_Base(?insn:StoreInstanceField_Insn, ?var:Var)
.decl LoadStaticField_To(?insn:LoadStaticField_Insn, ?var:Var)
.decl StoreStaticField_From(?insn:StoreStaticField_Insn, ?var:Var)
.decl ComponentType(?arrayType:ArrayType, ?componentType:Type)
.input ComponentType(IO="file", filename="ComponentType.facts", delimiter="\t")
.decl LoadArrayIndex_Base(?insn:LoadArrayIndex_Insn, ?var:Var)
.decl LoadArrayIndex_To(?insn:LoadArrayIndex_Insn, var:Var)
.decl StoreArrayIndex_From(?insn:StoreArrayIndex_Insn, ?var:Var)
.decl StoreArrayIndex_Base(?insn:StoreArrayIndex_Insn, ?var:Var)
.decl AssignInstruction_To(?insn:AssignInstruction, ?to:Var)
.decl AssignCast_From(?insn:AssignCast_Insn, ?from:Var)
.decl AssignCast_Type(?insn:AssignCast_Insn, ?type:Type)
.decl AssignLocal_From(?insn:AssignLocal_Insn, ?from:Var)
.decl AssignHeapAllocation_Heap(?insn:AssignHeapAllocation_Insn, ?heap:HeapAllocation)
.decl ReturnNonvoid_Var(?return:ReturnNonvoid_Insn, ?var:Var)
.decl MethodInvocation_Method(?invocation:MethodInvocation, ?signature:Method)
.decl AssignReturnValue(?invocation:MethodInvocation, ?to:Var)
.input AssignReturnValue(IO="file", filename="AssignReturnValue.facts", delimiter="\t")
.decl ActualParam(?index:number, ?invocation:MethodInvocation, ?var:Var)
.input ActualParam(IO="file", filename="ActualParam.facts", delimiter="\t")
.decl VirtualMethodInvocation_Base(?invocation:VirtualMethodInvocation_Insn, ?base:Var)
.decl VirtualMethodInvocation_SimpleName(?invocation:MethodInvocation, ?simplename:symbol)
.decl VirtualMethodInvocation_Descriptor(?invocation:MethodInvocation, ?descriptor:MethodDescriptor)
.decl SpecialMethodInvocation_Base(?invocation:MethodInvocation, ?base:Var)
.decl MethodInvocation_Base(?invocation:MethodInvocation, ?base:Var)

// Fat schema
.decl LoadInstanceField(?base:Var, ?sig:Field, ?to:Var, ?inmethod:Method) 
.decl StoreInstanceField(?from:Var, ?base:Var, ?signature:Field, ?inmethod:Method) 
.decl LoadStaticField(?sig:Field, ?to:Var, ?inmethod:Method) 
.decl StoreStaticField(?from:Var, ?signature:Field, ?inmethod:Method) 
.decl LoadArrayIndex(?base:Var, ?to:Var, ?inmethod:Method) 
.decl StoreArrayIndex(?from:Var, ?base:Var, ?inmethod:Method) 
.decl AssignCast(?type:Type, ?from:Var, ?to:Var, ?inmethod:Method) 
.decl AssignLocal(?from:Var, ?to:Var, ?inmethod:Method) 
.decl AssignHeapAllocation(?heap:HeapAllocation, ?to:Var, ?inmethod:Method) 
.decl ReturnVar(?var:Var, ?method:Method) 
.decl StaticMethodInvocation(?invocation:MethodInvocation, ?signature:Method, ?inmethod:Method) 

// imports
.decl _ClassType(?class:symbol)
.input _ClassType(IO="file", filename="ClassType.facts", delimiter="\t")
isType(?class),
isReferenceType(?class),
isClassType(?class) :-
  _ClassType(?class).
.decl _ArrayType(?arrayType:symbol)
.input _ArrayType(IO="file", filename="ArrayType.facts", delimiter="\t")
isType(?arrayType),
isReferenceType(?arrayType),
isArrayType(?arrayType) :-
  _ArrayType(?arrayType).
.decl _InterfaceType(?interface:symbol)
.input _InterfaceType(IO="file", filename="InterfaceType.facts", delimiter="\t")
isType(?interface),
isReferenceType(?interface),
isInterfaceType(?interface) :-
  _InterfaceType(?interface).
.decl _Var_DeclaringMethod(?var:symbol, ?method:symbol)
.input _Var_DeclaringMethod(IO="file", filename="Var-DeclaringMethod.facts", delimiter="\t")
Var_DeclaringMethod(?var, ?method) :-
  _Var_DeclaringMethod(?var, ?method).
.decl _ApplicationClass(?type:symbol)
.input _ApplicationClass(IO="file", filename="ApplicationClass.facts", delimiter="\t")
isType(?type),
isReferenceType(?type),
ApplicationClass(?type) :-
  _ApplicationClass(?type).
.decl _ThisVar(?method:symbol, ?var:symbol)
.input _ThisVar(IO="file", filename="ThisVar.facts", delimiter="\t")
ThisVar(?method, ?var) :-
  _ThisVar(?method, ?var).
.decl _NormalHeap(?id:symbol, ?type:symbol)
.input _NormalHeap(IO="file", filename="NormalHeap.facts", delimiter="\t")
isType(?type),
HeapAllocation_Type(?id, ?type) :-
  _NormalHeap(?id, ?type).
.decl _StringConstant(?id:symbol)
.input _StringConstant(IO="file", filename="StringConstant.facts", delimiter="\t")
HeapAllocation_Type(?id, "java.lang.String") :-
  _StringConstant(?id).
.decl _AssignHeapAllocation(?instruction:symbol, ?index:number, ?heap:symbol, ?to:symbol, ?inmethod:symbol, ?linenumber:number)
.input _AssignHeapAllocation(IO="file", filename="AssignHeapAllocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
  _AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?method, ?linenumber).
.decl _AssignLocal(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?inmethod:symbol)
.input _AssignLocal(IO="file", filename="AssignLocal.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  _AssignLocal(?instruction, ?index, ?from, ?to, ?method).
.decl _AssignCast(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol)
.input _AssignCast(IO="file", filename="AssignCast.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  _AssignCast(?instruction, ?index, ?from, ?to, ?type, ?method).
.decl _Field(?signature:symbol, ?declaringClass:symbol, ?simplename:symbol, ?type:symbol)
.input _Field(IO="file", filename="Field.facts", delimiter="\t")
Field_DeclaringType(?signature, ?declaringType) :-
  _Field(?signature, ?declaringType, _, _).
MethodInvocation_Base(?invocation, ?base) :-
  VirtualMethodInvocation_Base(?invocation, ?base) ;
  SpecialMethodInvocation_Base(?invocation, ?base).
.decl _StaticMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?method:symbol)
.input _StaticMethodInvocation(IO="file", filename="StaticMethodInvocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
isStaticMethodInvocation_Insn(?instruction),
MethodInvocation_Method(?instruction, ?signature) :-
  _StaticMethodInvocation(?instruction, ?index, ?signature, ?method).
.decl _SpecialMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?method:symbol)
.input _SpecialMethodInvocation(IO="file", filename="SpecialMethodInvocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
SpecialMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
  _SpecialMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).
.decl _VirtualMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?method:symbol)
.input _VirtualMethodInvocation(IO="file", filename="VirtualMethodInvocation.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
isVirtualMethodInvocation_Insn(?instruction),
VirtualMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
  _VirtualMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).
.decl _Method(?method:symbol, ?simplename:symbol, ?descriptor:symbol, ?declaringType:symbol, ?returnType:symbol, ?jvmDescriptor:symbol, ?arity:number)
.input _Method(IO="file", filename="Method.facts", delimiter="\t")
Method_SimpleName(?method, ?simplename),
Method_ParamTypes(?method, ?params),
Method_DeclaringType(?method, ?declaringType),
Method_ReturnType(?method, ?returnType) :-
  _Method(?method, ?simplename, ?params, ?declaringType, ?returnType, ?jvmDescriptor, ?arity).
Method_Descriptor(?method, ?descriptor) :-
  Method_ReturnType(?method, ?returnType),
  Method_ParamTypes(?method, ?params),
  ?descriptor = cat(?returnType, cat("(", cat(?params, ")"))).
.decl _StoreInstanceField(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?signature:symbol, ?method:symbol)
.input _StoreInstanceField(IO="file", filename="StoreInstanceField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
  _StoreInstanceField(?instruction, ?index, ?from, ?base, ?signature, ?method).
.decl _LoadInstanceField(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?signature:symbol, ?method:symbol)
.input _LoadInstanceField(IO="file", filename="LoadInstanceField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
  _LoadInstanceField(?instruction, ?index, ?to, ?base, ?signature, ?method).
.decl _StoreStaticField(?instruction:symbol, ?index:number, ?from:symbol, ?signature:symbol, ?method:symbol)
.input _StoreStaticField(IO="file", filename="StoreStaticField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from) :-
  _StoreStaticField(?instruction, ?index, ?from, ?signature, ?method).
.decl _LoadStaticField(?instruction:symbol, ?index:number, ?to:symbol, ?signature:symbol, ?method:symbol)
.input _LoadStaticField(IO="file", filename="LoadStaticField.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to) :-
  _LoadStaticField(?instruction, ?index, ?to, ?signature, ?method).
.decl _StoreArrayIndex(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?method:symbol)
.input _StoreArrayIndex(IO="file", filename="StoreArrayIndex.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from) :-
  _StoreArrayIndex(?instruction, ?index, ?from, ?base, ?method).
.decl _LoadArrayIndex(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?method:symbol)
.input _LoadArrayIndex(IO="file", filename="LoadArrayIndex.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to) :-
  _LoadArrayIndex(?instruction, ?index, ?to, ?base, ?method).
.decl _Return(?instruction:symbol, ?index:number, ?var:symbol, ?method:symbol)
.input _Return(IO="file", filename="Return.facts", delimiter="\t")
Instruction_Method(?instruction, ?method),
ReturnNonvoid_Var(?instruction, ?var) :-
  _Return(?instruction, ?index, ?var, ?method).

// fat schema population
LoadInstanceField(?base, ?sig, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  LoadInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig),
  LoadInstanceField_To(?insn, ?to).
StoreInstanceField(?from, ?base, ?sig, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  StoreInstanceField_From(?insn, ?from),
  StoreInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig).
LoadStaticField(?sig, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  FieldInstruction_Signature(?insn, ?sig),
  LoadStaticField_To(?insn, ?to).
StoreStaticField(?from, ?sig, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  StoreStaticField_From(?insn, ?from),
  FieldInstruction_Signature(?insn, ?sig).
AssignCast(?type, ?from, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  AssignCast_From(?insn, ?from),
  AssignInstruction_To(?insn, ?to),
  AssignCast_Type(?insn, ?type).
AssignLocal(?from, ?to, ?inmethod) :-
  AssignInstruction_To(?insn, ?to),
  Instruction_Method(?insn, ?inmethod),
  AssignLocal_From(?insn, ?from).
AssignHeapAllocation(?heap, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  AssignHeapAllocation_Heap(?insn, ?heap),
  AssignInstruction_To(?insn, ?to).
ReturnVar(?var, ?method) :-
  Instruction_Method(?insn, ?method),
  ReturnNonvoid_Var(?insn, ?var).
StaticMethodInvocation(?invocation, ?signature, ?inmethod) :-
  isStaticMethodInvocation_Insn(?invocation),
  Instruction_Method(?invocation, ?inmethod),
  MethodInvocation_Method(?invocation, ?signature).
HeapAllocation_Type(?heap, ?type),
MainMethodArgArray(?heap) :-
  ?heap = "<<main method array>>",
  ?type = "java.lang.String[]".
HeapAllocation_Type(?heap, ?type),
MainMethodArgArrayContent(?heap) :-
  ?heap = "<<main method array content>>",
  ?type = "java.lang.String".
VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
VirtualMethodInvocation_Descriptor(?invocation, ?descriptor) :-
  isVirtualMethodInvocation_Insn(?invocation),
  MethodInvocation_Method(?invocation, ?signature),
  Method_SimpleName(?signature, ?simplename),
  Method_Descriptor(?signature, ?descriptor).

// Basic (type-based) analysis
.comp Basic {
.decl MethodLookup(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:Type, ?method:Method)
.decl MethodImplemented(?simplename:symbol, ?descriptor:MethodDescriptor, ?type:Type, ?method:Method)
.decl DirectSubclass(?a:Type, ?c:Type)
.decl Subclass(?c:Type, ?a:Type)
.decl Superclass(?c:Type, ?a:Type)
.decl Superinterface(?k:Type, ?c:Type)
.decl SubtypeOf(?subtype:Type, ?type:Type)
.decl SupertypeOf(?supertype:Type, ?type:Type)
.decl SubtypeOfDifferent(?subtype:Type, ?type:Type)
.decl MainMethodDeclaration(?method:Method)
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
  MethodImplemented(?simplename, ?descriptor, ?type, ?method).
MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
  (DirectSuperclass(?type, ?supertype) ;
   DirectSuperinterface(?type, ?supertype)),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method),
  ! MethodImplemented(?simplename, ?descriptor, ?type, _).
MethodImplemented(?simplename, ?descriptor, ?type, ?method) :-
  Method_SimpleName(?method, ?simplename),
  Method_Descriptor(?method, ?descriptor),
  Method_DeclaringType(?method, ?type),
  ! Method_Modifier("abstract", ?method).
DirectSubclass(?a, ?c) :-
  DirectSuperclass(?a, ?c).
Subclass(?c, ?a) :-
  DirectSubclass(?a, ?c).
Subclass(?c, ?a) :-
  Subclass(?b, ?a),
  DirectSubclass(?b, ?c).
Superclass(?c, ?a) :-
  Subclass(?a, ?c).
Superinterface(?k, ?c) :-
  DirectSuperinterface(?c, ?k).
Superinterface(?k, ?c) :-
  DirectSuperinterface(?c, ?j),
  Superinterface(?k, ?j).
Superinterface(?k, ?c) :-
  DirectSuperclass(?c, ?super),
  Superinterface(?k, ?super).
SupertypeOf(?s, ?t) :-
  SubtypeOf(?t, ?s).
SubtypeOf(?s, ?s) :-
  isClassType(?s).
SubtypeOf(?s, ?t) :-
  Subclass(?t, ?s).
SubtypeOf(?s, ?t) :-
  isClassType(?s),
  Superinterface(?t, ?s).
SubtypeOf(?s, ?t) :-
  isInterfaceType(?s),
  isType(?t),
  ?t = "java.lang.Object".
SubtypeOf(?s, ?s) :-
  isInterfaceType(?s).
SubtypeOf(?s, ?t) :-
  isInterfaceType(?s),
  Superinterface(?t, ?s).
SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isType(?t),
  ?t = "java.lang.Object".
SubtypeOf(?s, ?t) :-
  ComponentType(?s, ?sc),
  ComponentType(?t, ?tc),
  isReferenceType(?sc),
  isReferenceType(?tc),
  SubtypeOf(?sc, ?tc).
SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.lang.Cloneable".
SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.io.Serializable".
SubtypeOf(?t, ?t) :-
  isType(?t).
SubtypeOfDifferent(?s, ?t) :-
  SubtypeOf(?s, ?t),
  ?s != ?t.
MainMethodDeclaration(?method) :-
  MainClass(?type),
  Method_DeclaringType(?method, ?type),
  ?method != "<java.util.prefs.Base64: void main(java.lang.String[])>",
  ?method != "<sun.java2d.loops.GraphicsPrimitiveMgr: void main(java.lang.String[])>",
  ?method != "<sun.security.provider.PolicyParser: void main(java.lang.String[])>",
  Method_SimpleName(?method, "main"),
  Method_Descriptor(?method, "void(java.lang.String[])"),
  Method_Modifier("public", ?method),
  Method_Modifier("static", ?method).
}
.init basic = Basic

// Main (value-based) analysis
.functor singleton_mapping(symbol,symbol,symbol):number
.functor empty_mapping():number
.functor combine_strict(number,number):number
.functor combine_loose(number,number):number
.functor mapcol_to_string(number):symbol

// low-level lexical macros
#define COMBINE_STRICT(e1, e2) temp##e1##e2, temp##e1##e2 = @combine_strict(e1, e2), temp##e1##e2 != 0
#define COMBINE_STRICT3(e1, e2, e3) temp##e1##e2##e3, temp##e1##e2##e3 = @combine_strict(e3, @combine_strict(e1, e2)), \
   temp##e1##e2##e3 != 0

.type Dependencies = number

.decl VarPointsTo(var:Var, heap:HeapAllocation, localDeps:Dependencies, globalDeps:Dependencies)
.decl InstanceFieldPointsTo(baseObj:HeapAllocation, fld:Field, obj:HeapAllocation, globalDeps:Dependencies)
.decl StaticFieldPointsTo(fld:Field, heap:HeapAllocation, globalDeps:Dependencies)

.decl EmptyDependencies(dep: number)
EmptyDependencies(dep) :-
  dep = @empty_mapping().

.decl Reachable(meth:Method)

Reachable(meth) :-
  MethodDependencies(meth, _, _).

.decl MethodDependencies(meth:Method, localDeps:Dependencies, globalDeps:Dependencies)
MethodDependencies(method, deps, deps) :-
  basic.MainMethodDeclaration(method),
  EmptyDependencies(deps).

// REVIEW: maybe global deps should be stronger
MethodDependencies(clinit, deps, deps) :-
  InitializedClass(class),
  ClassInitializer(class, clinit),
  EmptyDependencies(deps).
  
.decl CallGraphEdge(invocation:MethodInvocation, meth:Method)
CallGraphEdge(invocation, toMethod) :-
  VarPointsTo(base, heap, _, _),
  VirtualMethodInvocation_Base(invocation, base),
  HeapAllocation_Type(heap, heaptype),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor),
  basic.MethodLookup(simplename, descriptor, heaptype, toMethod).

CallGraphEdge(invocation, toMethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, _),
  MethodInvocation_Method(invocation, toMethod).

CallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  StaticMethodInvocation(invocation, tomethod, inmethod).

.decl VarOfReferenceType(var:Var)
VarOfReferenceType(var) :-
  Var_Type(var, type),
  isReferenceType(type).

.decl DependenciesUpToActual(caller:MethodInvocation, tomethod:Method, i:number, callerLDeps:Dependencies,
   calleeLDeps:Dependencies, globalDeps:Dependencies)
DependenciesUpToActual(caller, method, 0, callerLDeps, calleeLDeps, globalDeps) :-
  CallGraphEdge(caller, method),
  ActualParam(0, caller, actual),
  FormalParam(0, method, formal),
  VarPointsTo(actual, obj, callerLDeps, globalDeps),
  calleeLDeps = @singleton_mapping(formal, obj, obj).  // localDeps get reset at a call
 .plan 1:(4,2,1,3)

DependenciesUpToActual(caller, method, 0, emptyDeps, emptyDeps, globalDeps) :-
  CallGraphEdge(caller, method),
  ActualParam(0, caller, actual),
  !VarOfReferenceType(actual),
  Instruction_Method(caller, inmethod),
  MethodDependencies(inmethod, _, globalDeps),
  EmptyDependencies(emptyDeps).

// These ridiculous-looking definitions are because using "i+1" in the middle of
// an expensive join will make it blow up, because arithmetic will be done last!
.decl NextActualParam(caller:MethodInvocation, i:number, next:Var)
NextActualParam(caller, i-1, next) :-
  ActualParam(i, caller, next),
  i > 0.
.decl NextFormalParam(method:Method, i:number, next:Var)
NextFormalParam(method, i-1, next) :-
  FormalParam(i, method, next),
  i > 0.

LocalDependenciesCheckRequest(preCallerLDeps, deltaCallerLDeps) :-
  DependenciesUpToActual(caller, _, i, preCallerLDeps, _, _),
  NextActualParam(caller, i, actual),
  VarPointsTo(actual, _, deltaCallerLDeps, _).
 .plan 1:(3,2,1)

DependenciesUpToActual(caller, method, i+1, callerLDeps, calleeLDeps, globalDeps) :-
  DependenciesUpToActual(caller, method, i, preCallerLDeps, preCalleeLDeps, preGlobalDeps),
  NextActualParam(caller, i, actual),
  VarPointsTo(actual, obj, deltaCallerLDeps, deltaGlobalDeps),
  ValidLocalDependenciesCheckResponse(preCallerLDeps, deltaCallerLDeps, callerLDeps),
  globalDeps = COMBINE_STRICT(preGlobalDeps, deltaGlobalDeps),
  NextFormalParam(method, i, formal),
  addOnDeps = @singleton_mapping(formal, obj, obj),
  calleeLDeps = @combine_loose(preCalleeLDeps, addOnDeps).  // cannot conflict
 .plan 1:(3,2,1,4,5), 2:(4,1,2,3,5)

DependenciesUpToActual(caller, method, i+1, callerLDeps, calleeLDeps, globalDeps) :-
  DependenciesUpToActual(caller, method, i, callerLDeps, calleeLDeps, globalDeps),
  NextActualParam(caller, i, actual),
  !VarOfReferenceType(actual).

.decl DependenciesForThis(caller:MethodInvocation, tomethod:Method,
   callerLDeps:Dependencies, calleeLDeps:Dependencies, globalDeps:Dependencies)
DependenciesForThis(caller, tomethod, callerLDeps, calleeLDeps, globalDeps) :-
  CallGraphEdge(caller, tomethod),
  (VirtualMethodInvocation_Base(caller, base);
   SpecialMethodInvocation_Base(caller, base)),
  VarPointsTo(base, obj, callerLDeps, globalDeps),
  ThisVar(tomethod, this),
  calleeLDeps = @singleton_mapping(this, obj, obj).
 .plan 1:(3,2,1,4)
 
.decl CallGraphEdgeWithDependencies(caller:MethodInvocation, tomethod:Method,
   callerLDeps:Dependencies, calleeLDeps:Dependencies, globalDeps:Dependencies)
// Combine deps for args with deps for "this"

///// Original rule. Let's see if caching will speed it up.
// CallGraphEdgeWithDependencies(caller, tomethod, callerLDeps, calleeLDeps, globalDeps) :-
//   DependenciesUpToActual(caller, tomethod, i, preCallerLDeps, preCalleeLDeps, preGlobalDeps),
//   DependenciesForThis(caller, tomethod, thisCallerLDeps, thisCalleeLDeps, thisGlobalDeps),
//   callerLDeps = COMBINE_STRICT(preCallerLDeps, thisCallerLDeps), 
//   calleeLDeps = COMBINE_STRICT(preCalleeLDeps, thisCalleeLDeps), 
//   globalDeps = COMBINE_STRICT(preGlobalDeps, thisGlobalDeps),
//   !ActualParam(i+1, caller, _).
//  .plan 1:(2,1)

.decl DependenciesForAllParams(caller:MethodInvocation, tomethod:Method, callerLDeps:Dependencies,
   calleeLDeps:Dependencies, globalDeps:Dependencies)
DependenciesForAllParams(caller, method, callerLDeps, calleeLDeps, globalDeps) :-
  DependenciesUpToActual(caller, method, i, callerLDeps, calleeLDeps, globalDeps),
  !NextActualParam(caller, i, _).

// DESIGN choice: ignore all global deps when crossing method boundaries
// DESIGN2: eliminate global dependencies from InstanceFieldPointsTo (always null)
.decl DependenciesForAllParamsMod(caller:MethodInvocation, tomethod:Method, callerLDeps:Dependencies, calleeLDeps:Dependencies)
DependenciesForAllParamsMod(caller, method, callerLDeps, calleeLDeps) :-
  DependenciesForAllParams(caller, method, callerLDeps, calleeLDeps, _).
.decl DependenciesForThisMod(caller:MethodInvocation, tomethod:Method, callerLDeps:Dependencies, calleeLDeps:Dependencies)
DependenciesForThisMod(caller, method, callerLDeps, calleeLDeps) :-
  DependenciesForThis(caller, method, callerLDeps, calleeLDeps, _).

LocalDependenciesCheckRequest(preCallerLDeps, thisCallerLDeps) :-
  DependenciesForAllParamsMod(caller, tomethod, preCallerLDeps, _),
  DependenciesForThisMod(caller, tomethod, thisCallerLDeps, _).
 .plan 1:(2,1)

CallGraphEdgeWithDependencies(caller, tomethod, callerLDeps, calleeLDeps, globalDeps) :-
  DependenciesForAllParamsMod(caller, tomethod, preCallerLDeps, preCalleeLDeps),
  DependenciesForThisMod(caller, tomethod, thisCallerLDeps, thisCalleeLDeps),
  ValidLocalDependenciesCheckResponse(preCallerLDeps, thisCallerLDeps, callerLDeps),
  calleeLDeps = @combine_loose(preCalleeLDeps, thisCalleeLDeps),  // cannot conflict
  EmptyDependencies(globalDeps).
 .plan 1:(2,1,3,4), 2:(3,2,1,4)


// no args, but "this" exists
CallGraphEdgeWithDependencies(caller, tomethod, callerLDeps, calleeLDeps, globalDeps) :-
// DESIGN
//  DependenciesForThis(caller, tomethod, callerLDeps, calleeLDeps, globalDeps),
  DependenciesForThisMod(caller, tomethod, callerLDeps, calleeLDeps),
  EmptyDependencies(globalDeps),
  !ActualParam(_, caller, _).

// if it's a static call with no args, there are only global dependencies
CallGraphEdgeWithDependencies(caller, tomethod, emptyDeps, emptyDeps, globalDeps) :-
  CallGraphEdge(caller, tomethod),
  !ActualParam(_, caller, _),
  StaticMethodInvocation(caller, _, inmethod),
  MethodDependencies(inmethod, _, globalDeps),
  EmptyDependencies(emptyDeps).

// static call, but args have deps
CallGraphEdgeWithDependencies(caller, tomethod, callerLDeps, calleeLDeps, globalDeps) :-
// DESIGN
//  DependenciesForAllParams(caller, tomethod, callerLDeps, calleeLDeps, globalDeps),
  DependenciesForAllParamsMod(caller, tomethod, callerLDeps, calleeLDeps),
  EmptyDependencies(globalDeps),
  StaticMethodInvocation(caller, tomethod, _).

// Start the new method right.
MethodDependencies(method, localDeps, globalDeps) :-
  CallGraphEdgeWithDependencies(_, method, _, localDeps, globalDeps).

// Here's the cool trick: we collected all consistent dependency mappings in tuples,
// right? But we never said that the formals or "this" of a callee have these
// values. Now we let them have whatever values they want, as long as they
// are consistent with these deps! I.e., they get the right values, by selecting
// from a larger set.

.decl AuxMethodCallActualFormal(tomethod:Method, actual:Var, formal:Var)
AuxMethodCallActualFormal(tomethod, actual, formal) :-
  CallGraphEdge(caller, tomethod),
  ActualParam(i, caller, actual),
  FormalParam(i, tomethod, formal).

MethodAndPointsToCompatibleDependencyRequest(tomethod, formal, obj) :-
  AuxMethodCallActualFormal(tomethod, actual, formal),
  VarPointsTo(actual, obj, _, _).
 .plan 1:(2,1)

VarPointsTo(formal, obj, localDeps, globalDeps) :-
  AuxMethodCallActualFormal(tomethod, _, formal),
  MethodAndPointsToCompatibleDependencyResponse(tomethod, formal, obj, localDeps, globalDeps).
    // ensure the formal's value is in deps
 .plan 1:(2,1)

.decl AuxReachableMethodCallBase(base:Var, tomethod:Method)
AuxReachableMethodCallBase(base, tomethod) :-
  CallGraphEdge(caller, tomethod),
  (VirtualMethodInvocation_Base(caller, base);
   SpecialMethodInvocation_Base(caller, base)).

MethodAndPointsToCompatibleDependencyRequest(tomethod, this, obj) :-
  AuxReachableMethodCallBase(base, tomethod),
  VarPointsTo(base, obj, _, _),
  ThisVar(tomethod, this).
 .plan 1:(2,1,3)

VarPointsTo(this, obj, localDeps, globalDeps) :-
  AuxReachableMethodCallBase(base, tomethod),
  VarPointsTo(base, obj, _, _),
  ThisVar(tomethod, this),
  MethodAndPointsToCompatibleDependencyResponse(tomethod, this, obj, localDeps, globalDeps).
 .plan 1:(2,1,3,4), 2:(4,1,2,3)

CallerCalleeCompatibleDependenciesRequest(caller, return, callerLDeps, calleeLDeps, globalDeps) :-
  CallGraphEdgeWithDependencies(caller, tomethod, callerLDeps, calleeLDeps, globalDeps),
  ReturnVar(return, tomethod).

// A lot of work to get to this point! But now return value should depend on args
VarPointsTo(local, obj, localDeps, globalDeps) :-
  CallerCalleeCompatibleDependenciesResponse(caller, obj, localDeps, globalDeps),
  AssignReturnValue(caller, local).


// intra-procedural rules
VarPointsTo(var, heap, localDeps, globalDeps) :-
  AssignHeapAllocation(heap, var, inmethod),
  MethodDependencies(inmethod, _, globalDeps),  
  localDeps = @singleton_mapping(var, heap, heap).  // introduce a new mapping on allocation!

// VarPointsTo(to, obj, localDeps, globalDeps) :-
//   VarPointsTo(from, obj, preLocalDeps, globalDeps),
//   AssignLocal(from, to, _),
//   addOnDeps = @singleton_mapping(from, obj, obj),
//   localDeps = COMBINE_STRICT(preLocalDeps, addOnDeps).

// VarPointsTo(to, obj, localDeps, globalDeps) :-
//   VarPointsTo(from, obj, preLocalDeps, globalDeps),
//   AssignCast(type, from, to, _),
//   basic.SupertypeOf(type, heaptype),
//   HeapAllocation_Type(obj, heaptype),
//   addOnDeps = @singleton_mapping(from, obj, obj),
//   localDeps = COMBINE_STRICT(preLocalDeps, addOnDeps).

// No need to introduce mapping when the value remains unchanged!
VarPointsTo(to, obj, localDeps, globalDeps) :-
  VarPointsTo(from, obj, localDeps, globalDeps),
  AssignLocal(from, to, _).
  
VarPointsTo(to, obj, localDeps, globalDeps) :-
  VarPointsTo(from, obj, localDeps, globalDeps),
  AssignCast(type, from, to, _),
  basic.SupertypeOf(type, heaptype),
  HeapAllocation_Type(obj, heaptype).

.decl AuxStoredObjectIntoField(heap:HeapAllocation, fld:Field, base:Var, fLDeps:Dependencies, fGDeps:Dependencies)
AuxStoredObjectIntoField(heap, fld, base, fLDeps, fGDeps) :-
  VarPointsTo(from, heap, fLDeps, fGDeps),
  StoreInstanceField(from, base, fld, _).

LocalDependenciesCheckRequest(fLDeps, bLDeps) :-
  AuxStoredObjectIntoField(_, _, base, fLDeps, _),
  VarPointsTo(base, _, bLDeps, _).
 .plan 1:(2,1)

InstanceFieldPointsTo(baseheap, fld, heap, globalDeps) :-
  AuxStoredObjectIntoField(heap, fld, base, fLDeps, fGDeps),
  VarPointsTo(base, baseheap, bLDeps, bGDeps),
  ValidLocalDependenciesCheckResponse(fLDeps, bLDeps, _),
/// DESIGN2
//  ValidGlobalDependenciesCheckResponse(fGDeps, bGDeps, globalDeps). 
// .plan 1:(2,1,3,4), 2:(3,1,2,4), 3:(4,1,2,3)
  dummy = COMBINE_STRICT(fGDeps, bGDeps), dummy = dummy,
//  ValidGlobalDependenciesCheckResponse(fGDeps, bGDeps, _),
  EmptyDependencies(globalDeps).
// .plan 1:(2,1,3,4,5), 2:(3,1,2,4,5), 3:(4,1,2,3,5)
 .plan 1:(2,1,3,4), 2:(3,1,2,4)
/// Basically disable all global dependencies for InstanceFieldPointsTo

StaticFieldPointsTo(fld, heap, globalDeps) :-
  VarPointsTo(from, heap, _, globalDeps),
  StoreStaticField(from, fld, _).

//// DESIGN2
// GlobalDependenciesCheckRequest(bGDeps, hGDeps) :-
//   VarPointsTo(base, baseheap, _, bGDeps),
//   LoadInstanceField(base, fld, _, _),
//   InstanceFieldPointsTo(baseheap, fld, _, hGDeps).
//  .plan 1:(3,2,1)

.decl AuxAccessPath(base:Var, fld:Field, str:symbol)
AuxAccessPath(base, fld, cat(base, cat("___.___", fld))) :-
  LoadInstanceField(base, fld, _, _).

.decl AuxLoadPointsTo(baseheap:HeapAllocation, fld:Field, to:Var, apText:symbol, lDeps:Dependencies, gDeps:Dependencies) 
AuxLoadPointsTo(baseheap, fld, to, apText, localDeps, gDeps) :-
  VarPointsTo(base, baseheap, localDeps, gDeps),
  LoadInstanceField(base, fld, to, _),
  AuxAccessPath(base, fld, apText).

VarPointsTo(to, heap, localDeps, globalDeps) :-
  AuxLoadPointsTo(baseheap, fld, to, apText, localDeps, bGDeps),
  InstanceFieldPointsTo(baseheap, fld, heap, hGDeps),
/// DESIGN2
//  ValidGlobalDependenciesCheckResponse(bGDeps, hGDeps, oldGlobalDeps),
  newGlobalDeps = @singleton_mapping(apText, heap, heap),
/// DESIGN2
//  globalDeps = @combine_loose(newGlobalDeps, oldGlobalDeps).
// .plan 1:(2,1,3), 2:(3,1,2)
  globalDeps = @combine_loose(newGlobalDeps, bGDeps), hGDeps = hGDeps.
 .plan 1:(2,1)

VarPointsTo(to, heap, emptyDeps, globalDeps) :-
  StaticFieldPointsTo(fld, heap, hGDeps),
  LoadStaticField(fld, to, inmethod),
  MethodDependencies(inmethod, _, mGDeps),
  newGlobalDeps = @singleton_mapping(fld, heap, heap),
  tempGlobalDeps = @combine_loose(newGlobalDeps, mGDeps),
  temp2GlobalDeps = @combine_loose(newGlobalDeps, hGDeps),
  globalDeps = COMBINE_STRICT(tempGlobalDeps, temp2GlobalDeps),
  EmptyDependencies(emptyDeps).
 .plan 1:(3,2,1,4)

/*
 *  Optimization predicates. Mostly request-response patterns.
 */
 
// Last-level optimization. Just a Datalog cache for the C++ results.
.decl LocalDependenciesCheckRequest(deps1: Dependencies, deps2: Dependencies)
.decl __LocalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)
.decl ValidLocalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)
.decl IsValidLocalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies)
// .decl GlobalDependenciesCheckRequest(deps1: Dependencies, deps2: Dependencies)
// .decl __GlobalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)
// .decl ValidGlobalDependenciesCheckResponse(deps1: Dependencies, deps2: Dependencies, resDeps: Dependencies)

__LocalDependenciesCheckResponse(deps1, deps2, resDeps) :-
  LocalDependenciesCheckRequest(deps1, deps2),
  resDeps = @combine_strict(deps1, deps2).

ValidLocalDependenciesCheckResponse(deps1, deps2, resDeps) :-
  __LocalDependenciesCheckResponse(deps1, deps2, resDeps),
  resDeps != 0.

IsValidLocalDependenciesCheckResponse(deps1, deps2) :-
  ValidLocalDependenciesCheckResponse(deps1, deps2, _).

// __GlobalDependenciesCheckResponse(deps1, deps2, resDeps) :-
//   GlobalDependenciesCheckRequest(deps1, deps2),
//   resDeps = @combine_strict(deps1, deps2).

// ValidGlobalDependenciesCheckResponse(deps1, deps2, resDeps) :-
//   __GlobalDependenciesCheckResponse(deps1, deps2, resDeps),
//   resDeps != 0.


.decl CallerCalleeCompatibleDependenciesRequest(caller:MethodInvocation, formalRetVar:Var,
   callerLDeps:Dependencies, calleeLDeps:Dependencies, globalDeps:Dependencies)
.decl CallerCalleeCompatibleDependenciesResponse(caller:MethodInvocation, obj:HeapAllocation, 
   localDeps: Dependencies, globalDeps: Dependencies)

.decl FormalReturnVPT(var:Var, obj:HeapAllocation, lDeps:Dependencies, gDeps:Dependencies)
FormalReturnVPT(var, obj, lDeps, gDeps) :-
  VarPointsTo(var, obj, lDeps, gDeps),
  ReturnVar(var, _).
  
LocalDependenciesCheckRequest(calleeLDeps, vLDeps) :-
  CallerCalleeCompatibleDependenciesRequest(_, formalRetVar, _, calleeLDeps, _),
  FormalReturnVPT(formalRetVar, _, vLDeps, _).
 .plan 1:(2,1)

/// DESIGN alternative
// CallerCalleeCompatibleDependenciesResponse(caller, obj, localDeps, globalDeps) :-
//   CallerCalleeCompatibleDependenciesRequest(caller, formalRetVar, localDeps, calleeLDeps, preGlobalDeps),
//   FormalReturnVPT(formalRetVar, obj, vLDeps, vGDeps),
//   IsValidLocalDependenciesCheckResponse(calleeLDeps, vLDeps),
//   globalDeps = COMBINE_STRICT(preGlobalDeps, vGDeps).
//  .plan 1:(2,1,3), 2:(3,1,2)
CallerCalleeCompatibleDependenciesResponse(caller, obj, localDeps, globalDeps) :-
  CallerCalleeCompatibleDependenciesRequest(caller, formalRetVar, localDeps, calleeLDeps, _),
  FormalReturnVPT(formalRetVar, obj, vLDeps, _),
  IsValidLocalDependenciesCheckResponse(calleeLDeps, vLDeps),
  EmptyDependencies(globalDeps).
 .plan 1:(2,1,3,4), 2:(3,1,2,4)


// The method's dependencies are assumed to already have the var's points-to for a successful
// check. The point of this relation is not to add it, just to check it's there.
.decl MethodAndPointsToCompatibleDependencyRequest(method:Method, var:Var, obj:HeapAllocation)
.decl MethodAndPointsToCompatibleDependencyResponse(method:Method, var:Var, obj:HeapAllocation, 
   localDeps: Dependencies, globalDeps: Dependencies)
MethodAndPointsToCompatibleDependencyResponse(method, var, obj, localDeps, globalDeps) :-
  MethodAndPointsToCompatibleDependencyRequest(method, var, obj),
  MethodDependencies(method, localDeps, globalDeps),
  deltaLDeps = @singleton_mapping(var, obj, obj),
  dummy = COMBINE_STRICT(localDeps, deltaLDeps), dummy = dummy.
 .plan 1:(2,1)


// class initialization
.decl ClassInitializer(type:Type, method:Method)
.decl InitializedClass(classOrInterface:Type)
ClassInitializer(type, method) :-
  basic.MethodImplemented("<clinit>", "void()", type, method).
InitializedClass(superclass) :-
  InitializedClass(class),
  DirectSuperclass(class, superclass).
InitializedClass(superinterface) :-
  InitializedClass(classOrInterface),
  DirectSuperinterface(classOrInterface, superinterface).
InitializedClass(class) :-
  basic.MainMethodDeclaration(method),
  Method_DeclaringType(method, class).
InitializedClass(class) :-
  Reachable(inmethod),
  AssignHeapAllocation(heap, _, inmethod),
  HeapAllocation_Type(heap, class).
InitializedClass(class) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  isStaticMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_DeclaringType(signature, class).
InitializedClass(classOrInterface) :-
  Reachable(inmethod),
  StoreStaticField(_, signature, inmethod),
  Field_DeclaringType(signature, classOrInterface).
InitializedClass(classOrInterface) :-
  Reachable(inmethod),
  LoadStaticField(signature, _, inmethod),
  Field_DeclaringType(signature, classOrInterface).


/// output
.decl TextVarPointsTo(var:Var, heap:HeapAllocation, textLocalDeps:symbol, textGlobalDeps:symbol)
TextVarPointsTo(var, heap, lDepsOut, gDepsOut) :-
  VarPointsTo(var, heap, lDeps, gDeps),
  lDepsOut = @mapcol_to_string(lDeps),
  gDepsOut = @mapcol_to_string(gDeps).

.decl InsensVarPointsTo(var:Var, heap:HeapAllocation)
InsensVarPointsTo(var, heap) :-
  VarPointsTo(var, heap, _, _).

.decl CallGraphEdgeWithSomeDependencies(invo:MethodInvocation, callee:Method)
CallGraphEdgeWithSomeDependencies(invo, callee) :-
  CallGraphEdgeWithDependencies(invo, callee, _, _, _).
  
.output CallGraphEdge
.output TextVarPointsTo
.output InsensVarPointsTo
.output InstanceFieldPointsTo
.output StaticFieldPointsTo
.output MethodDependencies
.output CallGraphEdgeWithDependencies
.output CallGraphEdgeWithSomeDependencies
.output DependenciesUpToActual
.output DependenciesForThis
