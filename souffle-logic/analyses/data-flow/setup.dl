#pragma once
#include "../../commonMacros.dl"

.decl INIT_VAR(stmt: AssignNumConstant_Insn, to: Var, value: NumConstant)
.decl MOVE(stmt: AssignLocal_Insn, to: Var, from: Var)
.decl CAST(stmt: AssignCast_Insn, to: Var, type: Type, from: Var)
.decl ALOAD(stmt: LoadArrayIndex_Insn, to: Var, arr: Var)
.decl ALOAD_VAR(stmt: LoadArrayIndex_Insn, to: Var, arr: Var, i: Var)
.decl ALOAD_NUM(stmt: LoadArrayIndex_Insn, to: Var, arr: Var, i: number)
.decl ASTORE(stmt: StoreArrayIndex_Insn, arr: Var, from: Var)
.decl ASTORE_VAR(stmt: StoreArrayIndex_Insn, arr: Var, i: Var, from: Var)
.decl ASTORE_NUM(stmt: StoreArrayIndex_Insn, arr: Var, i: number, from: Var)
.decl ILOAD(stmt: LoadInstanceField_Insn, to: Var, base: Var, fld: Field)
.decl ISTORE(stmt: StoreInstanceField_Insn, base: Var, fld: Field, from: Var)
.decl SLOAD(stmt: LoadStaticField_Insn, to: Var, fld: Field)
.decl SSTORE(stmt: StoreStaticField_Insn, fld: Field, from: Var)
.decl ALLOC(stmt: AssignHeapAllocation_Insn, to: Var, h: HeapAllocation)
.decl VCALL(stmt: VirtualMethodInvocation_Insn, base: Var, m: Method)
.decl SPCALL(stmt: SpecialMethodInvocation_Insn, base: Var, m: Method)
.decl SCALL(stmt: StaticMethodInvocation_Insn, m: Method)
.decl UNOP(stmt: AssignUnop_Insn, to: Var, op: symbol)
.decl BINOP(stmt: AssignBinop_Insn, to: Var, op: symbol)
.decl IF(stmt: If_Insn, op: symbol, label: number)
.decl GOTO(stmt: Goto_Insn, label: number)
.decl RET(stmt: ReturnInstruction) inline

.decl FORMAL_PARAM(m: Method, pos: number, param: Var) inline
.decl ACTUAL_PARAM(stmt: MethodInvocation, pos: number, param: Var) inline
.decl FORMAL_RET(stmt: ReturnNonvoid_Insn, ret: Var)
.decl ACTUAL_RET(stmt: MethodInvocation, to: Var) inline
// pos starts from 1
.decl OPERAND_VAR(stmt: Instruction, pos: number, oper: Var)
.decl OPERAND_NUM(stmt: Instruction, pos: number, oper: number)

.decl AllocArray(stmt: AssignHeapAllocation_Insn, arr: Var, types: Type) inline
.decl AllocArraySize_VAR(stmt: Instruction, pos: number, sizeVar: Var) inline
.decl AllocArraySize_NUM(stmt: Instruction, pos: number, size: number)
.input AllocArraySize_NUM(filename="ArrayAllocationConstSize.facts")

.decl InterestingStmt(stmt: Instruction)
.decl InterestingMethod(method: Method) inline


InterestingStmt(stmt) :-
#ifdef DATA_FLOW_ONLY_LIB
	isInstruction(stmt),
	Instruction_Method(stmt, meth),
	!ApplicationMethod(meth).
#else
	ApplicationMethod(meth),
	Instruction_Method(stmt, meth).
#endif

InterestingMethod(method) :- InterestingStmt(stmt), Instruction_Method(stmt, method).

AllocArray(stmt, array, types) :-
	AssignInstruction_To(stmt, array),
	isAssignHeapAllocation_Insn(stmt),
	Var_Type(array, types),
	isArrayType(types).

AllocArraySize_VAR(stmt, pos, var) :- ArrayAllocation(stmt, pos, var).

INIT_VAR(stmt, to, value) :-
	AssignNumConstant_Id(stmt, value),
	AssignInstruction_To(stmt, to).

MOVE(stmt, to, from) :-
	AssignLocal_From(stmt, from),
	AssignInstruction_To(stmt, to).

CAST(stmt, to, type, from) :-
	AssignCast_Type(stmt, type),
	AssignCast_From(stmt, from),
	AssignInstruction_To(stmt, to).

ALOAD(stmt, to, arr) :-
	LoadArrayIndex_Base(stmt, arr),
	LoadArrayIndex_To(stmt, to).

ALOAD_NUM(stmt, to, arr, i) :-
	LoadArrayIndex_Base(stmt, arr),
	LoadArrayIndex_To(stmt, to),
	ArrayNumIndex(stmt, i).

ALOAD_VAR(stmt, to, arr, i) :-
	LoadArrayIndex_Base(stmt, arr),
	LoadArrayIndex_To(stmt, to),
	ArrayInsnIndex(stmt, i).

// HACK
ALOAD_VAR(stmt, to, arr, "???") :-
	LoadArrayIndex_Base(stmt, arr),
	LoadArrayIndex_To(stmt, to),
	!ArrayNumIndex(stmt, _),
	!ArrayInsnIndex(stmt, _).

ASTORE(stmt, arr, from) :-
	StoreArrayIndex_Base(stmt, arr),
	StoreArrayIndex_From(stmt, from).

ASTORE_NUM(stmt, arr, i, from) :-
	StoreArrayIndex_Base(stmt, arr),
	StoreArrayIndex_From(stmt, from),
	ArrayNumIndex(stmt, i).

ASTORE_VAR(stmt, arr, i, from) :-
	StoreArrayIndex_Base(stmt, arr),
	StoreArrayIndex_From(stmt, from),
	ArrayInsnIndex(stmt, i).

// HACK
ASTORE_VAR(stmt, arr, "???", from) :-
	StoreArrayIndex_Base(stmt, arr),
	StoreArrayIndex_From(stmt, from),
	!ArrayNumIndex(stmt, _),
	!ArrayInsnIndex(stmt, _).

ILOAD(stmt, to, base, fld) :-
	FieldInstruction_Signature(stmt, fld),
	LoadInstanceField_Base(stmt, base),
	LoadInstanceField_To(stmt, to).

ISTORE(stmt, base, fld, from) :-
	FieldInstruction_Signature(stmt, fld),
	StoreInstanceField_Base(stmt, base),
	StoreInstanceField_From(stmt, from).

SLOAD(stmt, to, fld) :-
	FieldInstruction_Signature(stmt, fld),
	LoadStaticField_To(stmt, to).

SSTORE(stmt, fld, from) :-
	FieldInstruction_Signature(stmt, fld),
	StoreStaticField_From(stmt, from).

VCALL(stmt, base, method) :-
	MethodInvocation_Method(stmt, method),
	VirtualMethodInvocation_Base(stmt, base).

SPCALL(stmt, base, method) :-
	MethodInvocation_Method(stmt, method),
	SpecialMethodInvocation_Base(stmt, base).

SCALL(stmt, method) :-
	isStaticMethodInvocation_Insn(stmt),
	MethodInvocation_Method(stmt, method).

ALLOC(stmt, to, heap) :-
	AssignInstruction_To(stmt, to),
	AssignHeapAllocation_Heap(stmt, heap).

FORMAL_PARAM(m, pos, param) :- FormalParam(pos, m, param).
ACTUAL_PARAM(stmt, pos, param) :- ActualParam(pos, stmt, param).
ACTUAL_RET(stmt, to) :- AssignReturnValue(stmt, to).

RET(stmt) :- isReturnVoid_Insn(stmt).

RET(stmt), FORMAL_RET(stmt, var) :- ReturnNonvoid_Var(stmt, var).


.decl __OperatorAt(stmt: Instruction, op: symbol)
.input __OperatorAt(filename="OperatorAt.facts")
.decl __Operand_ValidStr(stmt: Instruction, pos: number, oper: symbol)

OPERAND_VAR(stmt, pos, oper) :- AssignOper_From(stmt, pos, oper).
OPERAND_VAR(stmt, pos, oper) :- If_Var(stmt, pos, oper).

__Operand_ValidStr(stmt, pos, str) :-
	AssignOper_FromConstant(stmt, pos, str),
	strlen(str) <= 10, str != "#Infinity", str != "#-Infinity", str != "#InfinityF".
__Operand_ValidStr(stmt, pos, str) :-
	If_Constant(stmt, pos, str),
	strlen(str) <= 10, str != "#Infinity", str != "#-Infinity", str != "#InfinityF".

OPERAND_NUM(stmt, pos, oper) :- __Operand_ValidStr(stmt, pos, str), oper = to_number(str).

UNOP(stmt, to, op) :-
	isAssignUnop_Insn(stmt),
	AssignInstruction_To(stmt, to),
	__OperatorAt(stmt, op).

BINOP(stmt, to, op) :-
	isAssignBinop_Insn(stmt),
	AssignInstruction_To(stmt, to),
	__OperatorAt(stmt, op).

IF(stmt, op, label) :-
	isIf_Insn(stmt),
	If_Target(stmt, label),
	__OperatorAt(stmt, op).

GOTO(stmt, label) :-
	Goto_Target(stmt, label).


// Special handling of native clone() methods, handled as allocation sites.
PlusMethodInvocation(fakeNewSite),
ALLOC(fakeNewSite, toObj, alloc),
HeapAllocation_Type(alloc, type) :-
	(MethodInvocation_Method(invo, "<java.lang.Object: java.lang.Object clone()>") ;
	 MethodInvocation_Method(invo, "<java.util.LinkedList: java.lang.Object clone()>")),
	AssignReturnValue(invo, toObj),
	CAST(_, _, type, toObj),
	alloc = cat("<mock clone allocation for type [", cat(type, "]>")),
	fakeNewSite = cat("<mock clone allocation site for type [", cat(type, "]>")).
