// Context-sensitive pointer analysis with context of 2 object and a
// context-sensitive heap abstraction.

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
.comp StickyTwoObjectSensitiveConfiguration : AbstractConfiguration {

  .decl LibraryOrDependencyMethod(?method:Method)

  LibraryOrDependencyMethod(?method) :-
    Method_DeclaringType(?method, ?class),
    !ApplicationClass(?class).

  .decl DataStructureClass(?class:Type)
  DataStructureClass(?class) :-
    isClassType(?class),
    basic.SubtypeOf(?class, ?superclass),
    (?superclass = "java.util.Map";
     ?superclass = "java.util.Collection";
     ?superclass = "java.util.Dictionary").

  DataStructureClass(?innerClass) :-
    DataStructureClass(?class),
    isClassType(?innerClass),
    match(cat(?class, "$.*"), ?innerClass).
  .output DataStructureClass

  .decl DataStructureMethod(?method:Method)
  DataStructureMethod(?method) :-
    Method_DeclaringType(?method, ?type),
    DataStructureClass(?type).

  .decl ApplicationInvo(?invocation:MethodInvocation)
  ApplicationInvo(?invo) :-
    isMethodInvocation(?invo),
    Instruction_Method(?invo, ?method),
    ApplicationMethod(?method).

  .decl DataStructureInvo(?invocation:MethodInvocation)
  DataStructureInvo(?invo) :-
    isMethodInvocation(?invo),
    Instruction_Method(?invo, ?method),
    DataStructureMethod(?method).

  // In this analysis, the real context is a pair of Values and the real
  // heap context a single Value.
  .type Context  = [ value1:Value, value2:Value ]
  .type HContext = [ value:Value ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    !DataStructureInvo(?invo),
    DataStructureMethod(?tomethod),
    //?hctx = [?hctxValue],
    ?calleeCtx = [?value, ?value].

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    !ApplicationInvo(?invo),
    !DataStructureMethod(?tomethod),
    ?hctx = [?hctxValue],
    ?calleeCtx = [?hctxValue, ?value].

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    Instruction_Method(?invo, ?method),
    Method_DeclaringType(?method, ?class1),
    !DataStructureMethod(?tomethod),
    Method_DeclaringType(?tomethod, ?class2),
    ?class1 != ?class2,
    ?hctx = [?hctxValue],
    ?calleeCtx = [?hctxValue, ?value].

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    Instruction_Method(?invo, ?method),
    Method_DeclaringType(?method, ?class),
    !DataStructureMethod(?tomethod),
    Method_DeclaringType(?tomethod, ?class),
    ?calleeCtx = [?value, ?value].


  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    DataStructureInvo(?invo),
    DataStructureMethod(?tomethod),
    ?calleeCtx = ?callerCtx.

  /*
  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    !ApplicationInvo(?invo),
    ApplicationMethod(?tomethod),
    ?hctx = [?hctxValue],
    ?calleeCtx = [?hctxValue, ?value].

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    !ApplicationInvo(?invo),
    !ApplicationMethod(?tomethod),
    ?calleeCtx = ?callerCtx.
  */
  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = ?callerCtx.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),
    ?ctx = [?ctxValue1, ?ctxValue2],
    ?hctx = [?ctxValue2],
    ?ctxValue1 = ?ctxValue1.

  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = [?value, ?value].

  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value].

#ifdef HEAPDLS
  DynamicContextToContext([?value1, ?value2], ?dynCtx) :-
    DynamicContextHeap1(?heap1, ?dynCtx),
    Value_byDynamicHeap(?heap1, ?value1),
    DynamicContextHeap2(?heap2, ?dynCtx),
    Value_byDynamicHeap(?heap2, ?value2).

  DynamicContextToContext([?value, ?any], ?dynCtx) :-
    DynamicContextHeap1(?heap1, ?dynCtx),
    Value_byDynamicHeap(?heap1, ?value),
    !DynamicContextHeap2(_, ?dynCtx),
    isContext([?value, ?any]).

  DynamicContextToContext(?ctx, ?dynCtx) :-
    isDynamicContext(?dynCtx),
    !DynamicContextHeap1(_, ?dynCtx),
    isImmutableContext(?ctx).

  DynamicContextToHContext([?value], ?dynCtx) :-
    Value_byDynamicHeap(?heap1, ?value),
    DynamicContextHeap1(?heap1, ?dynCtx).

  DynamicContextToHContext(?hctx, ?dynCtx) :-
    isDynamicContext(?dynCtx),
    !DynamicContextHeap1(_, ?dynCtx),
    isImmutableHContext(?hctx).
#endif // HEAPDLS
}
