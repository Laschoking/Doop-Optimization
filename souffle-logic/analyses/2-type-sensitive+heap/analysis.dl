// Context-sensitive pointer analysis with context of 2 types and a
// context-sensitive heap abstraction.

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

.comp TwoTypeSensitivePlusHeapConfiguration : AbstractConfiguration {
  // In this analysis, the real context is a pair of Types and the real heap
  // context a single Type. The type is not always a class type, because of
  //arrays currently being a non-class subtype of Object.
  .type Context  = [ type1:Type, type2:Type ]
  .type HContext = [ type:Type ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    ?hctx = [?hctxType],
    Value_DeclaringType(?value, ?type),
    ?calleeCtx = [?hctxType, ?type].

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = ?callerCtx.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?ctxType1, ?ctxType2],
    ?hctx = [?ctxType2],
    ?ctxType1 = ?ctxType1.

  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = [?value, ?value].

  InitHContextResponse(?value, ?hctx) :-
     InitHContextRequest(?value),
     ?hctx = [?value].

#ifdef HEAPDLS
DynamicContextToContext([?type1, ?type2], ?dynCtx) :-
   DynamicContextHeap1(?heap1, ?dynCtx),
   Value_byDynamicHeap(?heap1, ?value1),
   Value_Type(?value1, ?type1),
   DynamicContextHeap2(?heap2, ?dynCtx),
   Value_byDynamicHeap(?heap2, ?value2),
   Value_Type(?value2, ?type2).


DynamicContextToContext([?type, ?any], ?dynCtx) :-
   DynamicContextHeap1(?heap1, ?dynCtx),
   Value_byDynamicHeap(?heap1, ?value),
   Value_Type(?value, ?type),
   !DynamicContextHeap2(_, ?dynCtx),
   isContext([?type, ?any]).

DynamicContextToContext(?ctx, ?dynCtx) :-
   isDynamicContext(?dynCtx),
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableContext(?ctx).

DynamicContextToHContext([?type], ?dynCtx) :-
   DynamicContextHeap1(?heap1, ?dynCtx),
   Value_byDynamicHeap(?heap1, ?value),
   Value_Type(?value, ?type).

DynamicContextToHContext(?hctx, ?dynCtx) :-
   isDynamicContext(?dynCtx),
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableHContext(?hctx).
#endif // HEAPDLS

    /**
	 * Special calling contexts
	 */
    PlusType("<<initial-context>>").
    PlusType("<<jvm-startup-context>>").
    PlusType("<<jvm-startup-hcontext>>").
    PlusType("<<clinit-context>>").
    PlusType("<<immutable-context>>").
    PlusType("<<immutable-hcontext>>").
}

      
