#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

.comp TwoTypeObjectSensitivePlusHeapConfiguration : AbstractConfiguration {
// In this analysis, the real context is a Type and a Value and the
// real heap context a single Value.
.type Context  = [ type:Type, value:Value ]
.type HContext = [ value:Value ]
         
// .decl CachedMerge(?hctx:HContext, ?value:Value, ?calleeCtx:Context)
// .decl CachedMergeStatic(?callerCtx:Context, ?invo:MethodInvocation, ?calleeCtx:Context)

ContextResponse(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, ?calleeCtx) :-
  ContextRequest(?callerCtx, ?hctx, ?invocation, ?value, ?tomethod, _),
  ?hctx = [?hctxValue],
  Value_DeclaringType(?hctxValue, ?type), 
  ?calleeCtx = [?type, ?value],
  ?tomethod = ?tomethod.
/*
 * The above gives us an upper bound of the receiver allocator's allocator's dynamic type!
 * Another option is the exact dynamic type of the allocator object. In that case we have:
 * Value_Type(hctxValue, type) instead of Value_DeclaringType(hctxValue, type)
 */

// For this analysis, static calls just keep the same context as the
// caller.
StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
  StaticContextRequest(?callerCtx, ?invo),
  ?calleeCtx = ?callerCtx.

RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
  RecordContextRequest(?ctx, ?value, ?var),
  ?ctx = [?ctxType, ?ctxValue],
  ?hctx = [?ctxValue],
  ?ctxType = ?ctxType.

InitContextResponse(?value, ?ctx) :-
  InitContextRequest(?value),
  ?ctx = ["java.lang.String", ?value].

InitHContextResponse(?value, ?ctx) :-
  InitHContextRequest(?value),
  ?ctx = [?value].


}
