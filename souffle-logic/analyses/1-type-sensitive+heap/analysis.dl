// Context-sensitive pointer analysis with context of 1 type and a
// context-sensitive heap abstraction.

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

.comp OneTypeSensitivePlusHeapConfiguration : AbstractConfiguration {

  // In this analysis, both the real context and the real heap context are Types
  // The type is now always a class type, because of arrays currently being a
  // non-class subtype of Object
  .type Context  = [ type:Type ]
  .type HContext = [ type:Type ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    Value_DeclaringType(?value, ?type), 
    ?calleeCtx = [?type].

  // For this analysis, static calls just keep the same context as the
  // caller.
  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?calleeCtx = ?callerCtx.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?type],
    ?hctx = [?type].

  InitContextResponse(?type, ?ctx) :-
    InitContextRequest(?type),
    ?ctx = [?type].

  InitHContextResponse(?type, ?hctx) :-
    InitHContextRequest(?type),
    ?hctx = [?type].

// Dynamic analysis
#ifdef HEAPDLS
DynamicContextToContext([?type], ?dynCtx) :-
   DynamicContextHeap1(?heap1, ?dynCtx),
   Value_byDynamicHeap(?heap1, ?value),
   Value_Type(?value, ?type).

DynamicContextToContext(?ctx, ?dynCtx) :-
   isDynamicContext(?dynCtx),
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableContext(?ctx).

DynamicContextToHContext([?type], ?dynCtx) :-
   DynamicContextHeap1(?heap1, ?dynCtx),
   Value_byDynamicHeap(?heap1, ?value),
   Value_Type(?value, ?type).

DynamicContextToHContext(?hctx, ?dynCtx) :-
   isDynamicContext(?dynCtx),
   !DynamicContextHeap1(_, ?dynCtx),
   isImmutableHContext(?hctx).
#endif // HEAPDLS

    /**
	 * Special calling contexts
	 */
    PlusType("<<initial-context>>").
    PlusType("<<jvm-startup-context>>").
    PlusType("<<clinit-context>>").
    PlusType("<<immutable-context>>").
    PlusType("<<immutable-hcontext>>").
}
