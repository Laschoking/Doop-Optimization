// Context-sensitive pointer analysis with context of 2 objects
// (AND for static calls 1 call-site).
#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"

.comp SelectiveTwoObjectSensitivePlusHeapConfiguration : AbstractConfiguration {

// Do not indent: this breaks some cpp versions.
#define NO_INVOCATION_CONTEXT "<<no-call-site-context>>"

  // The real context is a pair of Value AND a MethodInvocation (for
  // static calls) sometimes.  The real heap context is a single Value.
  // Keeping mapping functions is the way to handle analyses where HContext =
  // Context (since the language considers them different types).
  .type Context  = [ elem1:symbol, elem2:symbol, value:Value ]
  .type HContext = [ value:Value ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    ?hctx = [?hctxValue],
    ?calleeCtx = [NO_INVOCATION_CONTEXT, ?hctxValue, ?value].

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?callerCtx = [?callerCtxElement1, ?callerCtxElement2, ?callerCtxValue],
    ?calleeCtx = [?callerCtxElement2, ?invo, ?callerCtxValue],
    ?callerCtxElement1 = ?callerCtxElement1.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?ctxElement1, ?ctxElement2, ?ctxValue],
    ?hctx = [?ctxValue],
    ?ctxElement1 = ?ctxElement1,
    ?ctxElement2 = ?ctxElement2.

  InitContextResponse(?value, ?ctx) :-
    InitContextRequest(?value),
    ?ctx = [NO_INVOCATION_CONTEXT, ?value, ?value].

  InitHContextResponse(?value, ?hctx) :-
    InitHContextRequest(?value),
    ?hctx = [?value].
}
