// Context-sensitive pointer analysis with context of 2 call site and
// a context-sensitive heap abstraction of 1 call site

#include "../../main/single-phase-analysis.dl"
#include "../../main/configuration.dl"
 
// In this analysis, the real context is a pair of MethodInvocations and the
// real heap context a single MethodInvocation. Keeping mapping functions is
// the way to handle analyses where HContext = Context (since the language
// considers them different types).
.comp TwoCallSiteSensitivePlusHeapConfiguration : AbstractConfiguration {

  .type Context = [ invocation1:MethodInvocation, invocation2:MethodInvocation ]
  .type HContext = [ invocation:MethodInvocation ]

  ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, ?calleeCtx) :-
    ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?tomethod, _),
    ?callerCtx = [?invocation1, ?invocation2],
    ?calleeCtx = [?invocation2, ?invo],
    ?invocation1 = ?invocation1.

  StaticContextResponse(?callerCtx, ?invo, ?calleeCtx) :-
    StaticContextRequest(?callerCtx, ?invo),
    ?callerCtx = [?invocation1, ?invocation2],          
    ?calleeCtx = [?invocation2, ?invo],
    ?invocation1 = ?invocation1.

  RecordContextResponse(?ctx, ?value, ?var, ?hctx) :-
    RecordContextRequest(?ctx, ?value, ?var),      
    ?ctx = [?invocation1, ?invocation2], 
    ?hctx = [?invocation2],
    ?invocation1 = ?invocation1.

  InitContextResponse(?invo, ?ctx) :-
    InitContextRequest(?invo),
    ?ctx = [?invo, ?invo].

  InitHContextResponse(?invo, ?hctx) :-
    InitHContextRequest(?invo),
    ?hctx = [?invo].

  .decl StartupInvocation(?startupInvocation:MethodInvocation)

  StartupInvocation(?startupInvocation) :-
    ?startupInvocation = "<<jvm-startup-context>>",
    isMethodInvocation(?startupInvocation).

  /**
   * Special calling contexts
   */

  // PlusMethodInvocation macro should be used here.
  // However, it is not as souffle reports syntax error
  // if we try to assert two facts at once, e.g.,
  // isInstuction("foo"), isMethodInvocation("foo").
  isInstruction("<<initial-context>>").
  isMethodInvocation("<<initial-context>>").

  isInstruction("<<jvm-startup-context>>").
  isMethodInvocation("<<jvm-startup-context>>").

  isInstruction("<<jvm-startup-hcontext>>").
  isMethodInvocation("<<jvm-startup-hcontext>>").

  isInstruction("<<clinit-context>>").
  isMethodInvocation("<<clinit-context>>").

  isInstruction("<<immutable-context>>").
  isMethodInvocation("<<immutable-context>>").

  isInstruction("<<immutable-hcontext>>").
  isMethodInvocation("<<immutable-hcontext>>").
}
