#pragma once
#include "common.dl"

.decl MainArrayVar(array: Var, name: symbol, types: symbol)
.decl ArrayDims(array: Var, dim: number, size: number)
.decl ArrayLoad(to: Var, from: Var, index: number)
.decl ArrayStore(to: Var, index: number, value: number)

.output MainArrayVar
.output ArrayDims
.output ArrayLoad
.output ArrayStore

MainArrayVar(array, name, types) :-
	AllocArray(stmt, array, types),
	InterestingStmt(stmt),
	Var_SimpleName(array, name),
	!ASTORE(_, _, array).

// Array Allocation
ArrayDims(array, 0, size) :-
	AllocArray(stmt, array, _),
	InterestingStmt(stmt),
	IVALUE_ArraySize_EXT(stmt, size).

// Allocation of intermediate arrays (for multidimensional arrays)
ArrayDims(baseArray, dim + 1, size) :-
	ASTORE(stmt, baseArray, array),
	InterestingStmt(stmt),
	ArrayDims(array, dim, size).

// Flows propagation
ArrayDims(otherArray, dim, size) :-
	ArrayDims(array, dim, size),
	Flows(array, otherArray).

// Propagate backwards (after flow propagation)
ArrayDims(toArray, dim - 1, size) :-
	ALOAD(stmt, toArray, baseArray),
	InterestingStmt(stmt),
	ArrayDims(baseArray, dim, size), dim > 0.

// to = from[index]
// Due to SSA, `to` will appear only once
ArrayLoad(to, from, index) :-
	ALOAD(stmt, to, from),
	InterestingStmt(stmt),
	IVALUE_ArrayIndex(stmt, index).

// to[index] = value
ArrayStore(to, index, value) :-
	ASTORE(stmt, to, valueVar),
	InterestingStmt(stmt),
	IVALUE_ArrayIndex(stmt, index),
	IVALUE_Var(valueVar, value).