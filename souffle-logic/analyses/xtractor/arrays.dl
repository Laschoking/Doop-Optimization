#pragma once
#include "common.dl"

.decl OUT_ArrayInfo(array: Var, name: symbol, types: symbol)
.decl OUT_ArrayDims(array: Var, dim: number, size: number)
.decl OUT_ArrayLoad(to: Var, from: Var, index: number)
.decl OUT_ArrayStore(to: Var, index: number, value: number)

.output OUT_ArrayInfo
.output OUT_ArrayDims
.output OUT_ArrayLoad
.output OUT_ArrayStore

OUT_ArrayInfo(array, name, type) :-
	InterestingStmt(stmt),
	AssignInstruction_To(stmt, array),
	Var_Type(array, type),
	Var_SimpleName(array, name),
	isArrayType(type),
	!StoreArrayIndex_From(_, array).

// Array Allocation
OUT_ArrayDims(array, 0, size) :-
	InterestingStmt(stmt),
	AssignInstruction_To(stmt, array),
	IVALUE_ArraySize_EXT(stmt, size).

// Allocation of intermediate arrays (for multidimensional arrays)
OUT_ArrayDims(baseArray, dim + 1, size) :-
	InterestingStmt(stmt),
	(ASTORE_VAR(stmt, baseArray, _, array) ;
	 ASTORE_NUM(stmt, baseArray, _, array)),
	OUT_ArrayDims(array, dim, size).

OUT_ArrayDims(otherArray, dim, size) :-
	OUT_ArrayDims(array, dim, size),
	Flows(array, otherArray).

OUT_ArrayDims(toArray, dim - 1, size) :-
	InterestingStmt(stmt),
	(ALOAD_VAR(stmt, toArray, baseArray, _) ;
	 ALOAD_NUM(stmt, toArray, baseArray, _)),
	OUT_ArrayDims(baseArray, dim, size).

// to = from[index]
// Due to SSA, `to` will appear only once
OUT_ArrayLoad(to, from, index) :-
	InterestingStmt(stmt),
	(ALOAD_VAR(stmt, to, from, _) ;
	 ALOAD_NUM(stmt, to, from, _)),
	IVALUE_ArrayIndex_EXT(stmt, index).

// to[index] = value
OUT_ArrayStore(to, index, value) :-
	InterestingStmt(stmt),
	(ASTORE_VAR(stmt, to, _, valueVar) ;
	 ASTORE_NUM(stmt, to, _, valueVar)),
	IVALUE_ArrayIndex_EXT(stmt, index),
	IVALUE_Var(valueVar, value).