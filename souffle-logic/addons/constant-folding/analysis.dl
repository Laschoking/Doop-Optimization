.type Operator <: symbol
.type MethodInv <: symbol

.decl AssignUnary(?instr:Instruction, ?var:Var, ?value:number, ?meth:symbol, ?use:number)
.decl AssignBinary(?instr:Instruction, ?var: symbol, ?left:number, ?right:number, ?meth:symbol, ?prev_use1:number, ?prev_use2:number)

.decl AssignBinaryNonZeroRight(?instr:Instruction, ?var:Var, ?left:number, ?right:number, ?meth:symbol, ?prev_use1:number, ?prev_use2:number)

.decl IntConstFolding(?instruction:Instruction, ?variable:Var, ?value:number, ?meth:symbol, ?use:number)
.decl IntNonZeroConstFolding(?instruction:Instruction, ?variable:Var, ?value:number, ?meth:symbol, ?use:number)
.decl BoolConstFolding(?instruction:Instruction, ?variable:Var, ?value:number, ?method:symbol)


.decl IntConstant(?instr:Instruction, ?var:Var, ?value:number, ?method:symbol, ?type:symbol)
.decl BoolConstant(?instr:Instruction, ?var:Var, ?value:number, ?meth:symbol)

.decl AssignOperFromConstant(?instr:Instruction, ?pos:number, ?from:symbol)
.input AssignOperFromConstant(IO="file", filename="AssignOperFromConstant.facts", delimiter="\t")

.output IntConstant
.output BoolConstant
.output IntConstFolding
.output IntNonZeroConstFolding
.output BoolConstFolding
.output AssignBinary



//.decl InstructionInPhiNode(?insn:Instruction, ?headInsn:Instruction)
//.input InstructionInPhiNode(IO="file", filename="InstructionInPhiNode.csv", delimiter="\t")

//.decl PhiNodeHead(?insn:Instruction, ?headInsn:Instruction)
//.input PhiNodeHead(IO="file", filename="PhiNodeHead.csv", delimiter="\t")

//.decl Dominates(?dominator:Instruction, ?insn:Instruction)
//.input Dominates(IO="file", filename="Dominates.csv", delimiter="\t")

//.decl BasicBlockTail(?as:Instruction, ?ass:Instruction)
//.input BasicBlockTail(IO="file", filename="BasicBlockTail.csv", delimiter="\t")

//.decl BasicBlockBegin(?ass:Instruction)
//.input BasicBlockBegin(IO="file", filename="BasicBlockBegin.csv", delimiter="\t")

//.decl OptInstructionFromMethodIndex(?method:Method, ?insNr:number, ?varAssign:Instruction)
//.input OptInstructionFromMethodIndex(IO="file", filename="OptInstructionFromMethodIndex.csv", delimiter="\t")


//.decl BasicBlockHead(?inst:Instruction, ?ins:Instruction)
//.input BasicBlockHead(IO="file", filename="BasicBlockHead.csv", delimiter="\t")

//.decl Instruction_Next(?inst:Instruction,?inst1:Instruction)
//.input Instruction_Next(IO="file", filename="Instruction_Next.csv", delimiter="\t")

//.decl MaySuccessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
//.input MaySuccessorBBModuloThrow(IO="file", filename="MaySuccessorBBModuloThrow.csv", delimiter="\t")

//.decl MayPredecessorBBModuloThrow(?inst:Instruction, ?inst1:Instruction)
//.input MayPredecessorBBModuloThrow(IO="file", filename="MayPredecessorBBModuloThrow.csv", delimiter="\t")

//.decl NextInSamePhiNode(?inst:Instruction,?inst1:Instruction)
//.input NextInSamePhiNode(IO="file", filename="NextInSamePhiNode.csv", delimiter="\t")

.decl IfConstant(?instr:Instruction, ?n:number, ?val:number)
.input IfConstant(IO="file", filename="IfConstant.facts", delimiter="\t")


.decl AllPhiNodes(?phiNode:Instruction) 
.decl StaticCondition(?instr:Instruction, ?value:number)
.decl NrOfPhiNodesPerBlock(?phiNode:Instruction, ?n : number)
.decl OriginalPhiBranches(?phiNode:Instruction, ?preBB:Instruction,?lineNr:number)
.decl OrderPhiBranchesBB(?phiNode:Instruction, ?preBB :Instruction, ?order:number)
.decl PhiBeginningBB(?phiNode:Instruction)
.decl IfNodeIndex(?method:Method, ?ifNode:Instruction,?nr:number)
.decl IfNode(?ifNode:Instruction)
.decl OrderPhiBlock(?phiNode:Instruction, ?postPhi:Instruction, ?order:number)
.decl ApplyPhiConstFolding(?rootIfNode:Instruction, ?phiNode:Instruction)
.decl PossiblePhiConstFolding(?rootIfNode:Instruction,?BB1:Instruction,?BB2:Instruction)
.decl IsConstant(?var:Var)
.decl PhiNodeContainsConstant(?phiNode:Instruction,?phiNode1:Instruction)
.decl LinkStartPhiToLaterPhiBlocks(?startPhiNode:Instruction, ?otherPhiNode:Instruction)
.decl LinkConstPhiNodesToOrder(?startPhiNode:Instruction, ?newPhiNode1:Instruction,?order:number)
.decl NrOfPredBB(?BB:Instruction, ?b:number)
.decl NrOfSuccBB(?BB2:Instruction, ?n:number)
.decl PhiBeginningPhiBlock(?phi:Instruction)
.decl PhiBBHasConst(?phiNode:Instruction)
.decl PhiNodeIndex(?phiNode:Instruction,?phiNode1:Instruction, ?lineNr:number)
.decl RootIfNode(?ifNode:Instruction, ?phiNode:Instruction, ?lineNr:number)
.decl LoopPhiBeginning(?phiNode:Instruction)

.output LoopPhiBeginning
.output NrOfSuccBB
.output RootIfNode
.output LinkConstPhiNodesToOrder
.output PhiNodeIndex
.output PhiBBHasConst
.output PhiBeginningPhiBlock
.output NrOfPredBB
.output LinkStartPhiToLaterPhiBlocks
.output PhiNodeContainsConstant
.output IsConstant
.output PossiblePhiConstFolding
.output ApplyPhiConstFolding
.output OrderPhiBlock
.output PhiBeginningBB
.output OriginalPhiBranches
.output OrderPhiBranchesBB
.output AllPhiNodes
.output NrOfPhiNodesPerBlock
.output StaticCondition
.output IfNodeIndex


// Constant Folding

// Special rule that is needed in order to avoid division by zero

IntNonZeroConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    IntConstFolding(?instr, ?var, ?value, ?meth, ?use),
    ?value != 0,
    ?use < 5.

// Identify unary assignments and the propagated value

AssignUnary(?instr, ?var, ?value, ?meth, ?use) :-
    _AssignUnop(?instr, _, ?var, ?meth),
    _AssignOperFrom(?instr, _, ?var1),
    IntConstFolding(_, ?var1, ?value, ?meth, ?use).

// Identify binary assignments and the propagated values

AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?prev_use1, ?prev_use2) :-
    _AssignBinop(?instr, _, ?var, ?meth),
    _AssignOperFrom(?instr, ?pos1, ?right_oper1),
    _AssignOperFrom(?instr, ?pos2, ?right_oper2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?right_oper1, ?left, ?meth, ?prev_use1),
    IntConstFolding(_, ?right_oper2, ?right, ?meth, ?prev_use2).


AssignBinary(?instr, ?var, ?left, ?right, ?meth, 0,?prev_use2) :-
    _AssignBinop(?instr, _, ?var, ?meth),
    AssignOperFromConstant(?instr, ?pos1, ?x),
    ((contains("L", ?x),
    ?z = strlen(?x),
    ?s = substr(?x,0,?z-1),
    ?left = to_number(?s));
    (!contains("L", ?x),
    ?left = to_number(?x))),
    _AssignOperFrom(?instr, ?pos2, ?right_oper2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?right_oper2, ?right, ?meth, ?prev_use2).  

AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?prev_use1 , 0) :-
    _AssignBinop(?instr, _, ?var, ?meth),
    _AssignOperFrom(?instr, ?pos1, ?right_oper1),
    AssignOperFromConstant(?instr, ?pos2, ?x),
    ((contains("L", ?x),
    ?z = strlen(?x),
    ?s = substr(?x,0,?z-1),
    ?right = to_number(?s));
    (!contains("L", ?x),
    ?right = to_number(?x))),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?right_oper1, ?left, ?meth, ?prev_use1).

AssignBinaryNonZeroRight(?instr, ?var, ?left, ?right, ?meth, ?prev_use1, ?prev_use2) :-
    _AssignBinop(?instr, _, ?var, ?meth),
    _AssignOperFrom(?instr, ?pos1, ?right_oper1),
    _AssignOperFrom(?instr, ?pos2, ?right_oper2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?right_oper1, ?left, ?meth, ?prev_use1),
    IntNonZeroConstFolding(_, ?right_oper2, ?right, ?meth, ?prev_use2).
  

// Constant Folding relations for primitive integers
// The computations are bounded based on the heuristic of how many times has an integer
// constant been used, up to the current instruction's depth 

IntConstFolding(?instr, ?var, ?value, ?meth, 1) :-
    IntConstant(?instr, ?var, ?value, ?meth, _).

IntConstFolding(?instr, ?to, ?value, ?meth, ?use) :-
    _AssignLocal(?instr, _, ?from, ?to, ?meth),
    IntConstFolding(_, ?from, ?value, ?meth, ?prev_use),
    !AllPhiNodes(?instr),
    ?prev_use < 5, ?use = ?prev_use + 1.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignUnary(?instr, ?var, ?left, ?meth, ?prev_use), 
    _OperatorAt(?instr, "-"), 
    ?prev_use < 5, ?use = ?prev_use + 1,
    ?left != 0,
    ?value = - ?left.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignUnary(?instr, ?var, ?left, ?meth, ?prev_use), 
    _OperatorAt(?instr, "-"),
    ?prev_use < 5, ?use = ?prev_use + 1,
    ?left = 0,
    ?value = 0.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "+"),
    ?use1 < 5, ?use2 < 5, ?use1 < ?use2, ?use = ?use2 + 1,
    ?value = ?left + ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "+"),
    ?use1 < 5, ?use2 < 5, ?use1 >= ?use2, ?use = ?use1 + 1,
    ?value = ?left + ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "-"),
    ?use1 < 5, ?use2 < 5, ?use1 < ?use2, ?use = ?use2 + 1,
    ?use < 5,
    ?value = ?left - ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "-"),
    ?use1 < 5, ?use2 < 5, ?use1 >= ?use2, ?use = ?use1 + 1,
    ?use < 5,
    ?value = ?left - ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "*"),
    ?use1 < 5, ?use2 < 5, ?use1 < ?use2, ?use = ?use2 + 1,
    ?use < 5,
    ?value = ?left * ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinary(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "*"),
    ?use1 < 5, ?use2 < 5, ?use1 >= ?use2, ?use = ?use1 + 1,
    ?use < 5,
    ?value = ?left * ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinaryNonZeroRight(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "/"),
    ?use1 < 5, ?use2 < 5, ?use1 < ?use2, ?use = ?use2 + 1,
    ?use < 5,
    ?value = ?left / ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinaryNonZeroRight(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "/"),
    ?use1 < 5, ?use2 < 5, ?use1 >= ?use2, ?use = ?use1 + 1,
    ?use < 5,
    ?value = ?left / ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinaryNonZeroRight(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "%"),
    ?use1 < 5, ?use2 < 5, ?use1 < ?use2, ?use = ?use2 + 1,
    ?use < 5,
    ?value = ?left % ?right.

IntConstFolding(?instr, ?var, ?value, ?meth, ?use) :-
    AssignBinaryNonZeroRight(?instr, ?var, ?left, ?right, ?meth, ?use1, ?use2),
    _OperatorAt(?instr, "%"),
    ?use1 < 5, ?use2 < 5, ?use1 >= ?use2, ?use = ?use1 + 1,
    ?use < 5,
    ?value = ?left % ?right.



// Constant propagation for primitive boolean
// TODO: Folding of conditionals (introduce a dummy if-var target

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    BoolConstant(?instr, ?var, ?value, ?meth).

BoolConstFolding(?instr, ?to, ?value, ?meth) :-
    _AssignLocal(?instr, _, ?from, ?to, ?meth),
    !AllPhiNodes(?instr),
    BoolConstFolding(_, ?from, ?value, ?meth).


BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    _AssignUnop(?instr, _, ?var, ?meth),
    _AssignOperFrom(?instr, _, ?var1),
    BoolConstFolding(_, ?var1, ?left, ?meth),
    _OperatorAt(?instr, "-"),
    ?left > 0,
    ?value = 0.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    _AssignUnop(?instr, _, ?var, ?meth),
    _AssignOperFrom(?instr, _, ?var1),
    BoolConstFolding(_, ?var1, ?left, ?meth),
    _OperatorAt(?instr, "-"),
    ?left < 1,
    ?value = 1.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "<"),
    ?left < ?right,
    ?value = 1.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "<"),
    ?left >= ?right,
    ?value = 0.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, ">"),
    ?left > ?right,
    ?value = 1.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, ">"),
    ?left <= ?right,
    ?value = 0.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, ">="),
    ?left >= ?right,
    ?value = 1.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, ">="),
    ?left < ?right,
    ?value = 0.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "<="),
    ?left <= ?right,
    ?value = 1.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "<="),
    ?left > ?right,
    ?value = 0.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "!="),
    ?left != ?right,
    ?value = 1.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "!="),
    ?left = ?right,
    ?value = 0.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "=="),
    ?left = ?right,
    ?value = 1.

BoolConstFolding(?instr, ?var, ?value, ?meth) :-
    isIf_Insn(?instr),
    Instruction_Method(?instr, ?meth),
    DummyIf_Var(?instr, ?var),
    If_Var(?instr, ?pos1, ?var1),
    If_Var(?instr, ?pos2, ?var2),
    ?pos1 < ?pos2,
    IntConstFolding(_, ?var1, ?left, ?meth, _),
    IntConstFolding(_, ?var2, ?right, ?meth, _),
    _OperatorAt(?instr, "=="),
    ?left != ?right,
    ?value = 0.

IntConstant(?instr, ?var, to_number(?value), ?meth, ?type) :-
    isAssignNumConstant_Insn(?instr),
    Instruction_Method(?instr, ?meth),    
    AssignInstruction_To(?instr, ?var),
    AssignNumConstant_Id(?instr, ?value),
    !AllPhiNodes(?instr),
    _Var_Type(?var, ?type),
    (Type_int(?type) ; Type_byte(?type) ;
     Type_short(?type)).

BoolConstant(?instr, ?var, to_number(?value), ?meth) :-
    isAssignNumConstant_Insn(?instr),
    Instruction_Method(?instr, ?meth),    
    AssignInstruction_To(?instr, ?var),
    AssignNumConstant_Id(?instr, ?value),
    !AllPhiNodes(?instr),
    _Var_Type(?var, ?type),
    Type_boolean(?type).




//Int Condition <=

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"<="),
    ((?value = 1, ?left <= ?right);
    (?value = 0, ?left > ?right)).

StaticCondition(?ifNode,?value) :-
    IfConstant(?ifNode, ?pos1, ?left),
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"<="),
    ((?value = 1, ?left <= ?right);
    (?value = 0, ?left > ?right)).

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"<="),
    ((?value = 1, ?left <= ?right);
    (?value = 0, ?left > ?right)).

//Int Condition >=

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,">="),
    ((?value = 1, ?left >= ?right);
    (?value = 0, ?left < ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,">="),
    ((?value = 1, ?left >= ?right);
    (?value = 0, ?left < ?right)).

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,">="),
    ((?value = 1, ?left >= ?right);
    (?value = 0, ?left < ?right)).

//Int Condition ==
StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"=="),
    ((?value = 1, ?left = ?right);
    (?value = 0, ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"=="),
    ((?value = 1, ?left = ?right);
    (?value = 0, ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"=="),
    ((?value = 1, ?left = ?right);
    (?value = 0, ?left != ?right)).


//Int Condition !=
StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    IntConstFolding(_,?var1,?left,_, _),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"!="),
    ((?value = 1, ?left != ?right);
    (?value = 0, ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var2,?right,_, _),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"!="),
    ((?value = 1, ?left != ?right);
    (?value = 0, ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    _IfVar(?ifNode, ?pos2, ?var2), 
    IntConstFolding(_,?var1,?left,_, _),
    IntConstFolding(_,?var2,?right,_,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"!="),
    ((?value = 1, ?left != ?right);
    (?value = 0, ?left = ?right)).


//Boolean Condition ==
StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    BoolConstFolding(_,?var1,?left,_),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"=="),
    ((?value = 1 , ?left = ?right);
    (?value = 0 , ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    _IfVar(?ifNode, ?pos2, ?var2), 
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"=="),
    ((?value = 1 , ?left = ?right);
    (?value = 0 , ?left != ?right)).

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1),
    _IfVar(?ifNode, ?pos2, ?var2),  
    BoolConstFolding(_,?var1,?left,_),
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"=="),
    ((?value = 1 , ?left = ?right);
    (?value = 0 , ?left != ?right)).


    
//Boolean Condition !=
StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    BoolConstFolding(_,?var1,?left,_),
    IfConstant(?ifNode, ?pos2, ?right),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"!="),
    ((?value = 1 , ?left != ?right);
    (?value = 0 , ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    IfConstant(?ifNode, ?pos1, ?left),
    _IfVar(?ifNode, ?pos2, ?var2), 
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"!="),
    ((?value = 1 , ?left != ?right);
    (?value = 0 , ?left = ?right)).

StaticCondition(?ifNode,?value) :- 
    _IfVar(?ifNode, ?pos1, ?var1), 
    _IfVar(?ifNode, ?pos2, ?var2), 
    BoolConstFolding(_,?var1,?left,_),
    BoolConstFolding(_,?var2,?right,_),
    ?pos1 < ?pos2,
    _OperatorAt(?ifNode,"!="),
    ((?value = 1 , ?left != ?right);
    (?value = 0 , ?left = ?right)).


IsConstant(?var):-
    IntConstFolding(_, ?var, _, _,_);
    BoolConstFolding(_, ?var, _ ,_).

IfNode(?ifNode),
IfNodeIndex(?method, ?ifNode,?lineNr):-
    _IfVar(?ifNode,_,_),
    _If(?ifNode, ?lineNr,_,?method).

PhiBeginningPhiBlock(?phiNode):-
    PhiNodeHead(?phiNode, ?phiNode).


PhiNodeIndex(?phiNode,?phiNode1, ?lineNr),
AllPhiNodes(?phiNode1):-
    PhiNodeHead(?phiNode1,?phiNode),
    _AssignLocal(?phiNode1, ?lineNr, _,_,_).

PhiBeginningBB(?phiNode):-
    InstructionInPhiNode(?phiNode,?phiNode),
    !LoopPhiBeginning(?phiNode).

LoopPhiBeginning(?phiNode):-
    InstructionInPhiNode(?phiNode,?phiNode),
    Dominates(?phiNode, ?BB),
    MaySuccessorBBModuloThrow(?phiNode, ?BB).

NrOfPhiNodesPerBlock(?phiNode, ?n):-
    PhiBeginningPhiBlock(?phiNode),
    ?n = count : {PhiNodeHead(_, ?phiNode)}.

//ließe sich auch auf PhiBeginningBB runterschrumpfen
NrOfSuccBB(?BB1, ?b),
NrOfPredBB(?BB1,?c):-
    BasicBlockBegin(?BB1),
    ?c = count : {MaySuccessorBBModuloThrow(?BB1,_)},
    ?b = count : {MayPredecessorBBModuloThrow(?BB1,_)}.


PhiNodeContainsConstant(?phiNode, ?phiNode1):-
    PhiNodeHead(?phiNode1,?phiNode),
    _AssignLocal(?phiNode1, _, ?from ,_,_),
    IsConstant(?from).

PhiBBHasConst(?phiNode):-
    PhiNodeContainsConstant(?phiNode,_);
    (LinkStartPhiToLaterPhiBlocks(?phiNode, ?nextPhiNode),
    PhiNodeContainsConstant(?nextPhiNode,_)).

//for different Phi-nodes in same BB
LinkStartPhiToLaterPhiBlocks(?startPhiNode, ?startPhiNode):-
    PhiBeginningBB(?startPhiNode).

LinkStartPhiToLaterPhiBlocks(?startPhiNode,?newPhiNode):-
    PhiBeginningBB(?startPhiNode),
    PhiBeginningPhiBlock(?newPhiNode),
    PhiNodeHead(?startPhiNode1, ?startPhiNode),  
    BasicBlockHead(?newPhiNode,?startPhiNode1),
    NrOfPhiNodesPerBlock(?startPhiNode,?c),
    NrOfPhiNodesPerBlock(?newPhiNode,?c).
    
//could also use NextPredecessorToSameBB but unsure how good it works
//only start if at least one constant in Phi-node

OriginalPhiBranches(?phiNode, ?preBB,?lineNr):-
    PhiBeginningBB(?phiNode),
    NrOfPhiNodesPerBlock(?phiNode,?d),
    NrOfPredBB(?phiNode, ?d),
    MaySuccessorBBModuloThrow(?phiNode,?preBB),
    OptInstructionFromMethodIndex(_, ?lineNr,?preBB),
    //PhiBBHasConst(?phiNode),
    _AssignLocal(?phiNode,?lineNr1 ,_,_,?method),
    IfNodeIndex(?method,?ifNode, ?lineNr2),
    //StaticCondition(?ifNode, _),
    ?lineNr2 < ?lineNr1.



OrderPhiBranchesBB(?phiNode, ?BB, ?order):-
    OriginalPhiBranches(?phiNode , ?BB, ?lineNr1),
    ?order = count : {OriginalPhiBranches(?phiNode, _ , ?lineNrBB), ?lineNr1 < ?lineNrBB}.


OrderPhiBlock(?phiNode, ?phiNode1,?order):-
    PhiBeginningPhiBlock(?phiNode),
    PhiNodeIndex(?phiNode,?phiNode1, ?lineNrPhi1),
    ?order = count : {PhiNodeIndex(?phiNode, _ , ?lineNrPhi),  ?lineNrPhi1 < ?lineNrPhi}.


LinkConstPhiNodesToOrder(?startPhiNode, ?newPhiNode1,?order):-
    LinkStartPhiToLaterPhiBlocks(?startPhiNode,?newPhiNode),
    PhiNodeContainsConstant(?newPhiNode, ?newPhiNode1),
    OrderPhiBlock(?newPhiNode, ?newPhiNode1, ?order).


RootIfNode(?ifNode, ?phiNode, ?lineNr):-
    PhiBeginningBB(?phiNode),
    //PhiBBHasConst(?phiNode),
    Dominates(?dom, ?phiNode),
    ?dom != ?phiNode,
    PhiNodeIndex(?phiNode,?phiNode,?lineNr),
    BasicBlockTail(?dom, ?ifNode),
    IfNode(?ifNode).

//each If-Root may dominate multiple Phi-nodes -> choose the one with lowest Index

PossiblePhiConstFolding(?rootIfNode, ?nextBB, ?phiNode):-
    RootIfNode(?rootIfNode, ?phiNode, ?l),
    StaticCondition(?rootIfNode, ?value),
    ((?value = 0,
    Instruction_Next(?rootIfNode,?nextBB));
    (?value = 1, 
    JumpTarget(?nextBB, ?rootIfNode))),
    ?l = min ?lineNr : {RootIfNode(?rootIfNode,_,?lineNr)}.

PossiblePhiConstFolding(?rootIfNode, ?BB2, ?phiNode):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    !OrderPhiBranchesBB(?phiNode, ?BB1, _),
    NrOfSuccBB(?BB1,?a),
    ?a > 1, 
    BasicBlockTail(?BB1, ?tailNode),
    IfNode(?tailNode),
    StaticCondition(?tailNode, ?value),
    ((?value = 0,
    Instruction_Next(?tailNode,?BB2));
    (?value = 1, 
    JumpTarget(?BB2, ?tailNode))).

PossiblePhiConstFolding(?rootIfNode, ?BB2, ?phiNode):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    !OrderPhiBranchesBB(?phiNode,?BB1,_),
    NrOfSuccBB(?BB1,1),
    MayPredecessorBBModuloThrow(?BB1, ?BB2).


ApplyPhiConstFolding(?rootIfNode,?phiNode1):-
    PossiblePhiConstFolding(?rootIfNode, ?BB1, ?phiNode),
    OrderPhiBranchesBB(?phiNode, ?BB1, ?order),
    LinkConstPhiNodesToOrder(?phiNode, ?phiNode1,?order).


BoolConstFolding(?phiNode, ?to, ?value, ?meth) :-
    ApplyPhiConstFolding(_, ?phiNode),
    _AssignLocal(?phiNode, _, ?from, ?to, ?meth),
    BoolConstFolding(_, ?from, ?value ,_).

IntConstFolding(?phiNode, ?to, ?value, ?meth, ?use+1) :-
    ApplyPhiConstFolding(_, ?phiNode),
    _AssignLocal(?phiNode, _, ?from, ?to, ?meth),
    IntConstFolding(_, ?from, ?value ,_, ?use).