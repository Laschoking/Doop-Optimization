#include "../../commonMacros.dl"
#include "rules-servlets-only.dl"

// Methods with these annotations are servlet entry points
.decl ServletMethodEP(m: Method)
ServletMethodEP(?method) :-
    (Method_Annotation(?method, "org.springframework.web.bind.annotation.RequestMapping");
     Method_Annotation(?method, "javax.ws.rs.DELETE");
     Method_Annotation(?method, "javax.ws.rs.GET");
     Method_Annotation(?method, "javax.ws.rs.HEAD");
     Method_Annotation(?method, "javax.ws.rs.OPTIONS");
     Method_Annotation(?method, "javax.ws.rs.POST");
     Method_Annotation(?method, "javax.ws.rs.PUT")).

// Create a context for servlet EPs
mainAnalysis.configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?method, 1) :-
    ServletMethodEP(?method),
    ?value = cat("SERVLET ::: ", ?method),
    isValue(?value),
    MockInvocationForServletEntryPoint(?value, ?method, ?invo),
    mainAnalysis.isImmutableHContext(?hctx),
    mainAnalysis.isImmutableContext(?callerCtx).

.decl MockInvocationForServletEntryPoint(?value:Value, ?method:Method, ?invo:MethodInvocation)

MockInvocationForServletEntryPoint(?value, ?method, cat(cat(cat("<mock-invo-ep ", ?value), ?method), ">")),
PlusMethodInvocation(cat(cat(cat("<mock-invo-ep ", ?value), ?method), ">")) :-
  ServletMethodEP(?method),
  ?value = cat("SERVLET ::: ", ?method),
  isValue(?value).

// Mark as entry points with above context
PossibleOpenProgramEntryPoint(?className, ?method),
mainAnalysis.ReachableContext(?calleeCtx, ?method) :-
    ServletMethodEP(?method),
    Method_DeclaringType(?method, ?className),
    ?value = cat("SERVLET ::: ", ?method),
    isValue(?value),
    mainAnalysis.isImmutableHContext(?hctx),
    mainAnalysis.isImmutableContext(?callerCtx),
    mainAnalysis.configuration.ContextRequest(?callerCtx, ?hctx, ?invo, ?value, ?method, 1),
    mainAnalysis.configuration.ContextResponse(?callerCtx, ?hctx, ?invo, ?value, ?method, ?calleeCtx).

// Create mock object for the startup context
isValue(cat("SERVLET ::: ", ?method)) :- isMethod(?method), ServletMethodEP(?method).

// Mock dependency injection through autowired fields
mainAnalysis_MockValueConsMacro(cat(?fld, " :: AUTOWIRED"), ?type),
mainAnalysis.InstanceFieldPointsTo(?hctx, cat(?fld, " :: AUTOWIRED"), ?fld, ?basehctx, ?basevalue) :-
  Field_Annotation(?fld, "org.springframework.beans.factory.annotation.Autowired"),
  Field_DeclaringType(?fld, ?decltype),
  mainAnalysis.Value_Type(?basevalue, ?decltype),
  mainAnalysis.ReachableValue(?basehctx, ?basevalue),
  Field_Type(?fld, ?type),
  mainAnalysis.isImmutableHContext(?hctx).
