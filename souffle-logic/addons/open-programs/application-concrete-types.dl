.decl BridgeMethod(?bridge:Method, ?type:Type)

BridgeMethod(?bridge, ?type) :-
    basic._BridgeMethod(?bridge, _, ?type).

.decl TypeHasNoApplicationConcreteImplementations(?type:Type)

TypeHasNoApplicationConcreteImplementations(?class) :-
    isType(?class),
    !mainAnalysis.TypeHasApplicationConcreteSubtypes(?class).

.decl AbstractOrInterfaceTypeHasNoApplicationConcreteImplementations(?type:Type)

AbstractOrInterfaceTypeHasNoApplicationConcreteImplementations(?class) :-
    isInterfaceType(?class),
    !ClassModifier("annotation", ?class),
    !mainAnalysis.TypeHasApplicationConcreteSubtypes(?class),
    !mainAnalysis.AllApplicationConcreteImplementations(_, ?class).

AbstractOrInterfaceTypeHasNoApplicationConcreteImplementations(?class) :-
    isClassType(?class),
    ClassModifier("abstract", ?class),
    !mainAnalysis.TypeHasApplicationConcreteSubtypes(?class),
    !mainAnalysis.AllApplicationConcreteImplementations(_, ?class).

.decl NonApplicationConcreteImplementations(?class:Type, ?staticType:Type)
.decl NonApplicationConcreteImplementationsOrd(?classOrd:number, ?staticType:Type)
.decl NonApplicationConcreteImplementationRepresentative(?class:Type, ?staticType:Type)

NonApplicationConcreteImplementations(?class, ?staticType) :-
    AbstractOrInterfaceTypeHasNoApplicationConcreteImplementations(?staticType),
    isClassType(?class),
    !ClassModifier("abstract", ?class),
    basic.SubtypeOf(?class, ?staticType).

NonApplicationConcreteImplementationsOrd(?classOrd, ?staticType) :-
    NonApplicationConcreteImplementations(_, ?staticType),
    ?classOrd = min ord(?allConcreteImplementations): NonApplicationConcreteImplementations(?allConcreteImplementations, ?staticType).

NonApplicationConcreteImplementationRepresentative(?class, ?staticType) :-
    NonApplicationConcreteImplementationsOrd(?classOrd, ?staticType),
    isClassType(?class),
    ord(?class) = ?classOrd.
