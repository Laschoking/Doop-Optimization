// Facts used for optimization

/*** Method removal ***/

.decl SpecialMethodToKeep(?method:Method)

SpecialMethodToKeep(?method) :-
  basic.SubtypeOf(?type, "java.lang.Enum"),
  Method_DeclaringType(?method, ?type),
  Method_Modifier("static", ?method),
  Method_SimpleName(?method, ?name),
  (?name = "values" ; ?name = "valueOf").

// R nested class names (https://developer.android.com/reference/android/R).
.decl RClass(?r:symbol)
RClass("R$anim").    RClass("R$animator").  RClass("R$array").
RClass("R$attr").    RClass("R$bool").      RClass("R$color").
RClass("R$dimen").   RClass("R$drawable").  RClass("R$fraction").
RClass("R$id").      RClass("R$integer").   RClass("R$interpolator").
RClass("R$layout").  RClass("R$menu").      RClass("R$mipmap").
RClass("R$plurals"). RClass("R$raw").       RClass("R$string").
RClass("R$style").   RClass("R$styleable"). RClass("R$transition").
RClass("R$xml").

// Keep methods from R classes. Usually constructors/class initializers.
SpecialMethodToKeep(?method) :-
  Method_DeclaringType(?method, ?type),
  isClassType(?type),
  (RClass(?type); ?type = "R").
SpecialMethodToKeep(?method) :-
  Method_DeclaringType(?method, ?type),
  isClassType(?type),
  RClass(?r),
  (?rTypePart = cat(".", ?r) ; ?rTypePart = cat("$", ?r)),
  contains(?rTypePart, ?type).
SpecialMethodToKeep(?method) :-
  Method_DeclaringType(?method, ?type),
  isClassType(?type),
  (?r = ".R" ; ?r = "$R"),
  substr(?type, strlen(?type) - 2, 2) = ?r.

// Output for dead method removal.
.decl MethodToRemove(?method:Method)
MethodToRemove(?method) :-
  ApplicationMethod(?method),
  !SpecialMethodToKeep(?method),
  !mainAnalysis.ReachableContext(_, ?method),
  !basic.PossibleNativeCodeTargetMethod(?method, _, _),
//  !Method_Modifier("abstract", ?method),
  !Method_Modifier("native", ?method),
  (basic.MethodOverridesOther(?method, _);
   !basic.MethodOverridesOther(_, ?method)).
   // don't throw away root methods that may be needed for dispatch of overriding methods.
.output MethodToRemove

.decl ClassOfDeadMethod(?method:Method, ?class:ClassType)
ClassOfDeadMethod(?method, ?class) :-
  MethodToRemove(?method),
  Method_DeclaringType(?method, ?class).

.decl _RelevantStringPosition(?className: symbol, ?pos:number)
_RelevantStringPosition(?className, ?pos) :-
  ClassNameWithSlashes(_, ?className),
  mainAnalysis._StringIterationTrick(?pos), ?pos < strlen(?className).

// N^2 computation, but it doesn't matter since its application is so limited
.decl ClassNameWithSlashes(?className:ClassType, ?classNameWithSlash:symbol)
ClassNameWithSlashes(?className, ?className) :-
  ClassOfDeadMethod(_, ?className).
ClassNameWithSlashes(?className, ?classNameTransformed) :-
  ClassNameWithSlashes(?className, ?classNameOther),
  _RelevantStringPosition(?className, ?pos),
  substr(?classNameOther, ?pos, 1) = ".",
  substr(?classNameOther, 0, ?pos) = ?prefix,
  !contains(".", ?prefix),
  substr(?classNameOther, ?pos+1, strlen(?className)-?pos-1) = ?suffix,
  ?classNameTransformed = cat(?prefix, cat("/", ?suffix)).

.decl ClassNameWithOnlySlashes(?className:ClassType, ?classNameTransformed:symbol)
ClassNameWithOnlySlashes(?className, ?classNameTransformed) :-
  ClassNameWithSlashes(?className, ?classNameTransformed),
  !contains(".", ?classNameTransformed).

.decl DeadMethodWithJVMDescriptor(?jvmFullName:symbol, ?method:symbol)
DeadMethodWithJVMDescriptor(?jvmFullName, ?method) :-
  ClassOfDeadMethod(?method, ?class),
  ClassNameWithOnlySlashes(?class, ?className),
  Method_JVMDescriptor(?method, ?sig),
  Method_SimpleName(?method, ?simplename),
  ?jvmFullName = cat("L", cat(?className, cat(";:", cat(?simplename, ?sig)))).

#define FILENAME_EXPECTED_BY_OPT_PASS "methods_to_remove.csv"
.output DeadMethodWithJVMDescriptor(IO="file", filename=FILENAME_EXPECTED_BY_OPT_PASS, delimiter="\t")

/**** Helper relations to aid the user when removing/keeping methods ****/

.decl ExceptionThrownByReachableMethod(?excType:Type, ?method:Method)
.output ExceptionThrownByReachableMethod

ExceptionThrownByReachableMethod(?excType, ?method) :-
  mainAnalysis.Reachable(?method),
  Method_DeclaresException(?excType, ?method).

ExceptionThrownByReachableMethod(?excType, ?method) :-
  mainAnalysis.Reachable(?method),
  mainAnalysis.ThrowPointsTo(_, ?exc, _, ?method),
  mainAnalysis.Value_Type(?exc, ?excType),
  !isNullType(?excType).

.decl ClassWithReachableConstructor(?class:ClassType)
.output ClassWithReachableConstructor

ClassWithReachableConstructor(?class) :-
  mainAnalysis.Reachable(?method),
  Method_SimpleName(?method, "<init>"),
  Method_DeclaringType(?method, ?class).

.decl ConstructorlessReachableInstanceClass(?class:ClassType)
.output ConstructorlessReachableInstanceClass

ConstructorlessReachableInstanceClass(?class) :-
  mainAnalysis.Reachable(?method),
  Method_DeclaringType(?method, ?class),
  ApplicationClass(?class),
  isClassType(?class),
  !Method_Modifier("static", ?method),
  !ClassWithReachableConstructor(?class).

/*** Devirtualization ***/

.decl ContextInsensitiveCallGraphEdge(?invocation:MethodInvocation, ?target:Method)

ContextInsensitiveCallGraphEdge(?invocation, ?target) :-
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

.decl InvocationTarget_Count(?invocation:MethodInvocation, ?n:number)

InvocationTarget_Count(?invocation, ?n) :-
  isVirtualMethodInvocation_Insn(?invocation),
  ?n = count:{ContextInsensitiveCallGraphEdge(?invocation, _)}.

// Virtual invocation sites that only call a single method (and can
// thus be candidates for devirtualization).
.decl SingleInvocationTarget(?invocation:MethodInvocation, ?target:Method)
SingleInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, 1),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

.output SingleInvocationTarget

// Helper relation: virtual invocation sites that call multiple methods.
.decl MultiInvocationTarget(?invocation:MethodInvocation, ?target:Method)
MultiInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, ?n),
  ?n > 1,
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

// Reachable methods that are only the target of invocations that can be
// devirtualized. We can thus convert them to static and remove the virtual version.
.decl ReachableMethodOnlyUsedInSingleInvocationTarget(?method:Method)

ReachableMethodOnlyUsedInSingleInvocationTarget(?method) :-
  SingleInvocationTarget(_, ?method),
  !MultiInvocationTarget(_, ?method).

.output ReachableMethodOnlyUsedInSingleInvocationTarget

/*** Inlining ***/

//the number of invocations of an inline candidate
.decl InvocationCount(?method:Method, ?n:number)

InvocationCount(?method, ?n) :-
  ApplicationMethod(?method),
//  !Method_Modifier("native", ?method),
  ?n = count:{ContextInsensitiveCallGraphEdge(_, ?method)}.

.output InvocationCount

.decl ApplicationMethod_Size(?method:Method, ?size:number)
ApplicationMethod_Size(?method, ?size) :-
  ApplicationMethod(?method),
  Method_Modifier("final", ?method),
  !Method_Modifier("native", ?method),
  ?size = count:{Instruction_Method(_, ?method)}.

ApplicationMethod_Size(?method, ?size) :-
  ApplicationMethod(?method),
  !Method_Modifier("native", ?method),
  ?size = count:{Instruction_Method(_, ?method)}.

.decl SmallApplicationMethod(?method:Method)

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  InvocationCount(?method, 1),
  ?size < 20.

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  InvocationCount(?method, 2),
  ?size < 10.

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  InvocationCount(?method, 3),
  ?size < 6.

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  ?size < 3.

.output SmallApplicationMethod

//virtual callsites that call two different methods
//with up to five instructions
.decl DoubleInvocationTarget(?invocation:MethodInvocation, ?target:Method)

DoubleInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, 2),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  ApplicationMethod_Size(?target, ?size),
  ?size < 10.

.output DoubleInvocationTarget

//virtual callsites that call three different methods
//with up to three instructions each  
.decl TripleInvocationTarget(?invocation:MethodInvocation, ?target:Method)

TripleInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, 3),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  ApplicationMethod_Size(?target, ?size),
  ?size < 4.

.output TripleInvocationTarget

//maximum caller size
.decl CallerSize(?caller:Method)

CallerSize(?caller) :- 
  ApplicationMethod_Size(?caller, ?size),
  ?size < 32768.

// Uncommment the following to disable inlining over .dex boundaries.
// #define NOINLINE_OVER_DEX_BOUNDARIES

#ifdef NOINLINE_OVER_DEX_BOUNDARIES
.decl METHODS_INLINE_COMPATIBLE(?a:Method, ?b:Method)
.output METHODS_INLINE_COMPATIBLE

METHODS_INLINE_COMPATIBLE(?a, ?b) :-
  ApplicationMethod(?a),
  Method_DeclaringType(?a, ?t),
  ApplicationMethod(?b),
  Method_DeclaringType(?b, ?t).

METHODS_INLINE_COMPATIBLE(?a, ?b) :-
  ApplicationMethod(?a),
  Method_DeclaringType(?a, ?t1),
  ApplicationMethod(?b),
  Method_DeclaringType(?b, ?t2),
  ?t1 != ?t2,
  _ClassArtifact(?artifact, ?a, ?subArtifact),
  _ClassArtifact(?artifact, ?b, ?subArtifact).
#else
#define METHODS_INLINE_COMPATIBLE(a, b) 1=1
#endif // NOINLINE_OVER_DEX_BOUNDARIES

.decl InvocationToInline(?invocation:MethodInvocation, ?target:Method)

InvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  SingleInvocationTarget(?invocation, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).

InvocationToInline(?invocation, ?target) :-
  DoubleInvocationTarget(?invocation, ?target),
  2 = count:{DoubleInvocationTarget(?invocation, _)},
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).

InvocationToInline(?invocation, ?target) :-
  TripleInvocationTarget(?invocation, ?target),
  3 = count:{TripleInvocationTarget(?invocation, _)},
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).  
 
InvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  (isStaticMethodInvocation_Insn(?invocation);
   isSpecialMethodInvocation_Insn(?invocation)),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).  

.output InvocationToInline
