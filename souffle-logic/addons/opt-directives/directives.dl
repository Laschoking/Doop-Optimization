// Facts used for optimization

/*** Method removal ***/

.decl SpecialMethodToKeep(?method:Method)

SpecialMethodToKeep(?method) :-
  basic.SubtypeOf(?type, "java.lang.Enum"),
  Method_DeclaringType(?method, ?type),
  Method_Modifier("static", ?method),
  Method_SimpleName(?method, ?name),
  (?name = "values" ; ?name = "valueOf").

// R nested class names (https://developer.android.com/reference/android/R).
.decl RClass(?r:symbol)
RClass("R$anim").    RClass("R$animator").  RClass("R$array").
RClass("R$attr").    RClass("R$bool").      RClass("R$color").
RClass("R$dimen").   RClass("R$drawable").  RClass("R$fraction").
RClass("R$id").      RClass("R$integer").   RClass("R$interpolator").
RClass("R$layout").  RClass("R$menu").      RClass("R$mipmap").
RClass("R$plurals"). RClass("R$raw").       RClass("R$string").
RClass("R$style").   RClass("R$styleable"). RClass("R$transition").
RClass("R$xml").

// Keep methods from R classes. Usually constructors/class initializers.
SpecialMethodToKeep(?method) :-
  Method_DeclaringType(?method, ?type),
  isClassType(?type),
  (RClass(?type); ?type = "R").
SpecialMethodToKeep(?method) :-
  Method_DeclaringType(?method, ?type),
  isClassType(?type),
  RClass(?r),
  (?rTypePart = cat(".", ?r) ; ?rTypePart = cat("$", ?r)),
  contains(?rTypePart, ?type).
SpecialMethodToKeep(?method) :-
  Method_DeclaringType(?method, ?type),
  isClassType(?type),
  (?r = ".R" ; ?r = "$R"),
  substr(?type, strlen(?type) - 2, 2) = ?r.

// Output for dead method removal.
.decl MethodToRemove(?method:Method)
MethodToRemove(?method) :-
  ApplicationMethod(?method),
  !SpecialMethodToKeep(?method),
  !mainAnalysis.ReachableContext(_, ?method),
  !basic.PossibleNativeCodeTargetMethod(?method, _, _),
//  !Method_Modifier("abstract", ?method),
  !Method_Modifier("native", ?method),
  (basic.MethodOverridesOther(?method, _);
   !basic.MethodOverridesOther(_, ?method)).
   // don't throw away root methods that may be needed for dispatch of overriding methods.
.output MethodToRemove

// Test logic to measure Doop-reachable methods against seeds.txt
// entry points for application code.
// #define DEBUG_SEEDS
#ifdef DEBUG_SEEDS

.decl Seed(?s:symbol)
.input Seed(IO="file", filename="Seeds.facts", delimiter="\t")

.decl SeedMethod(?m:Method)
.output SeedMethod
SeedMethod(?m) :-
  Seed(?m0),
  ?m = cat("<", cat(?m0, ">")),
  ApplicationMethod(?m).

.decl SeedMethodReachable(?m:Method)
.output SeedMethodReachable
SeedMethodReachable(?m) :-
  SeedMethod(?m),
  mainAnalysis.Reachable(?m).

.decl SeedMethodNotReachable(?m:Method)
.output SeedMethodNotReachable
SeedMethodNotReachable(?m) :-
  SeedMethod(?m),
  !mainAnalysis.Reachable(?m).

#endif // DEBUG_SEEDS

.decl TypeOfDeadMethod(?method:Method, ?type:ReferenceType)
TypeOfDeadMethod(?method, ?type) :-
  MethodToRemove(?method),
  Method_DeclaringType(?method, ?type).

.decl _RelevantStringPosition(?className: symbol, ?pos:number)
_RelevantStringPosition(?className, ?pos) :-
  ClassNameWithSlashes(_, ?className),
  mainAnalysis._StringIterationTrick(?pos), ?pos < strlen(?className).

// N^2 computation, but it doesn't matter since its application is so limited
.decl ClassNameWithSlashes(?typeName:ReferenceType, ?typeNameWithSlash:symbol)
ClassNameWithSlashes(?typeName, ?typeNameSymbol) :-
  TypeOfDeadMethod(_, ?typeName),
  ?typeNameSymbol = ?typeName.
ClassNameWithSlashes(?typeName, ?typeNameTransformed) :-
  ClassNameWithSlashes(?typeName, ?typeNameOther),
  _RelevantStringPosition(?typeName, ?pos),
  substr(?typeNameOther, ?pos, 1) = ".",
  substr(?typeNameOther, 0, ?pos) = ?prefix,
  !contains(".", ?prefix),
  substr(?typeNameOther, ?pos+1, strlen(?typeName)-?pos-1) = ?suffix,
  ?typeNameTransformed = cat(?prefix, cat("/", ?suffix)).

.decl ClassNameWithOnlySlashes(?typeName:ReferenceType, ?typeNameTransformed:symbol)
ClassNameWithOnlySlashes(?typeName, ?typeNameTransformed) :-
  ClassNameWithSlashes(?typeName, ?typeNameTransformed),
  !contains(".", ?typeNameTransformed).

.decl DeadMethodWithJVMDescriptor(?jvmFullName:symbol, ?method:symbol)
DeadMethodWithJVMDescriptor(?jvmFullName, ?method) :-
  TypeOfDeadMethod(?method, ?class),
  ClassNameWithOnlySlashes(?class, ?typeName),
  Method_JVMDescriptor(?method, ?sig),
  Method_SimpleName(?method, ?simplename),
  ?jvmFullName = cat("L", cat(?typeName, cat(";:", cat(?simplename, ?sig)))).

#define FILENAME_EXPECTED_BY_OPT_PASS "methods_to_remove.csv"
.output DeadMethodWithJVMDescriptor(IO="file", filename=FILENAME_EXPECTED_BY_OPT_PASS, delimiter="\t")

/**** Helper relations to aid the user when removing/keeping methods ****/

.decl ExceptionThrownByReachableMethod(?excType:Type, ?method:Method)
.output ExceptionThrownByReachableMethod

ExceptionThrownByReachableMethod(?excType, ?method) :-
  mainAnalysis.Reachable(?method),
  Method_DeclaresException(?excType, ?method).

#ifndef DISABLE_POINTS_TO
ExceptionThrownByReachableMethod(?excType, ?method) :-
  mainAnalysis.Reachable(?method),
  mainAnalysis.ThrowPointsTo(_, ?exc, _, ?method),
  mainAnalysis.Value_Type(?exc, ?excType),
  !isNullType(?excType).
#endif // DISABLE_POINTS_TO

.decl ClassWithReachableConstructor(?class:ClassType)
.output ClassWithReachableConstructor

ClassWithReachableConstructor(?class) :-
  mainAnalysis.Reachable(?method),
  basic.ClassConstructor(?method, ?class).

.decl ConstructorlessReachableInstanceClass(?class:ClassType)
.output ConstructorlessReachableInstanceClass

ConstructorlessReachableInstanceClass(?class) :-
  mainAnalysis.Reachable(?method),
  Method_DeclaringType(?method, ?class),
  ApplicationClass(?class),
  isClassType(?class),
  !Method_Modifier("static", ?method),
  !ClassWithReachableConstructor(?class).

/*** Devirtualization ***/

.decl ContextInsensitiveCallGraphEdge(?invocation:MethodInvocation, ?target:Method)

ContextInsensitiveCallGraphEdge(?invocation, ?target) :-
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

.decl InvocationTarget_Count(?invocation:MethodInvocation, ?n:number)

InvocationTarget_Count(?invocation, ?n) :-
  isVirtualMethodInvocation_Insn(?invocation),
  ?n = count:{ContextInsensitiveCallGraphEdge(?invocation, _)}.

// Virtual invocation sites that only call a single method (and can
// thus be candidates for devirtualization).
.decl SingleInvocationTarget(?invocation:MethodInvocation, ?target:Method)
SingleInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, 1),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

.output SingleInvocationTarget

.decl SingleInvocationApplicationTarget(?invocation:MethodInvocation, ?target:Method)

SingleInvocationApplicationTarget(?invocation, ?target) :-
  SingleInvocationTarget(?invocation, ?target),
  ApplicationMethod(?target).

.output SingleInvocationApplicationTarget

// Helper relation: virtual invocation sites that call multiple methods.
.decl MultiInvocationTarget(?invocation:MethodInvocation, ?target:Method)
MultiInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, ?n),
  ?n > 1,
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target).

// Reachable methods that are only the target of invocations that can be
// devirtualized. We can thus convert them to static and remove the virtual version.
.decl ReachableMethodOnlyUsedInSingleInvocationTarget(?method:Method)

ReachableMethodOnlyUsedInSingleInvocationTarget(?method) :-
  SingleInvocationTarget(_, ?method),
  !MultiInvocationTarget(_, ?method).

.output ReachableMethodOnlyUsedInSingleInvocationTarget

/*** Inlining ***/

//the number of invocations of an inline candidate
.decl InvocationCount(?method:Method, ?n:number)

InvocationCount(?method, ?n) :-
  ApplicationMethod(?method),
//  !Method_Modifier("native", ?method),
  ?n = count:{ContextInsensitiveCallGraphEdge(_, ?method)}.

.output InvocationCount

.decl ApplicationMethod_Size(?method:Method, ?size:number)
ApplicationMethod_Size(?method, ?size) :-
  ApplicationMethod(?method),
  Method_Modifier("final", ?method),
  !Method_Modifier("native", ?method),
  ?size = count:{Instruction_Method(_, ?method)}.

ApplicationMethod_Size(?method, ?size) :-
  ApplicationMethod(?method),
  !Method_Modifier("native", ?method),
  ?size = count:{Instruction_Method(_, ?method)}.

.decl SmallApplicationMethod(?method:Method)

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  InvocationCount(?method, 1),
  ?size < 20.

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  InvocationCount(?method, 2),
  ?size < 10.

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  InvocationCount(?method, 3),
  ?size < 6.

SmallApplicationMethod(?method) :-
  ApplicationMethod_Size(?method, ?size),
  ?size < 3.

.output SmallApplicationMethod

//virtual callsites that call two different methods
//with up to five instructions
.decl DoubleInvocationTarget(?invocation:MethodInvocation, ?target:Method)

DoubleInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, 2),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  ApplicationMethod_Size(?target, ?size),
  ?size < 10.

.output DoubleInvocationTarget

//virtual callsites that call three different methods
//with up to three instructions each  
.decl TripleInvocationTarget(?invocation:MethodInvocation, ?target:Method)

TripleInvocationTarget(?invocation, ?target) :-
  InvocationTarget_Count(?invocation, 3),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  ApplicationMethod_Size(?target, ?size),
  ?size < 4.

.output TripleInvocationTarget

//maximum caller size
.decl CallerSize(?caller:Method)

CallerSize(?caller) :- 
  ApplicationMethod_Size(?caller, ?size),
  ?size < 32768.

// Uncommment the following to disable inlining over .dex boundaries.
// #define NOINLINE_OVER_DEX_BOUNDARIES

#ifdef NOINLINE_OVER_DEX_BOUNDARIES
.decl METHODS_INLINE_COMPATIBLE(?a:Method, ?b:Method)
.output METHODS_INLINE_COMPATIBLE

METHODS_INLINE_COMPATIBLE(?a, ?b) :-
  ApplicationMethod(?a),
  Method_DeclaringType(?a, ?t),
  ApplicationMethod(?b),
  Method_DeclaringType(?b, ?t).

METHODS_INLINE_COMPATIBLE(?a, ?b) :-
  ApplicationMethod(?a),
  Method_DeclaringType(?a, ?t1),
  ApplicationMethod(?b),
  Method_DeclaringType(?b, ?t2),
  ?t1 != ?t2,
  _ClassArtifact(?artifact, ?a, ?subArtifact, _),
  _ClassArtifact(?artifact, ?b, ?subArtifact, _).
#else
#define METHODS_INLINE_COMPATIBLE(a, b) 1=1
#endif // NOINLINE_OVER_DEX_BOUNDARIES

.decl InvocationToInline(?invocation:MethodInvocation, ?target:Method)

InvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  SingleInvocationTarget(?invocation, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).

InvocationToInline(?invocation, ?target) :-
  DoubleInvocationTarget(?invocation, ?target),
  2 = count:{DoubleInvocationTarget(?invocation, _)},
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).

InvocationToInline(?invocation, ?target) :-
  TripleInvocationTarget(?invocation, ?target),
  3 = count:{TripleInvocationTarget(?invocation, _)},
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).  
 
InvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  (isStaticMethodInvocation_Insn(?invocation);
   isSpecialMethodInvocation_Insn(?invocation)),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).  

.output InvocationToInline

.decl SingleInvocationToInline(?invocation:MethodInvocation, ?target:Method)

SingleInvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  SingleInvocationTarget(?invocation, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).

SingleInvocationToInline(?invocation, ?target) :-
  SmallApplicationMethod(?target),
  (isStaticMethodInvocation_Insn(?invocation);
   isSpecialMethodInvocation_Insn(?invocation)),
  mainAnalysis.CallGraphEdge(_, ?invocation, _, ?target),
  Instruction_Method(?invocation, ?invocationMethod),
  METHODS_INLINE_COMPATIBLE(?invocationMethod, ?target),
  CallerSize(?invocationMethod).

.output SingleInvocationToInline

// Graal / Native image helpers: these are whole-program rules, since
// the resulting native binary contains the whole program.

.decl NonFinalFieldWrittenInNonConstructor(?field:Field)
.output NonFinalFieldWrittenInNonConstructor

NonFinalFieldWrittenInNonConstructor(?field) :-
  isField(?field),
  !Field_Modifier("final", ?field),
  _StoreInstanceField(_, _, _, _, ?field, ?method),
  !Method_SimpleName(?method, "<init>").

NonFinalFieldWrittenInNonConstructor(?field) :-
  isField(?field),
  !Field_Modifier("final", ?field),
  _StoreStaticField(_, _, _, ?field, ?method),
  !Method_SimpleName(?method, "<clinit>").

// Fields thar are candidates for static initialization.
.decl FieldIsFinalOrInitialized(?field:Field)
.output FieldIsFinalOrInitialized

FieldIsFinalOrInitialized(?field) :-
  isField(?field),
  !NonFinalFieldWrittenInNonConstructor(?field).

// Fields containing non-null objects.
.decl FieldPointsTo(?field:Field)
// .output FieldPointsTo
FieldPointsTo(?field) :-
  (mainAnalysis.StaticFieldPointsTo(_, ?value, ?field) ; mainAnalysis.InstanceFieldPointsTo(_, ?value, ?field, _, _)),
  mainAnalysis.Value_Type(?value, ?t),
  isNullType(?t).

// Fields used by (app-)reachable code.
.decl ReachableField(?field:Field)
.output ReachableField
ReachableField(?field) :-
  mainAnalysis.AppReachable(?method),
  Instruction_Method(?instruction, ?method),
  FieldInstruction_Signature(?instruction, ?field).

.decl ReachableType(?type:ReferenceType)
.output ReachableType
ReachableType(?type) :- ReachableField(?field), Field_DeclaringType(?field, ?type).
ReachableType(?type) :- mainAnalysis.AppReachable(?method), Method_DeclaringType(?method, ?type).


#ifdef REFLECTION
// Fields written by reflection.
.decl FieldWrittenByReflection(?field:Field)
// .output FieldWrittenByReflection
FieldWrittenByReflection(?field) :- mainAnalysis.ReflectiveStoreField(_, ?field, _, _).
FieldWrittenByReflection(?field) :- mainAnalysis.ReflectiveStoreStaticField(?field, _, _).
FieldWrittenByReflection(?field) :- mainAnalysis.ReflectiveStoreHeapInstanceField(?field, _, _, _, _).
FieldWrittenByReflection(?field) :- mainAnalysis.ReflectiveStoreInstanceField(_, _, ?field, _, _).
// Fields read by reflection.
.decl FieldReadByReflection(?field:Field)
// .output FieldReadByReflection
FieldReadByReflection(?field) :- mainAnalysis.ReflectiveLoadField(_, _, _, ?field).
FieldReadByReflection(?field) :- mainAnalysis.ReflectiveLoadStaticField(_, _, ?field).
FieldReadByReflection(?field) :- mainAnalysis.ReflectiveLoadHeapInstanceField(_, _, ?field, _, _).
FieldReadByReflection(?field) :- mainAnalysis.ReflectiveLoadInstanceField(_, _, ?field, _, _).

.decl ReachableFieldAccessedByReflection(?field:Field)
.output ReachableFieldAccessedByReflection
ReachableFieldAccessedByReflection(?field) :-
  (FieldWrittenByReflection(?field) ; FieldReadByReflection(?field)),
  ReachableField(?field).

// Output more tables computed by reflection analysis.
// .output mainAnalysis.ReflectiveStoreField
// .output mainAnalysis.ReflectiveStoreStaticField
// .output mainAnalysis.ReflectiveStoreHeapInstanceField
// .output mainAnalysis.ReflectiveStoreInstanceField
// .output mainAnalysis.ReflectiveLoadField
// .output mainAnalysis.ReflectiveLoadStaticField
// .output mainAnalysis.ReflectiveLoadHeapInstanceField
// .output mainAnalysis.ReflectiveLoadInstanceField
// .output mainAnalysis.MethodNameMatchingStringConstant_Signature
// .output mainAnalysis.FieldNameMatchingStringConstant_Signature
// .output mainAnalysis.TypeMatchingMethod
// .output mainAnalysis.TypeMatchingFieldName
// .output mainAnalysis.ReflectiveCallGraphEdge

// Are there "final" fields written by reflection?

.decl FinalFieldWrittenByReflection(?field:Field)
.output FinalFieldWrittenByReflection

FinalFieldWrittenByReflection(?field) :-
  FieldWrittenByReflection(?field),
  Field_Modifier("final", ?field).

.decl MethodInvokedByReflection(?method:Method)
.output MethodInvokedByReflection
MethodInvokedByReflection(?method) :-
  mainAnalysis.ReflectiveCallGraphEdge(_, _, _, ?method),
  ApplicationMethod(?method).

#endif // REFLECTION

// Output all application methods/fields (so that tools can calculate
// optimization effects for the whole program).

.output ApplicationMethod
.output ApplicationField

// Compute configuration patterns: "allDeclaredConstructors",
// "allPublicConstructors", "allDeclaredMethods", "allPublicMethods",
// "allDeclaredFields", "allPublicFields".

.decl UnreachableDeclaredMethod(?method:Method, ?type:ReferenceType)
// .output UnreachableDeclaredMethod
UnreachableDeclaredMethod(?method, ?type) :-
  ApplicationMethod(?method),
  Method_DeclaringType(?method, ?type),
  !mainAnalysis.AppReachable(?method).

.decl UnreachablePublicMethod(?method:Method, ?type:ReferenceType)
// .output UnreachablePublicMethod
UnreachablePublicMethod(?method, ?type) :-
  UnreachableDeclaredMethod(?method, ?type),
  Method_Modifier("public", ?method).

.decl UnreachableDeclaredField(?field:Field, ?type:ReferenceType)
// .output UnreachableDeclaredField
UnreachableDeclaredField(?field, ?type) :-
  ApplicationField(?field),
  Field_DeclaringType(?field, ?type),
  !ReachableField(?field).

.decl UnreachablePublicField(?type:ReferenceType)
// .output UnreachablePublicField
UnreachablePublicField(?type) :-
  UnreachableDeclaredField(?field, ?type),
  Field_Modifier("public", ?field).

.decl UnreachableDeclaredConstructor(?constructor:Method, ?type:ReferenceType)
// .output UnreachableDeclaredConstructor
UnreachableDeclaredConstructor(?constructor, ?type) :-
  UnreachableDeclaredMethod(?constructor, ?type),
  basic.ClassConstructor(?constructor, ?type).

.decl UnreachablePublicConstructor(?type:ReferenceType)
// .output UnreachablePublicConstructor
UnreachablePublicConstructor(?type) :-
  UnreachableDeclaredConstructor(?constructor, ?type),
  Method_Modifier("public", ?constructor).

.decl NI_AllDeclaredConstructors(?type:ReferenceType)
.output NI_AllDeclaredConstructors
NI_AllDeclaredConstructors(?type) :-
  ApplicationClass(?type),
  basic.ClassConstructor(_, ?type),         // ensure there is at least one constructor
  !UnreachableDeclaredConstructor(_, ?type).

.decl NI_AllPublicConstructors(?type:ReferenceType)
.output NI_AllPublicConstructors
NI_AllPublicConstructors(?type) :-
  ApplicationClass(?type),
  basic.ClassConstructor(?constructor, ?type),  // ensure there is at least one constructor
  Method_Modifier("public", ?constructor),      // that is public  
  !UnreachablePublicConstructor(?type).

.decl NI_AllDeclaredMethods(?type:ReferenceType)
.output NI_AllDeclaredMethods
NI_AllDeclaredMethods(?type) :-
  ReachableType(?type),
  Method_DeclaringType(_, ?type),         // ensure there is at least one method
  !UnreachableDeclaredMethod(_, ?type).

.decl NI_AllPublicMethods(?type:ReferenceType)
.output NI_AllPublicMethods
NI_AllPublicMethods(?type) :-
  ReachableType(?type),
  Method_DeclaringType(?method, ?type),   // ensure there is at least one method
  Method_Modifier("public", ?method),     // that is public
  !UnreachablePublicMethod(_, ?type).

.decl NI_AllDeclaredFields(?type:ReferenceType)
.output NI_AllDeclaredFields
NI_AllDeclaredFields(?type) :-
  ReachableType(?type),
  Field_DeclaringType(_, ?type),          // ensure there is at least one field
  !UnreachableDeclaredField(_, ?type).

.decl NI_AllPublicFields(?type:ReferenceType)
.output NI_AllPublicFields
NI_AllPublicFields(?type) :-
  ReachableType(?type),
  Field_DeclaringType(?field, ?type),     // ensure there is at least one field
  Field_Modifier("public", ?field),       // that is public
  !UnreachablePublicField(?type).

.decl NI_ReachableMethod(?method:Method)
.output NI_ReachableMethod
// App-reachable methods are registered if all-declared-methods is not
// set for their containing type.
NI_ReachableMethod(?method) :-
  mainAnalysis.AppReachable(?method),
  Method_DeclaringType(?method, ?type),
  !NI_AllDeclaredMethods(?type).
// In addition (extended rule), non-public app-reachable methods are
// registered if all-public-methods is not set for their containing type.
NI_ReachableMethod(?method) :-
  mainAnalysis.AppReachable(?method),
  Method_DeclaringType(?method, ?type),
  !NI_AllDeclaredMethods(?type),
  !Method_Modifier("public", ?method),
  !NI_AllPublicMethods(?type).

.decl NI_ReachableField(?field:Field)
.output NI_ReachableField
// App-reachable fields are registered if all-declared-fields is not
// set for their containing type.
NI_ReachableField(?field) :-
  ReachableField(?field),
  Field_DeclaringType(?field, ?type),
  !NI_AllDeclaredFields(?type).
// In addition (extended rule), non-public app-reachable fields are registered
// if all-public-fields is not set for their containing type.
NI_ReachableField(?field) :-
  ReachableField(?field),
  Field_DeclaringType(?field, ?type),
  !NI_AllDeclaredFields(?type),
  !Field_Modifier("public", ?field),
  !NI_AllPublicFields(?type).

.decl ReachableAppField(?fld:Field)
.output ReachableAppField
ReachableAppField(?fld) :- ReachableField(?fld), ApplicationField(?fld).
.decl ReachableAppMethod(?method:Method)
.output ReachableAppMethod
ReachableAppMethod(?method) :- mainAnalysis.Reachable(?method), ApplicationMethod(?method).

#define REL_COUNT(rel, relCount) .decl relCount(?n:number) \
.output relCount \
relCount(?n) :- ?n = count:{rel(_)}

REL_COUNT(ReachableAppField, ReachableAppField_Count).
REL_COUNT(ApplicationField, ApplicationField_Count).
REL_COUNT(ReachableAppMethod, ReachableAppMethod_Count).
REL_COUNT(ApplicationMethod, ApplicationMethod_Count).

.decl NI_Stats(?label:symbol, ?f:symbol)
.output NI_Stats
NI_Stats("Reachable app fields", cat(to_string((100 * ?c1) / ?c2), "%")) :-
  ReachableAppField_Count(?c1),
  ApplicationField_Count(?c2).
NI_Stats("Reachable app methods", cat(to_string((100 * ?c1) / ?c2), "%")) :-
  ReachableAppMethod_Count(?c1),
  ApplicationMethod_Count(?c2).

#ifdef SCAN_NATIVE_CODE
.decl AppReachableMethodFromNativeCode(?method:Method)
.output AppReachableMethodFromNativeCode

AppReachableMethodFromNativeCode(?method) :-
  ApplicationMethod(?method),
  mainAnalysis.ReachableMethodFromNativeCode(?method).
#endif // SCAN_NATIVE_CODE
