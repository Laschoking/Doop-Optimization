#define DEBUG

// Declarations

// Enumeration of predecessors in order

.decl BuildPathExprBefore(?meth:Method, prev:Instruction, ?exprBase: Expr, ?insn:Instruction)
.decl PathExpressionBefore(?meth:Method, ?insn: Instruction, ?pathExpr: Expr)
.decl PathExpressionAfterTrue(?meth: Method, ?insn: Instruction, ?pathExpr: Expr)
.decl PathExpressionAfterFalse(?meth: Method, ?insn: Instruction, ?pathExpr: Expr)

// Debugging

.output BuildPathExprBefore
.output PathExpressionBefore
.output PathExpressionAfterTrue
.output PathExpressionAfterFalse

/*
 * Path ?expressions after instructions are distinguished into two disjoint
 * cases.
 *  1) if-statements that increment the path ?expression with the
 *     if-condition bool ?expression
 *  2) any statement, excluding if-statements that leave the path
 *     ?expression as it is
 */

// If no path ?expression before, path ?expressions are built given
// branch conditions

// TODO: what would happen if there's a backedge

#ifdef DEBUG
ToString([?negatedOp, ?type, ?exprLeft, ?exprRight], ?out3),
#endif
isExpr([?negatedOp, ?type, ?exprLeft, ?exprRight]),
PathExpressionAfterTrue(?meth, ?insn, ?conditionExpr),
PathExpressionAfterFalse(?meth, ?insn, [?negatedOp, ?type, ?exprLeft, ?exprRight]) :-
    Instruction_Method(?insn, ?meth),
    isIf_Insn(?insn),
    DummyIf_Var(?insn, ?dummyVar),
    minOrd = min ord(?insn): isIf_Insn(?insn),
    ord(?insn) = minOrd,
    ResolveExpr(?meth, ?dummyVar, ?conditionExpr),
    ?conditionExpr = [op, ?type, ?exprLeft, ?exprRight],
#ifndef DEBUG
    NegateOp(op, ?negatedOp).
#else
    NegateOp(op, ?negatedOp),
    ToString(?exprLeft, ?outL),
    ToString(?exprRight, ?outR),
    ?out3 = cat(?outL, cat(?negatedOp, ?outR)).
#endif

// Include if-conditions to path ?expressions computed up to the current if-statement

#ifdef DEBUG
ToString(?pathExpr1, ?out1),
ToString(?pathExpr2, ?out2),
ToString(?negatedConditionExpr, ?out3),
#endif
isExpr(?pathExpr1),
isExpr(?pathExpr2),
isExpr(?negatedConditionExpr),
PathExpressionAfterTrue(?meth, ?insn, ?pathExpr1),
PathExpressionAfterFalse(?meth, ?insn, ?pathExpr2) :-
    Instruction_Method(?insn, ?meth),
    isIf_Insn(?insn),
    PathExpressionBefore(?meth, ?insn, ?pathExpr),
    DummyIf_Var(?insn, ?dummyVar),
    ResolveExpr(?meth, ?dummyVar, ?conditionExpr),
    ?conditionExpr = [op, ?type, ?exprLeft, ?exprRight],
    NegateOp(op, ?negatedOp),
    ?negatedConditionExpr = [?negatedOp, ?type, ?exprLeft, ?exprRight],
    ?pathExpr1 = ["&&", "boolean", ?conditionExpr, ?pathExpr],
#ifndef DEBUG
    ?pathExpr2 = ["&&", "boolean", ?negatedConditionExpr, ?pathExpr].
#else
    ?pathExpr2 = ["&&", "boolean", ?negatedConditionExpr, ?pathExpr],
    ToString(?pathExpr, ?out),
    ToString(?conditionExpr, ?outC),
    ToString(?exprLeft, ?outL),
    ToString(?exprRight, ?outR),
    ?out3 = cat(?outL, cat(?negatedOp, ?outR)),
    ?out1 = cat(?outC, cat(" && ", ?out)),
    ?out2 = cat(?out3, cat(" && ", ?out)).
#endif

// any statement excluding if-stmts

#ifdef DEBUG
ToString(?pathExpr, ?out),
#endif
PathExpressionAfterTrue(?meth, ?insn, ?pathExpr) :-
    Instruction_Method(?insn, ?meth),
    !isIf_Insn(?insn),
#ifdef DEBUG
    PathExpressionBefore(?meth, ?insn, ?pathExpr),
    ToString(?pathExpr, ?out).
#else
    PathExpressionBefore(?meth, ?insn, ?pathExpr).
#endif

/* Path ?expression before building */

// Base case: path ?expression before ?insn starts with the ?expression
// flowing from the first predecessor in the enumeration

// Single predecessor case

PathExpressionBefore(?meth, ?insn, ?exprBase) :-
    FirstPredOfInsnInMethod(?meth, pred, ?insn),
    LastPredOfInsnInMethod(?meth, pred, ?insn),
    isIf_Insn(pred),
    PathExpressionAfterFalse(?meth, pred, ?exprBase).

PathExpressionBefore(?meth, ?insn, ?exprBase) :-
    FirstPredOfInsnInMethod(?meth, pred, ?insn),
    LastPredOfInsnInMethod(?meth, pred, ?insn),
    !isIf_Insn(pred),
    PathExpressionAfterTrue(?meth, pred, ?exprBase).

// Multiple predecessors case

// Base

BuildPathExprBefore(?meth, pred,  ?expr, ?insn) :-
    FirstPredOfInsnInMethod(?meth, pred, ?insn),
    !LastPredOfInsnInMethod(?meth, pred, ?insn),
    isIf_Insn(pred),
    IsJumpTarget(?insn),
    PathExpressionAfterTrue(?meth, pred, ?expr).

BuildPathExprBefore(?meth, pred, ?expr, ?insn) :-
    FirstPredOfInsnInMethod(?meth, pred, ?insn),
    !LastPredOfInsnInMethod(?meth, pred, ?insn),
    isIf_Insn(pred),
    !IsJumpTarget(?insn),
    PathExpressionAfterFalse(?meth, pred, ?expr).

BuildPathExprBefore(?meth, pred,  ?expr, ?insn) :-
    FirstPredOfInsnInMethod(?meth, pred, ?insn),
    !LastPredOfInsnInMethod(?meth, pred, ?insn),
    !isIf_Insn(pred),
    PathExpressionAfterTrue(?meth, pred, ?expr).


#ifdef DEBUG
ToString(?pathExpr, cat(?out, cat(" || ", ?outE))),
#endif
BuildPathExprBefore(?meth, ?next, ?pathExpr, ?insn) :-
    Instruction_Method(?insn, ?meth),
    BuildPathExprBefore(?meth, prev, ?expr, ?insn),
    !LastPredOfInsnInMethod(?meth, prev, ?insn),
    NextPredOfInsnInMethod(?meth, prev, ?next, ?insn),
    !isIf_Insn(?next),
    PathExpressionAfterTrue(?meth, ?next, ?exprPrev),
    #ifdef DEBUG
    ToString(?exprPrev, ?out),
    ToString(?expr, ?outE),
    #endif
    ?pathExpr = ["||", "boolean", ?exprPrev, ?expr].

#ifdef DEBUG
ToString(?pathExpr, cat(?out, cat(" || ", ?outE))),
#endif
BuildPathExprBefore(?meth, ?next, ?pathExpr, ?insn) :-
    Instruction_Method(?insn, ?meth),
    BuildPathExprBefore(?meth, prev, ?expr, ?insn),
    !LastPredOfInsnInMethod(?meth, prev, ?insn),
    NextPredOfInsnInMethod(?meth, prev, ?next, ?insn),
    isIf_Insn(?next),
    IsJumpTarget(?insn),
    PathExpressionAfterTrue(?meth, ?next, ?exprPrev),
    #ifdef DEBUG
    ToString(?exprPrev, ?out),
    ToString(?expr, ?outE),
    #endif
    ?pathExpr = ["||", "boolean", ?exprPrev, ?expr].

#ifdef DEBUG
ToString(?pathExpr, cat(?out, cat(" || ", ?outE))),
#endif
BuildPathExprBefore(?meth, ?next, ?pathExpr, ?insn) :-
    Instruction_Method(?insn, ?meth),
    BuildPathExprBefore(?meth, prev, ?expr, ?insn),
    !LastPredOfInsnInMethod(?meth, prev, ?insn),
    NextPredOfInsnInMethod(?meth, prev, ?next, ?insn),
    isIf_Insn(?next),
    !IsJumpTarget(?insn),
    PathExpressionAfterFalse(?meth, ?next, ?exprPrev),
    #ifdef DEBUG
    ToString(?exprPrev, ?out),
    ToString(?expr, ?outE),
    #endif
    ?pathExpr = ["||", "boolean", ?exprPrev, ?expr].

PathExpressionBefore(?meth, ?insn, ?pathExpr) :-
    !FirstPredOfInsnInMethod(?meth, pred, ?insn),
    LastPredOfInsnInMethod(?meth, pred, ?insn),
    BuildPathExprBefore(?meth, pred, ?pathExpr, ?insn).
