/*
 * Path ?expressions after instructions are distinguished into two disjoint
 * cases.
 *  1) if-statements that increment the path ?expression with the
 *     if-condition bool ?expression
 *  2) any statement, excluding if-statements that leave the path
 *     ?expression as it is
 */

// If no path expression before, path ?expressions are built given
// branch conditions

PathExpressionAfterTrue(?meth, ?insn, ?cond),
PathExpressionAfterFalse(?meth, ?insn, ?negatedCond) :-
	FirstIfInsnInMethod(?insn, ?meth),
	NegationOfConditionAtIfInsn(?cond, ?negatedCond, ?insn).

// Include if-conditions to path ?expressions computed up to the current if-statement

PathExpressionAfterTrue(?meth, ?insn, ?pathExpr1),
PathExpressionAfterFalse(?meth, ?insn, ?pathExpr2) :-
	PathExpressionBefore(?meth, ?insn, ?pathExpr),
	NegationOfConditionAtIfInsn(?cond, ?negatedCond, ?insn),
	?cond = [?op, ?type, ?exprLeft, ?exprRight],
	?pathExpr1 = ["&&", ?type, ?cond, ?pathExpr],
	?pathExpr2 = ["&&", ?type, ?negatedCond, ?pathExpr].

// Any statement excluding if-stmts

PathExpressionAfterTrue(?meth, ?insn, ?pathExpr) :-
  PathExpressionBefore(?meth, ?insn, ?pathExpr),
  !isIf_Insn(?insn).

/* Path ?expression before building */

// Base case: path ?expression before ?insn starts with the ?expression
// flowing from the first ?predecessor in the enumeration

// Single predecessor case

PathExpressionBefore(?meth, ?insn, ?exprBase) :-
	PathExpressionAfterTrue(?meth, ?pred, ?exprBase),
	SinglePredOfInsnInMethod(?pred, ?insn, ?meth),
	isIf_Insn(?pred),
	IsJumpTarget(?insn).

PathExpressionBefore(?meth, ?insn, ?exprBase) :-
	PathExpressionAfterFalse(?meth, ?pred, ?exprBase),
	SinglePredOfInsnInMethod(?pred, ?insn, ?meth),
	isIf_Insn(?pred),
	!IsJumpTarget(?insn).

PathExpressionBefore(?meth, ?insn, ?exprBase) :-
	PathExpressionAfterTrue(?meth, ?pred, ?exprBase),
	SinglePredOfInsnInMethod(?pred, ?insn, ?meth),
	!isIf_Insn(?pred).

// Multiple ?predecessors case

// Base

BuildPathExprBefore(?meth, ?pred,  ?expr, ?insn) :-
	FirstOfMultiplePredsOfInsnInMethod(?pred, ?insn, ?meth),
	isIf_Insn(?pred),
	IsJumpTarget(?insn),
	PathExpressionAfterTrue(?meth, ?pred, ?expr).

BuildPathExprBefore(?meth, ?pred, ?expr, ?insn) :-
	FirstOfMultiplePredsOfInsnInMethod(?pred, ?insn, ?meth),
	isIf_Insn(?pred),
	!IsJumpTarget(?insn),
	PathExpressionAfterFalse(?meth, ?pred, ?expr).

BuildPathExprBefore(?meth, ?pred,  ?expr, ?insn) :-
	FirstOfMultiplePredsOfInsnInMethod(?pred, ?insn, ?meth),
	!isIf_Insn(?pred),
	PathExpressionAfterTrue(?meth, ?pred, ?expr).


BuildPathExprBefore(?meth, ?next, ?pathExpr, ?insn) :-
  BuildPathExprBefore(?meth, ?prev, ?expr, ?insn),
  NextOfMultiplePredsOfInsnInMethod(?next, ?prev, ?insn, ?meth),
  !isIf_Insn(?next),
  PathExpressionAfterTrue(?meth, ?next, ?exprPrev),
  ?pathExpr = ["||", "boolean", ?expr, ?exprPrev].
.plan 1:(3,2,1)


// BuildPathExprBefore(?meth, ?next, ?pathExpr, ?insn) :-
// 	BuildPathExprBefore(?meth, ?prev, ?expr, ?insn),
// 	IsJumpTarget(?insn),
// 	NextOfMultiplePredsOfInsnInMethod(?next, ?prev, ?insn, ?meth),
// 	isIf_Insn(?next),
// 	PathExpressionAfterTrue(?meth, ?next, ?exprPrev),
// 	?pathExpr = ["||", "boolean", ?expr, ?exprPrev].
// .plan 1:(5,3,4,2,1)

BuildPathExprBefore(?meth, ?next, ?pathExpr, ?insn) :-
	BuildPathExprBefore(?meth, ?prev, ?expr, ?insn),
	NextOfMultiplePredsOfInsnInMethod(?next, ?prev, ?insn, ?meth),
	isIf_Insn(?next),
	IsJumpTarget(?insn),
	PathExpressionAfterTrue(?meth, ?next, ?exprPrev),
	?pathExpr = ["||", "boolean", ?exprPrev, ?expr].
.plan 1:(5,2,3,4,1)

BuildPathExprBefore(?meth, ?next, ?pathExpr, ?insn) :-
	NextOfMultiplePredsOfInsnInMethod(?next, ?prev, ?insn, ?meth),
	BuildPathExprBefore(?meth, ?prev, ?expr, ?insn),
	isIf_Insn(?next),
	!IsJumpTarget(?insn),
	PathExpressionAfterFalse(?meth, ?next, ?exprPrev),
	?pathExpr = ["||", "boolean", ?expr, ?exprPrev].

PathExpressionBefore(?meth, ?insn, ?pathExpr) :-
  LastOfMultiplePredsOfInsnInMethod(?pred, ?insn, ?meth),
  BuildPathExprBefore(?meth, ?pred, ?pathExpr, ?insn).
