//.type BooleanExpr = [
//    ?base: symbol,
//    ?left: BooleanExpr,
//    ?right: BooleanExpr
//]
//
//.decl ResolveBooleanExpr(?inst: Instruction, ?var: symbol, ?expr: BooleanExpr)
//.decl ToStringBoolean(?expr: BooleanExpr, ?out: symbol)
//
//.output ResolveBooleanExpr
//.output ToStringBoolean
//
//ResolveBooleanExpr(?inst, ?var, ?expr),
//ToStringBoolean(?expr, ?var) :-
//    Instruction_Method(?inst, ?meth),
//    Var_Type(?var, ?type),
//    Type_boolean(?type),
//    FormalParam(_, ?meth, ?var),
//    ?expr = [?var, nil, nil].
//
//ResolveBooleanExpr(?inst, ?var, ?expr),
//ToStringBoolean(?expr, ?var) :-
//    isMethodInvocation(?inst),
//    AssignReturnValue(?meth, ?var),
//    Var_Type(?var, ?type),
//    Type_boolean(?type),
//    ?expr = [?var, nil, nil].
//
//ResolveBooleanExpr(?inst, ?var, ?expr),
//ToStringBoolean(?expr, ?var) :-
//    isLoadInstanceField_Insn(?inst),
//    LoadInstanceField_To(?inst, ?var),
//    Var_Type(?var, ?type),
//    Type_boolean(?type),
//    ?expr = [?var, nil, nil].
//
//// Resolve boolean expressions coming from constant assignments
//
//ResolveBooleanExpr(?inst, ?var, ?expr),
//ToStringBoolean(?expr, ?out) :-
//    AssignInstruction_To(?inst, ?var),
//    Var_Type(?var, ?type),
//    Type_boolean(?type),
//    isAssignNumConstant_Insn(?inst),
//    AssignNumConstant_Id(?inst, ?const),
//    ?expr = [?const, nil, nil],
//    ?out = ?const.
//
//// Resolve boolean expressions coming from parameter assignments (@parameter0 -> method inner local variable)
//
//ResolveBooleanExpr(?inst, ?var, ?expr),
//ToStringBoolean(?expr, ?out) :-
//    AssignInstruction_To(?inst, ?var),
//    Var_Type(?var, ?type),
//    Type_boolean(?type),
//    isAssignNumConstant_Insn(?inst),
//    AssignLocal_From(?inst, ?from),
//    ResolveBooleanExpr(_, ?from, ?expr),
//    ?out = ?from.
//
//// Resolve boolean expressions coming from unary assignments
//
//ResolveBooleanExpr(?inst, ?var, ?expr),
//ToStringBoolean(?expr, cat(?op, cat(" ", ?out))) :-
//    AssignInstruction_To(?inst, ?var),
//    isAssignUnop_Insn(?inst),
//    Var_Type(?var, ?type),
//    AssignOper_From(?inst, _, ?right),
//    _OperatorAt(?inst, ?op),
//    ResolveBooleanExpr(_, ?right, ?rBooleanExpr),
//    ToStringBoolean(?rBooleanExpr, ?out),
//    ?expr = [?op, ?rBooleanExpr, nil].
//
//// Resolve boolean expressions coming from binary assignments
//
//ResolveBooleanExpr(?inst, ?var, ?expr),
//ToStringBoolean(?expr, cat("(", cat(?out1, cat(")", cat(?op, cat("(", cat(?out2, ")"))))))) :-
//    AssignInstruction_To(?inst, ?var),
//    Var_Type(?var, ?type),
//    isAssignBinop_Insn(?inst),
//    AssignOper_From(?inst, ?pos1, ?right1),
//    AssignOper_From(?inst, ?pos2, ?right2),
//    ?pos1 < ?pos2,
//    _OperatorAt(?inst, ?op),
//    ResolveBooleanExpr(_, ?right1, ?lBooleanExpr),
//    ResolveBooleanExpr(_, ?right2, ?rBooleanExpr),
//    ToStringBoolean(?lBooleanExpr, ?out1),
//    ToStringBoolean(?rBooleanExpr, ?out2),
//    ?expr = [?op, ?lBooleanExpr, ?rBooleanExpr].
