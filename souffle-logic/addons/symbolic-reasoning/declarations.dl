// #define DEBUG

/* Types */

.type SymbolicInput = Var | MethodInvocation | NumConstant
.type Operator = symbol

.type Base = SymbolicInput | Operator

.type Expr = [
    ?base: Base,
    ?type: PrimitiveType,
    ?left: Expr,
    ?right: Expr
]

/* Various util predicate declarations */

.decl FirstIfInsnInMethod(?insn: Instruction, ?meth: Method)
.decl IfsInMethod(?insn: Instruction, ?meth: Method)
.decl FirstPredOfInsnInMethodOrdinal(?meth: Method, ?first: number, ?insn: Instruction)
.decl FirstPredOfInsnInMethod(?meth: Method, ?first: Instruction, ?insn: Instruction)
.decl LastPredOfInsnInMethodOrdinal(?meth: Method, ?first: number, ?insn: Instruction)
.decl LastPredOfInsnInMethod(?meth: Method, ?first: Instruction, ?insn: Instruction)
.decl NotNextPredOfInsnInMethod(?meth: Method, ?prev: Instruction, ?next: Instruction, ?insn: Instruction)
.decl NextPredOfInsnInMethod(?meth: Method, ?prev: Instruction, ?next: Instruction, ?insn:Instruction)

.decl NegateOp(after: Operator, before: Operator)

.decl IfVarVar(?inst: Instruction, ?var: Var, ?meth: Method, ?right1: Var, ?right2: Var, ?op: Operator)
.decl IfVarConst(?inst: Instruction, ?var: Var, ?meth: Method, ?right1: Var, ?right2: NumConstant, ?op: Operator)

.decl SinglePredOfInsnInMethod(?pred: Instruction, ?insn: Instruction, ?meth: Method)
.decl FirstOfMultiplePredsOfInsnInMethod(?pred: Instruction, ?insn: Instruction, ?meth: Method)
.decl NextOfMultiplePredsOfInsnInMethod(?next: Instruction, ?prev: Instruction, ?insn: Instruction, ?meth: Method)
.decl LastOfMultiplePredsOfInsnInMethod(?pred: Instruction, ?insn: Instruction, ?meth: Method)

.decl isBooleanExpr(?expr: Expr)
.decl isInputExpr(?expr: Expr)
.decl isExpr(?expr: Expr)

#ifdef DEBUG
.decl ToString(?expr: Expr, ?out: symbol)
#endif

/* Expression tree construction declarations */

.decl ResolveExpr(?meth: Method, ?var: symbol, ?expr: Expr)

/* Path expression construction declarations */

.decl BuildPathExprBefore(?meth:Method, prev:Instruction, ?exprBase: Expr, ?insn:Instruction)
.decl PathExpressionBefore(?meth:Method, ?insn: Instruction, ?pathExpr: Expr)
.decl PathExpressionAfterTrue(?meth: Method, ?insn: Instruction, ?pathExpr: Expr)
.decl PathExpressionAfterFalse(?meth: Method, ?insn: Instruction, ?pathExpr: Expr)

.output ResolveExpr
#ifdef DEBUG
.output ToString
#endif
.output isBooleanExpr
.output isInputExpr
.output isExpr

//.output BuildPathExprBefore
.output PathExpressionBefore
.output PathExpressionAfterTrue
.output PathExpressionAfterFalse
