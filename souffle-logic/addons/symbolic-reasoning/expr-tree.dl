.type Expr = [
    ?base: symbol,
    ?type: PrimitiveType,
    ?left: Expr,
    ?right: Expr
]



.decl ResolveExpr(?inst: Instruction, ?var: symbol, ?expr: Expr)
.decl ToString(?expr: Expr, ?out: symbol)
.decl isArithmeticExpr(?expr: Expr)
.decl isBooleanExpr(?expr: Expr)

.output ResolveExpr
.output ToString
.output isArithmeticExpr
.output isBooleanExpr

// Base cases: num constants, method parameters, class field load assignments, 
//             method calls results, variables in catch blocks

//ResolveExpr(?inst, ?var, ?expr),
//ToString(?expr, ?var) :-
//    AssignNumConstant_Id(?inst, ?var),
//    isNumConstant(?var),
//    ?expr = [?var, nil, nil].

isArithmeticExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, ?var) :-
    Instruction_Method(?inst, ?meth),
    Var_Type(?var, ?type),
    FormalParam(_, ?meth, ?var),
    ?expr = [?var, ?type, nil, nil].

isArithmeticExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, ?var) :-
    isMethodInvocation(?inst),
    AssignReturnValue(?meth, ?var),
    Var_Type(?var, ?type),
    ?expr = [?var, ?type, nil, nil].

isArithmeticExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, ?var) :-
    isLoadInstanceField_Insn(?inst),
    LoadInstanceField_To(?inst, ?var),
    Var_Type(?var, ?type),
    ?expr = [?var, ?type, nil, nil].

// Resolve expressions coming from constant assignments

isArithmeticExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, ?out) :-
    AssignInstruction_To(?inst, ?var),
    Var_Type(?var, ?type),
    isAssignNumConstant_Insn(?inst),
    AssignNumConstant_Id(?inst, ?const),
    ?expr = [?const, ?type, nil, nil],
    ?out = ?const.

// Resolve expressions coming from parameter assignments (@parameter0 -> method inner local variable)

isArithmeticExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, ?out) :-
    AssignInstruction_To(?inst, ?var),
    Var_Type(?var, ?type),
    AssignLocal_From(?inst, ?from),
    ResolveExpr(_, ?from, ?expr),
    ?out = ?from.

// Resolve expressions coming from unary assignments

isArithmeticExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, cat(?op, cat(" ", ?out))) :-
    AssignInstruction_To(?inst, ?var),
    isAssignUnop_Insn(?inst),
    Var_Type(?var, ?type),
    AssignOper_From(?inst, _, ?right),
    _OperatorAt(?inst, ?op),
    ResolveExpr(_, ?right, ?rExpr),
    ToString(?rExpr, ?out),
    ?expr = [?op, ?type, ?rExpr, nil].
    
// Resolve expressions coming from binary assignments

isArithmeticExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, cat("(", cat(?out1, cat(")", cat(?op, cat("(", cat(?out2, ")"))))))) :-
    AssignInstruction_To(?inst, ?var),
    Var_Type(?var, ?type),
    isAssignBinop_Insn(?inst),
    AssignOper_From(?inst, ?pos1, ?right1),
    AssignOper_From(?inst, ?pos2, ?right2),
    ?pos1 < ?pos2,
    _OperatorAt(?inst, ?op),
    ResolveExpr(_, ?right1, ?lExpr),
    ResolveExpr(_, ?right2, ?rExpr),
    ToString(?lExpr, ?out1),
    ToString(?rExpr, ?out2),
    ?expr = [?op, ?type, ?lExpr, ?rExpr].

// Resolve expressions inside if-conditions (relational operators <- arithmetic operands, boolean operators <- boolean operands)

isBooleanExpr(?expr),
ResolveExpr(?inst, ?var, ?expr),
ToString(?expr, cat("(", cat(?out1, cat(")", cat(?op, cat("(", cat(?out2, ")"))))))) :-
    DummyIf_Var(?inst, ?var),
    isIf_Insn(?inst),
    Var_Type(?var, ?type),
    Type_boolean(?type),
    If_Var(?inst, ?pos1, ?right1),
    If_Var(?inst, ?pos2, ?right2),
    ?pos1 < ?pos2,
    _OperatorAt(?inst, ?op),
    ResolveExpr(_, ?right1, ?lExpr),
    ResolveExpr(_, ?right2, ?rExpr),
    ToString(?lExpr, ?out1),
    ToString(?rExpr, ?out2),
    ?expr = [?op, ?type, ?lExpr, ?rExpr].

