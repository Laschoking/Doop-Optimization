
/*  Input expressions are coming from
 *  1) Method parameters
 *  2) Field loads
 *  3) Static class fields
 *  4) Num Constant assignments
 *  5) Phi instructions
 */

// Method Parameters

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
	isAssignLocal_Insn(?insn),
  AssignLocal_From(?insn, ?param),
  FormalParam(_, ?meth, ?param),
  Var_Type(?param, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  AssignInstruction_To(?insn, ?var),
  Instruction_Method(?insn, ?meth),
  ?expr = [?param, ?type, nil, nil].

// Method Invocation result

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  isMethodInvocation(?methInvo),
  MethodInvocation_Method(?methInvo, ?methSig),
  Method_ReturnType(?methSig, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  Instruction_Method(?methInvo, ?meth),
  AssignReturnValue(?methInvo, ?var),
  ?expr = [?var, ?type, nil, nil].

// Load instance fields

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  isLoadInstanceField_Insn(?insn),
  LoadInstanceField_To(?insn, ?var),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  Instruction_Method(?insn, ?meth),
  ?expr = [?var, ?type, nil, nil].

// Load static fields

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  isLoadStaticField_Insn(?insn),
  LoadStaticField_To(?insn, ?var),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  Instruction_Method(?insn, ?meth),
  ?expr = [?var, ?type, nil, nil].

// Assign Num Constant

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  isAssignNumConstant_Insn(?insn),
  AssignInstruction_To(?insn, ?var),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  Instruction_Method(?insn, ?meth),
  AssignNumConstant_Id(?insn, ?const),
  ?expr = [?const, ?type, nil, nil].

// AssignLocal for phi instructions

/*
 *
 * Phi-expressions are considered to be
 * symbolic inputs. That is, a phi
 * assignment to a variable is handled
 * just like formal parameters, field
 * loads etc
 *
 */

isExpr(?expr),
ResolveExpr(?meth, ?var, ?expr) :-
  Instruction_Method(?insn, ?meth),
  isAssignLocal_Insn(?insn),
  AssignInstruction_To(?insn, ?var),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  c = count: AssignInstruction_To(_, ?var),
  c > 1,
  ?expr = [?var, ?type, nil, nil].

// Assign Local for non-phi instructions

ResolveExpr(?meth, ?var, ?expr) :-
  Instruction_Method(?insn, ?meth),
  isAssignLocal_Insn(?insn),
  AssignInstruction_To(?insn, ?var),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  c = count: AssignInstruction_To(_, ?var),
  c = 1,
  AssignLocal_From(?insn, ?from),
  ResolveExpr(?meth, ?from, ?expr).


// Assign Unary

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  isAssignUnop_Insn(?insn),
  AssignInstruction_To(?insn, ?var),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  Instruction_Method(?insn, ?meth),
  AssignOper_From(?insn, _, ?right),
  _OperatorAt(?insn, ?op),
  ResolveExpr(?meth, ?right, ?rExpr),
  ?expr = [?op, ?type, ?rExpr, nil].

// Assign Binary

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  AssignBinaryVarVar(_, ?var, ?meth, ?right1, ?right2, ?op),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  ResolveExpr(?meth, ?right1, ?lExpr),
  ResolveExpr(?meth, ?right2, ?rExpr),
  ?expr = [?op, ?type, ?lExpr, ?rExpr].

isExpr(?constR),
ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  AssignBinaryVarConst(_, ?var, ?meth, ?right1, ?right2, ?op),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  ResolveExpr(?meth, ?right1, ?lExpr),
  ?constR = [?right2, ?type, nil, nil],
  ?expr = [?op, ?type, ?lExpr, ?constR].

isExpr(?constL),
ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  AssignBinaryConstVar(_, ?var, ?meth, ?right1, ?right2, ?op),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  ResolveExpr(?meth, ?right2, ?rExpr),
  ?constL = [?right1, ?type, nil, nil],
  ?expr = [?op, ?type, ?constL, ?rExpr].

LeftExpr(?var, ?op, ?constL),
isExpr(?constL) :-
  AssignBinaryConstConst(_, ?var, ?meth, ?right1, ?right2, ?op),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  ?constL = [?right1, ?type, nil, nil].

RightExpr(?var, ?op, ?constR),
isExpr(?constR) :-
  AssignBinaryConstConst(_, ?var, ?meth, ?right1, ?right2, ?op),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  ?constR = [?right2, ?type, nil, nil].

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  LeftExpr(?var, ?op, ?constL),
  RightExpr(?var, ?op, ?constR),
  Var_Type(?var, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  Var_DeclaringMethod(?var, ?meth),
  ?expr = [?op, ?type, ?constL, ?constR].

// isExpr((?constL),)
// isExpr((?constR),)
// ResolveExpr(?meth, ?var, ?expr),
// isExpr(?expr) :-
//   AssignBinaryConstConst(_, ?var, ?meth, ?right1, ?right2, ?op),
//   Var_Type(?var, ?type),
//   isPrimitiveType(?type),
//   ?constL = [?right1, ?type, nil, nil],
//   ?constR = [?right2, ?type, nil, nil],
//   ?expr = [?op, ?type, ?constL, ?constR].

// If Conditions - Var_Var

ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  IfVarVar(_, ?var, ?meth, ?right1, ?right2, ?op),
  ResolveExpr(?meth, ?right1, ?lExpr),
  ResolveExpr(?meth, ?right2, ?rExpr),
  ?expr = [?op, "boolean", ?lExpr, ?rExpr].

// If Conditions - Var_Const
isExpr(?constExpr),
ResolveExpr(?meth, ?var, ?expr),
isExpr(?expr) :-
  IfVarConst(_, ?var, ?meth, ?right1, ?right2, ?op),
	Var_Type(?right1, ?type),
  (isPrimitiveType(?type) ; isReferenceType(?type)),
  ?constExpr = [?right2, ?type, nil, nil],
  ResolveExpr(?meth, ?right1, ?lExpr),
  ?expr = [?op, "boolean", ?lExpr, ?constExpr].
