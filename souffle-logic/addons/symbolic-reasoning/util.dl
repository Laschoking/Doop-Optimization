// Declarations

.decl FirstPredOfInsnInMethodOrdinal(?meth: Method, ?first: number, ?insn: Instruction)
.decl FirstPredOfInsnInMethod(?meth: Method, ?first: Instruction, ?insn: Instruction)
.decl LastPredOfInsnInMethodOrdinal(?meth: Method, ?first: number, ?insn: Instruction)
.decl LastPredOfInsnInMethod(?meth: Method, ?first: Instruction, ?insn: Instruction)
.decl NotNextPredOfInsnInMethod(?meth: Method, ?prev: Instruction, ?next: Instruction, ?insn: Instruction)
.decl NextPredOfInsnInMethod(?meth: Method, ?prev: Instruction, ?next: Instruction, ?insn:Instruction)

.decl NegateOp(after: Operator, before: Operator)

.decl IfVarVar(?inst: Instruction, ?var: Var, ?meth: Method, ?right1: Var, ?right2: Var, ?op: Operator)
.decl IfVarConst(?inst: Instruction, ?var: Var, ?meth: Method, ?right1: Var, ?right2: NumConstant, ?op: Operator)

.decl SinglePredOfInsnInMethod(?pred: Instruction, ?insn: Instruction, ?meth: Method)
.decl FirstOfMultiplePredsOfInsnInMethod(?pred: Instruction, ?insn: Instruction, ?meth: Method) 
.decl NextOfMultiplePredsOfInsnInMethod(?next: Instruction, ?prev: Instruction, ?insn: Instruction, ?meth: Method)
.decl LastOfMultiplePredsOfInsnInMethod(?pred: Instruction, ?insn: Instruction, ?meth: Method) 

.output FirstPredOfInsnInMethod
.output LastPredOfInsnInMethod
.output NextPredOfInsnInMethod

// Facts

// Facts for NegateOp

NegateOp("==", "!=").
NegateOp("!=", "==").

NegateOp("<", ">=").
NegateOp(">", "<=").

NegateOp(">=", "<").
NegateOp("<=", ">").

// Rules

/*
 * Multiple predecessors may flow up to this statement, thus we need
 * to enumerate all possible predecessors in order to build the
 * corresponding path expression, before the instruction.
 */

// Pick the predecessor with the minimum ord value as the ?first predecessor

FirstPredOfInsnInMethodOrdinal(?meth, ?firstOrd, ?insn) :-
    Instruction_Method(?insn, ?meth),
    ?firstOrd = min ord(?prev): MayPredecessorModuloThrow(?prev, ?insn).

FirstPredOfInsnInMethod(?meth, ?first, ?insn) :-
    Instruction_Method(?insn, ?meth),
    MayPredecessorModuloThrow(?first, ?insn),
    ?min_ord = ord(?first),
    FirstPredOfInsnInMethodOrdinal(?meth, ?min_ord, ?insn).

// Pick the predecessor with the maximum ord value as the ?last predecessor

LastPredOfInsnInMethodOrdinal(?meth, ?lastOrd, ?insn) :-
    Instruction_Method(?insn, ?meth),
    ?lastOrd = max ord(?prev): MayPredecessorModuloThrow(?prev, ?insn).

LastPredOfInsnInMethod(?meth, ?last, ?insn) :-
    Instruction_Method(?insn, ?meth),
    MayPredecessorModuloThrow(?last, ?insn),
    ?max_ord = ord(?last),
    LastPredOfInsnInMethodOrdinal(?meth, ?max_ord, ?insn).

// Pick as ?next predecessor of ?insn the instruction with the least
// greater ord number, compared to the ?prev predecessor

NotNextPredOfInsnInMethod(?meth, ?prev, ?next, ?insn) :-
    Instruction_Method(?insn, ?meth),
    MayPredecessorModuloThrow(?prev, ?insn),
    MayPredecessorModuloThrow(?next, ?insn),
    MayPredecessorModuloThrow(?nextPossible, ?insn),
    ord(?prev) < ord(?next),
    ord(?prev) < ord(?nextPossible),
    ord(?nextPossible) < ord(?next).

NextPredOfInsnInMethod(?meth, ?prev, ?next, ?insn) :-
    Instruction_Method(?insn, ?meth),
    MayPredecessorModuloThrow(?prev, ?insn),
    MayPredecessorModuloThrow(?next, ?insn),
    ord(?prev) < ord(?next),
    !NotNextPredOfInsnInMethod(?meth, ?prev, ?next, ?insn).


// Determine expr operands for if-statements

IfVarVar(?inst, ?var, ?meth, ?right1, ?right2, ?op) :-
    Instruction_Method(?inst, ?meth),
    DummyIf_Var(?inst, ?var),
    isIf_Insn(?inst),
    If_Var(?inst, ?pos1, ?right1),
    If_Var(?inst, ?pos2, ?right2),
    ?pos1 < ?pos2,
    _OperatorAt(?inst, ?op).

IfVarConst(?inst, ?var, ?meth, ?right1, ?right2, ?op) :-
    Instruction_Method(?inst, ?meth),
    DummyIf_Var(?inst, ?var),
    isIf_Insn(?inst),
    If_Var(?inst, ?pos1, ?right1),
    If_Constant(?inst, ?pos2, ?right2),
    ?pos1 < ?pos2,
    _OperatorAt(?inst, ?op).

// Single Pred

SinglePredOfInsnInMethod(?pred, ?insn, ?meth) :-
    Instruction_Method(?insn, ?meth),
    FirstPredOfInsnInMethod(?meth, ?pred, ?insn),
    LastPredOfInsnInMethod(?meth, ?pred, ?insn).

// Multiple Preds - First

FirstOfMultiplePredsOfInsnInMethod(?pred, ?insn, ?meth) :-
    Instruction_Method(?insn, ?meth),
    FirstPredOfInsnInMethod(?meth, ?pred, ?insn),
    !LastPredOfInsnInMethod(?meth, ?pred, ?insn).

// Multiple Preds - Next

NextOfMultiplePredsOfInsnInMethod(?next, ?prev, ?insn, ?meth) :-
    Instruction_Method(?insn, ?meth),
    !LastPredOfInsnInMethod(?meth, ?prev, ?insn),
    NextPredOfInsnInMethod(?meth, ?prev, ?next, ?insn).

// Multiple Preds - Last

LastOfMultiplePredsOfInsnInMethod(?pred, ?insn, ?meth) :-
    Instruction_Method(?insn, ?meth),
    !FirstPredOfInsnInMethod(?meth, ?pred, ?insn),
    LastPredOfInsnInMethod(?meth, ?pred, ?insn).
   
