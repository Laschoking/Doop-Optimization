// Transitivity

// temp relation for debugging 

.decl Transitive(?expr: Expr)
.output Transitive

/**
  * Captures every possible transitive rule,
  * for each relational operator.
  * 
  * It eventually works because of the boolean
  * path expressions encoding.
  *
 **/

// Transitive(?exprOther),
// ExprImpliesOther(?expr, ?exprOther) :-
//   isBooleanExpr(?expr),
//   ?expr = ["&&", "boolean", ?expr1, ?expr2],
//   isRelationalOperator(?op),
//   ?expr1 = [?op, ?type, ?exprX, ?exprY],
//   ?expr2 = [?op, ?type, ?exprY, ?exprZ],
//   ?exprOther = [?op, ?type, ?exprX, ?exprZ],
//   isBooleanExpr(?exprOther).

// Reflexivity

ExprIsAlwaysTrue(?expr) :-
  isBooleanExpr(?expr),
  ?expr = [?op, ?type, ?exprInner, ?exprInner],
  (?op = "<=" ; ?op = "==" ; ?op = ">=").

// Anti-Symmetry

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExpr(?expr),
  ?expr = ["&&", "boolean", ?expr1, ?expr2],
  ?expr1 = [">=", ?type, ?exprX, ?exprY],
  ?expr2 = [">=", ?type, ?exprY, ?exprX],
  ?exprOther = ["==", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExpr(?expr),
  ?expr = ["&&", "boolean", ?expr1, ?expr2],
  ?expr1 = ["<=", ?type, ?exprX, ?exprY],
  ?expr2 = ["<=", ?type, ?exprY, ?exprX],
  ?exprOther = ["==", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

// Various

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExpr(?expr),
  ?expr = ["<", ?type, ?exprX, ?exprY],
  ?exprOther = ["<=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExpr(?expr),
  ?expr = [">", ?type, ?exprX, ?exprY],
  ?exprOther = [">=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExpr(?expr),
  (?op = ">" ; ?op = "<"),
  ?expr = [?op, ?type, ?exprX, ?exprY],
  ?exprOther = ["!=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprIsAlwaysFalse(?expr) :-
  isBooleanExpr(?expr),
  ?expr = ["&&", "boolean", ?expr1, ?expr2],
  ?expr1 = ["<", ?type, ?exprX, ?exprY],
  ?expr2 = [">=", ?type, ?exprX, ?exprY].

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExpr(?expr),
  ?expr = ["<=", ?type, ?exprX, ?exprY],
  ?exprOther = ["||", "boolean", ?exprL, ?exprR],
  ?exprL = ["<", ?type, ?exprX, ?exprY],
  ?exprR = ["==", ?type, ?exprX, ?exprY].

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExpr(?expr),
  ?expr = [">=", ?type, ?exprX, ?exprY],
  ?exprOther = ["||", "boolean", ?exprL, ?exprR],
  ?exprL = [">", ?type, ?exprX, ?exprY],
  ?exprR = ["==", ?type, ?exprX, ?exprY].
