/*
 * The reasoning performed under the following rules is said
 * to be arithmetic due to the fact that the expressions
 * considered here mostly (may) consist of relational operators 
 * between arithmetic expressions.
 *
 */

// Temp relation for debugging 

.decl Transitive(?expr: Expr)
.output Transitive

// Transitivity

/**
  * Captures every possible transitive rule,
  * for each relational operator.
  * 
  * It eventually works because of the boolean
  * path expressions encoding.
  *
 **/

Transitive(?exprOther),
ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExprLeftRight(?exprOther, ?exprX, ?exprZ, ?op),
  isRelationalOperator(?op),
  isTransitiveBooleanConjunction(?expr, ?exprX, ?exprZ, ?op).

// Reflexivity

ExprIsAlwaysTrue(?expr) :-
  isBooleanExprLeftRight(?expr, ?exprInner, ?exprInner, ?op),
  (?op = "<=" ; ?op = "==" ; ?op = ">=").

// Anti-Symmetry

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExprLeftRight(?expr, ?expr1, ?expr2, "&&"),
  ?expr1 = [">=", ?type, ?exprX, ?exprY],
  ?expr2 = [">=", ?type, ?exprY, ?exprX],
  ?exprOther = ["==", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExprLeftRight(?expr, ?expr1, ?expr2, "&&"),
  ?expr1 = ["<=", ?type, ?exprX, ?exprY],
  ?expr2 = ["<=", ?type, ?exprY, ?exprX],
  ?exprOther = ["==", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

// Various

ExprImpliesOther(?expr, ?exprOther) :-
  ?expr = ["<", ?type, ?exprX, ?exprY],
  isBooleanExpr(?expr),
  ?exprOther = ["<=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprImpliesOther(?expr, ?exprOther) :-
  ?expr = [">", ?type, ?exprX, ?exprY],
  isBooleanExpr(?expr),
  ?exprOther = [">=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprImpliesOther(?expr, ?exprOther) :-
  ?expr = [?op, ?type, ?exprX, ?exprY],
  isBooleanExpr(?expr),
  (?op = ">" ; ?op = "<"),
  ?exprOther = ["!=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprIsAlwaysFalse(?expr) :-
  ?expr1 = ["<", ?type, ?exprX, ?exprY],
  ?expr2 = [">=", ?type, ?exprX, ?exprY],
  ?expr = ["&&", "boolean", ?expr1, ?expr2],
  isBooleanExpr(?expr).

ExprImpliesOther(?expr, ?exprOther) :-
  ?expr = ["<=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?expr),
  ?exprOther = ["||", "boolean", ?exprL, ?exprR],
  ?exprL = ["<", ?type, ?exprX, ?exprY],
  ?exprR = ["==", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).

ExprImpliesOther(?expr, ?exprOther) :-
  ?expr = [">=", ?type, ?exprX, ?exprY],
  isBooleanExpr(?expr),
  ?exprOther = ["||", "boolean", ?exprL, ?exprR],
  ?exprL = [">", ?type, ?exprX, ?exprY],
  ?exprR = ["==", ?type, ?exprX, ?exprY],
  isBooleanExpr(?exprOther).
