// Axioms and inference rules for boolean ?expressions

// Every ?expression implies itself

ExprImpliesOther(?expr1, ?expr1) :-
  isBooleanExpr(?expr1).

//
// A && B => A and A && B => B
//

ExprImpliesOther(?expr, ?exprLeft),
ExprImpliesOther(?expr, ?exprRight) :-
  isBooleanExprLeftRightInMethod(?expr, ?exprLeft, ?exprRight, "&&", ?meth).
//
// A && B => B && A
//

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExprLeftRightInMethod(?expr, ?exprLeft, ?exprRight, "&&", ?meth),
  isBooleanExprLeftRightInMethod(?exprOther, ?exprRight, ?exprLeft, "&&", ?meth).

//
// A => A || B and B => A || B
//

ExprImpliesOther(?exprLeft, ?expr),
ExprImpliesOther(?exprRight, ?expr) :-
  isBooleanExprLeftRightInMethod(?expr, ?exprLeft, ?exprRight, "||", ?meth).
//
// A || B => B || A
//

ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExprLeftRightInMethod(?expr, ?exprLeft, ?exprRight, "||", ?meth),
  isBooleanExprLeftRightInMethod(?exprOther, ?exprRight, ?exprLeft, "||", ?meth).

/* Distributive property rules */

//
// A && (B || C) => (A && B) || (A && C)
//

isExpr(?exprOther),
isExpr(?exprLeft),
isExpr(?exprRight),
ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExprLeftRightInMethod(?expr, ?exprA, ?exprOr, "&&", ?meth),
  ?exprOr = ["||", "boolean", ?exprB, ?exprC],
  ?exprLeft = ["&&", "boolean", ?exprA, ?exprB],
  ?exprRight = ["&&", "boolean", ?exprA, ?exprC],
  ?exprOther = ["||", "boolean", ?exprLeft, ?exprRight].

//
// (A && B) || (A && C) => A && (B || C)
//

isExpr(?exprOther),
isExpr(?exprNRight),
ExprImpliesOther(?expr, ?exprOther) :-
  isBooleanExprLeftRightInMethod(?expr, ?exprLeft, ?exprRight, "||", ?meth),
  ?exprLeft = ["&&", "boolean", ?exprA, ?exprB],
  ?exprRight = ["&&", "boolean", ?exprA, ?exprC],
  ?exprNRight =["||", "boolean", ?exprB, ?exprC],
  ?exprOther = ["&&", "boolean", ?exprA, ?exprNRight].

//
// A || (B && C) => (A || B) && (A || C)
//

ExprImpliesOther(?expr, ?exprOther) :-
  ?exprFoo = ["&&", "boolean", ?exprB, ?exprC],
  isBooleanExprLeftRightInMethod(?expr, ?exprA, ?exprFoo, "||", ?meth),
  ?exprLeft = ["||", "boolean", ?exprA, ?exprB],
  ?exprRight = ["||", "boolean", ?exprA, ?exprC],
  isBooleanExprLeftRightInMethod(?exprOther, ?exprLeft, ?exprRight, "&&", ?meth).

//
// (A || B) && (A || C) => A || (B && C)
//

ExprImpliesOther(?expr, ?exprOther) :-
  ?expr1 = ["||", "boolean", ?exprA, ?exprB],
  ?expr2 = ["||", "boolean", ?exprA, ?exprC],
  isBooleanExprLeftRightInMethod(?expr, ?expr1, ?expr2, "&&", ?meth),
  ?exprRight = ["&&", "boolean", ?exprB, ?exprC],
  isBooleanExprLeftRightInMethod(?exprOther, ?exprA, ?exprRight, "||", ?meth).


/////////// ===========================================
/// Above are axioms, below are inference rules
///////////

//
// A => B and B => C implies A => C
//

ExprImpliesOther(?expr, ?exprOther) :-
  ExprImpliesOther(?expr, ?exprInter),
  ExprImpliesOther(?exprInter, ?exprOther).
 .plan 1:(2,1)

//
//// A => B and A => C implies A => B && C
//

ExprImpliesOther(?exprA, ?exprOther) :-
  isBooleanExprLeftRightInMethod(?exprOther, ?exprB, ?exprC, "&&", ?meth),
  ExprImpliesOther(?exprA, ?exprB),
  ExprImpliesOther(?exprA, ?exprC).
 .plan 1:(1,3,2)

//
//// B => A and C => A implies B || C => A
//

ExprImpliesOther(?exprLeft, ?exprA) :-
  isBooleanExprLeftRightInMethod(?exprLeft, ?exprB, ?exprC, "||", ?meth),
	ExprImpliesOther(?exprB, ?exprA),
  ExprImpliesOther(?exprC, ?exprA).
 .plan 1:(1,3,2)

//
//// A => B and ExprIsNegationOfOther(B, B') and ExprIsNegationOfOther(A, A') implies B' => A'
//

ExprImpliesOther(?exprBP, ?exprAP) :-
  ExprImpliesOther(?exprA, ?exprB),
  ExprIsNegationOfOther(?exprB, ?exprBP),
  ExprIsNegationOfOther(?exprA, ?exprAP).

//
//// ExprIsAlwaysFalse(B) implies B => A
//

ExprImpliesOther(?expr, ?exprOther) :-
	ExprIsAlwaysFalse(?expr),
  isBooleanExprLeftRightInMethod(?expr, _, _, _, ?meth),
  isBooleanExprLeftRightInMethod(?exprOther, _, _, _, ?meth).


//
//// ExprIsAlwaysTrue(B) implies A => B
//

ExprImpliesOther(?exprOther, ?expr) :-
	ExprIsAlwaysTrue(?expr),
  isBooleanExprLeftRightInMethod(?expr, _, _, _, ?meth),
  isBooleanExprLeftRightInMethod(?exprOther, _, _, _, ?meth).

//
//// A => (B || false)  implies  A => B
//

ExprImpliesOther(?expr, ?exprOther) :-
  ExprImpliesOther(?expr, ?exprCompOther),
  ?exprCompOther = ["||", ?type, ?exprOther, ?exprFalse],
  ExprIsAlwaysFalse(?exprFalse).

//
//// (Î‘ && true) => B implies A => B
//

ExprImpliesOther(?expr, ?exprOther) :-
  ExprImpliesOther(?exprCompOther, ?exprOther),
  ?exprCompOther = ["&&", ?type, ?expr, ?exprTrue],
  ExprIsAlwaysTrue(?exprTrue).

//
//// ExprIsNegationOfOther
//

ExprIsNegationOfOther(?expr, ?exprOther) :-
  isBooleanExprLeftRightInMethod(?expr, ?exprLeft, ?exprRight, ?op, ?meth),
  isBooleanExprLeftRightInMethod(?exprOther, ?exprLeft, ?exprRight, ?negatedOp, ?meth),
  NegateOp(?op, ?negatedOp).

ExprIsNegationOfOther(?expr, ?exprOther) :-
	?expr = ["1", "boolean", nil, nil],
 	?exprOther = ["0", "boolean", nil, nil],
  isBooleanExprLeftRightInMethod(?expr, _, _, _, ?meth),
  isBooleanExprLeftRightInMethod(?exprOther, _, _, _, ?meth).

//
//// ExprIsAlwaysTrue
//

ExprIsAlwaysTrue(?expr) :-
	isBooleanExpr(?expr),
	?expr = ["1", "boolean", nil, nil].

//
//// ExprIsAlwaysFalse
//

ExprIsAlwaysFalse(?expr) :-
	isBooleanExpr(?expr),
	?expr = ["0", "boolean", nil, nil].

