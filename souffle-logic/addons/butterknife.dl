// Special logic to support Butterknife annotations.
//
// TODO: @BindViews, bind resources (drawables, fonts, data).
//

/***************************************************
 * @BindView
 ***************************************************/

.decl FieldBindView(?field:Field, ?controlValue:Value, ?controlType:ReferenceType, ?ctx:configuration.Context, ?hctx:configuration.HContext)

// When a constructor is made reachable in a type containing a
// @BindView-annotated field, instantiate that field.
MockValueConsMacro(?controlValue, ?controlType),
FieldBindView(?field, ?controlValue, ?controlType, ?ctx, ?hctx) :-
  Field_Annotation(?field, "butterknife.BindView"),
  AnnotationElement("field", ?field, _, _, "value", ?id, _),
  LayoutControl(?id, ?controlType, _),
  Field_DeclaringType(?field, ?type),
  basic.ClassConstructor(?method, ?type),
  ReachableContext(?ctx, ?method),
  isImmutableHContext(?hctx),
  ?controlValue = cat("@BindView: <", cat(?controlType, cat(" control for field ", ?field))).

.decl ViewBinder(?value:Value, ?type:ReferenceType, ?hctx:configuration.HContext)

// Recognize butterknife view binders.
ViewBinder(?value, ?type, ?hctx) :-
  basic.SubtypeOf(?type, "butterknife.ButterKnife$ViewBinder"),
  isReferenceType(?type),
  ?value = cat("<butterknife ViewBinder of type ", cat(?type, ">")),
  isImmutableHContext(?hctx).

// Instantiate types involved in view binding.
ReifiedAndroidObjectValue(?value, ?type),
ReachableValue(?hctx, ?value),
ReachableLayoutControl(?type) :-
  ( FieldBindView(_, ?value, ?type, _, ?hctx)
  ; ViewBinder(?value, ?type, ?hctx)
  ).

// Handle classes accessed by ButterKnife.findBindingConstructorForClass().
ForcedReachableAndroidClass(?ctx, ?viewBindingType) :-
  FieldBindView(?field, _, _, ?ctx, _),
  Field_DeclaringType(?field, ?type),
  ?viewBindingType = cat(?type, "_ViewBinding").

#ifdef DISABLE_POINTS_TO

// Make all view binder methods reachable.
ForcedReachableAndroidClass(?ctx, ?type) :-
  ViewBinder(_, ?type, _),
  isImmutableContext(?ctx).

#else

// @BindView points-to for instance fields.
InstanceFieldPointsTo(?hctx, ?controlValue, ?field, ?baseHctx, ?baseVal) :-
  FieldBindView(?field, ?controlValue, ?controlType, ?ctx, ?hctx),
  !Field_Modifier("static", ?field),
  Method_DeclaringType(?method, ?controlType),
  ThisVar(?method, ?this),
  VarPointsTo(?baseHctx, ?baseVal, ?ctx, ?this).

// @BindView points-to for static fields.
StaticFieldPointsTo(?hctx, ?controlValue, ?field) :-
  FieldBindView(?field, ?controlValue, _, _, ?hctx),
  Field_Modifier("static", ?field).

#endif // DISABLE_POINTS_TO

/***************************************************
 * Callback methods
 ***************************************************/

AndroidCallbackMethod(?method, ?type),
LayoutControl_CallbackMethod(?controlId, ?method) :-
  Method_Annotation(?method, ?annot),
  Method_DeclaringType(?method, ?type),
  ( ?annot = "butterknife.OnCheckedChanged"
  ; ?annot = "butterknife.OnClick"
  ; ?annot = "butterknife.OnEditorAction"
  ; ?annot = "butterknife.OnFocusChange"
  ; ?annot = "butterknife.OnItemClick"
  ; ?annot = "butterknife.OnItemLongClick"
  ; ?annot = "butterknife.OnItemSelected"
  ; ?annot = "butterknife.OnLongClick"
  ; ?annot = "butterknife.OnPageChange"
  ; ?annot = "butterknife.OnTextChanged"
  ; ?annot = "butterknife.OnTouch"
  ),
  AnnotationElement("method", ?method, _, _, "value", ?controlId, _).
