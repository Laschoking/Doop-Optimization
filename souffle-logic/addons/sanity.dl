.decl Sanity(?n:symbol, ?s:symbol, ?c:number)
.output Sanity

// Every var has a type
Sanity("1", "Var has no type", ?c) :-
  ?c = count : VarHasNoType(_).

#ifndef DISABLE_POINTS_TO
// Every var in VarPointsTo is reachable
Sanity("2", "Var in VarPointsTo is not reachable", ?c) :-
  ?c = count : NotReachableVarPointsTo(_, _).

// Every var in VarPointsTo points to correctly typed values
Sanity("3", "Var in VarPointsTo points to wrongly typed values", ?c) :-
  ?c = count : VarPointsToWronglyTypedValue(_, _, _, _).

// No VarPointsTo is ever inferred for objects that should have been
// merged. Suggests omission in the "Keep" predicate.
Sanity("4", "VarPointsTo for merged objects", ?c) :-
  ?c = count : VarPointsToMergedHeap(_, _).
#endif // DISABLE_POINTS_TO

Sanity("5", "HeapAllocation has no type", ?c) :-
  ?c = count : HeapAllocationHasNoType(_).

Sanity("6", "Value has no type", ?c) :-
  ?c = count : ValueHasNoType(_).

Sanity("7", "Value is neither heap nor nonheap", ?c) :-
  ?c = count : ValueIsNeitherHeapNorNonHeap(_).

Sanity("8", "ClassType is InterfaceType", ?c) :-
  ?c = count : ClassTypeIsInterfaceType(_).

Sanity("9", "PrimitiveType is ReferenceType", ?c) :-
  ?c = count : PrimitiveTypeIsReferenceType(_).

// Every type is a concrete type
Sanity("10", "Type is not a concrete type", ?c) :-
  ?c = count : TypeIsNotConcreteType(_).

// Every instruction is a concrete instruction
Sanity("11", "Instruction is not a concrete instruction", ?c) :-
  ?c = count : InstructionIsNotConcreteInstruction(_).

Sanity("12", "Value has no declaring type", ?c) :-
  ?c = count : ValueHasNoDeclaringType(_).

Sanity("13", "Duplicate context requests", ?c) :-
  ?c = count : mainAnalysis.DuplicateContextRequest(_, _, _, _, _, _).

Sanity("14", "Duplicate context responses", ?c) :-
  ?c = count : mainAnalysis.DuplicateContextResponse(_, _, _, _, _, _).

Sanity("15", "Duplicate method implementation", ?c) :-
  ?c = count : basic.DuplicateMethodImplemented(_, _, _, _, _).

Sanity("16", "Duplicate method lookup", ?c) :-
  ?c = count : basic.DuplicateMethodLookup(_, _, _, _, _).

#ifndef DISABLE_POINTS_TO
// Every field in {Instance|Static}PointsTo points to correctly typed values
Sanity("17", "Field in {Static|Instance}FieldPointsTo points to wrongly typed values", ?c) :-
  ?c = count : FieldPointsToWronglyTypedValue(_, _, _, _).
#endif // DISABLE_POINTS_TO

Sanity("18", "Missing artifact types from hierarchy", ?c) :-
  ?c = count : ArtifactTypeMissingFromHierarchy(_).

.decl VarHasNoType(var:Var)
.output VarHasNoType

VarHasNoType(?var) :-
  isVar(?var),
  !Var_Type(?var, _).

#ifndef DISABLE_POINTS_TO
.decl NotReachableVarPointsTo(?var:Var, ?method:Method)
.output NotReachableVarPointsTo

NotReachableVarPointsTo(?var, ?method) :-
  Var_DeclaringMethod(?var, ?method),
  mainAnalysis.VarPointsTo(_, _, _, ?var),
  !mainAnalysis.Reachable(?method).
#endif // DISABLE_POINTS_TO

.decl ForceTypeCompatibility(?valueType:Type, ?varType:Type)

// Soot quirk: method types may be shown as classes (and even leak as strings).
ForceTypeCompatibility("java.lang.invoke.MethodType", "java.lang.Class").
ForceTypeCompatibility("java.lang.String", "java.lang.invoke.MethodType").
ForceTypeCompatibility("java.lang.String", "java.lang.Class").

// Ignore boxing as it can happen behind the scenes (dynamic proxies,
// invokedynamic).
ForceTypeCompatibility(?valueType, ?varType) :-
  mainAnalysis.BoxTypeConversion(?valueType, ?varType).

// On Android, primitive number types may all collapse into 'int'.
#ifdef ANDROID
.decl ForceValueCompatibility(?varType:Type, ?value:mainAnalysis.Value, ?valueType:Type)

ForceValueCompatibility("boolean", "num-constant-0", "int").
ForceValueCompatibility("boolean", "num-constant-1", "int").
ForceValueCompatibility(?primType, ?numConst, "int") :-
  ( ?primType = "byte" ;  ?primType = "char" ;  ?primType = "short" ),
  mainAnalysis.Value_Num(?numConst, _).
#endif // ANDROID

#ifndef DISABLE_POINTS_TO
.decl VarPointsToWronglyTypedValue(?var:Var, ?varType:Type, ?value:mainAnalysis.Value, ?valueType:Type)
.output VarPointsToWronglyTypedValue

VarPointsToWronglyTypedValue(?var, ?varType, ?value, ?valueType) :-
  mainAnalysis.Value_Type(?value, ?valueType),
  mainAnalysis.VarPointsTo(_, ?value, _, ?var),
  Var_Type(?var, ?varType),
  !basic.SubtypeOf(?valueType, ?varType),
#ifdef ANDROID
  !ForceValueCompatibility(?varType, ?value, ?valueType),
#endif // ANDROID
  !ForceTypeCompatibility(?valueType, ?varType).

.decl FieldPointsToWronglyTypedValue(?field:Field, ?fieldType:Type, ?value:mainAnalysis.Value, ?valueType:Type)
.output FieldPointsToWronglyTypedValue

FieldPointsToWronglyTypedValue(?field, ?fieldType, ?value, ?valueType) :-
  mainAnalysis.Value_Type(?value, ?valueType),
  (mainAnalysis.InstanceFieldPointsTo(_, ?value, ?field, _, _);
   mainAnalysis.StaticFieldPointsTo(_, ?value, ?field)),
  Field_Type(?field, ?fieldType),
  !basic.SubtypeOf(?valueType, ?fieldType),
#ifdef ANDROID
  !ForceValueCompatibility(?fieldType, ?value, ?valueType),
#endif // ANDROID
  !ForceTypeCompatibility(?valueType, ?fieldType).

.decl VarPointsToMergedHeap(?var:Var, ?value:mainAnalysis.Value)
.output VarPointsToMergedHeap

VarPointsToMergedHeap(?var, ?value) :-
  mainAnalysis.Value_isHeap(?value),
  mainAnalysis.HeapAllocation_Merge(?value, ?value2),
#if defined(NO_MERGES) || defined(DISTINGUISH_REFLECTION_ONLY_STRING_CONSTANTS) || defined(DISTINGUISH_ALL_STRING_CONSTANTS)
  !isStringConstant(?value),
#endif // distinguished strings support
  mainAnalysis.VarPointsTo(_, ?value, _, ?var),
  ?value != ?value2.

#endif // DISABLE_POINTS_TO

.decl HeapAllocationHasNoType(?heap:HeapAllocation)
.output HeapAllocationHasNoType

HeapAllocationHasNoType(?heap) :-
  isHeapAllocation(?heap),
  !HeapAllocation_Type(?heap, _).

.decl ValueHasNoType(?value:mainAnalysis.Value)
.output ValueHasNoType

ValueHasNoType(?value) :-
  mainAnalysis.isValue(?value),
  !mainAnalysis.Value_Type(?value, _).

.decl ValueHasNoDeclaringType(?value:mainAnalysis.Value)
.output ValueHasNoDeclaringType

ValueHasNoDeclaringType(?value) :-
  mainAnalysis.isValue(?value),
  !mainAnalysis.Value_DeclaringType(?value, _).

.decl ValueIsNeitherHeapNorNonHeap(?value:mainAnalysis.Value)
.output ValueIsNeitherHeapNorNonHeap

ValueIsNeitherHeapNorNonHeap(?value) :-
  mainAnalysis.isValue(?value),
  !mainAnalysis.Value_isHeap(?value),
  !mainAnalysis.Value_isNonHeap(?value),
  mainAnalysis.NotSpecialObject(?value).

.decl ClassTypeIsInterfaceType(?type:Type)
.output ClassTypeIsInterfaceType

ClassTypeIsInterfaceType(?t) :-
  isClassType(?t),
  isInterfaceType(?t).

.decl PrimitiveTypeIsReferenceType(?type:Type)
.output PrimitiveTypeIsReferenceType

PrimitiveTypeIsReferenceType(?t) :-
  isPrimitiveType(?t),
  isReferenceType(?t).

.decl TypeIsNotConcreteType(?type:Type)
.output TypeIsNotConcreteType

TypeIsNotConcreteType(?t) :-
  isType(?t),
  !isInterfaceType(?t),
  !isClassType(?t),
  !isArrayType(?t),
  !isPrimitiveType(?t),
  !isNullType(?t).

.decl InstructionIsNotConcreteInstruction(?insn:Instruction)
.output InstructionIsNotConcreteInstruction

InstructionIsNotConcreteInstruction(?insn) :-
  isInstruction(?insn),
  !isThrow_Insn(?insn),
  !isThrowNull_Insn(?insn),
  !isGoto_Insn(?insn),
  !isIf_Insn(?insn),
  !isSwitch_Insn(?insn),
  !isTableSwitch_Insn(?insn),
  !isLookupSwitch_Insn(?insn),
  !isMonitorInstruction(?insn),
  !isEnterMonitor_Insn(?insn),
  !isExitMonitor_Insn(?insn),
  !isFieldInstruction(?insn),
  !isLoadInstanceField_Insn(?insn),
  !isStoreInstanceField_Insn(?insn),
  !isLoadStaticField_Insn(?insn),
  !isStoreStaticField_Insn(?insn),
  !isArrayInstruction(?insn),
  !isLoadArrayIndex_Insn(?insn),
  !isStoreArrayIndex_Insn(?insn),
  !isAssignInstruction(?insn),
  !isAssignOper_Insn(?insn),
  !isAssignBinop_Insn(?insn),
  !isAssignUnop_Insn(?insn),
  !isAssignLocal_Insn(?insn),
  !isAssignInstanceOf_Insn(?insn),
  !isAssignNull_Insn(?insn),
  !isAssignNumConstant_Insn(?insn),
  !isAssignCast_Insn(?insn),
  !isAssignCastNull_Insn(?insn),
  !isAssignCastNumConstant_Insn(?insn),
  !isAssignHeapAllocation_Insn(?insn),
  !isReturnInstruction(?insn),
  !isReturnVoid_Insn(?insn),
  !isReturnNonvoid_Insn(?insn),
  !isMethodInvocation(?insn),
  !isVirtualMethodInvocation_Insn(?insn),
  !isSpecialMethodInvocation_Insn(?insn),
  !isStaticMethodInvocation_Insn(?insn),
  !isUnsupportedInstruction(?insn),
  !isAssignPhantomInvoke(?insn),
  !isExceptionHandler(?insn),
  !isBreakpointStmt(?insn).

.decl ArtifactTypeMissingFromHierarchy(?t:ReferenceType)
.output ArtifactTypeMissingFromHierarchy

ArtifactTypeMissingFromHierarchy(?t) :-
  _ClassArtifact(_, ?t, _, _),
  isType(?t),
  !basic.SubtypeOf(?t, _).


