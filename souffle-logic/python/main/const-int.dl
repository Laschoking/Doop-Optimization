Value_Num("<num-constant(int):-1>","-1").
isIntConstant("-1").

Value_Num("<num-constant(int):0>","0").
isIntConstant("0").

Value_Num("<num-constant(int):1>","1").
isIntConstant("1").

Value_Num("<num-constant(int):3>","3").
isIntConstant("3").

Value_Num(?val, ?numStr),
IntConstant_Distance(?numStr, 0),
isIntConstant(?numStr):-
  NonBinopNewIntConstantValue(?val, ?numStr).

Value_Num(?val, ?numStr),
IntConstant_Distance(?numStr, ?newDist),
isIntConstant(?numStr):-
  BinopNewIntConstantValue(?val, ?numStr, ?newDist),
  !isOriginalIntConstant(?numStr).

IntConstant_Distance(?numStr, 0):-
  isOriginalIntConstant(?numStr).

#define MAX_NEW_INT_VALUE  100000

.decl VarPointsToConstValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)

.decl VarPointsToConstNoneValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.output VarPointsToConstNoneValue

.decl IntConstant_Distance(?const:IntConstant, ?distance:number)
.output IntConstant_Distance

// anantoni: Had to switch all these from NumConstantValue to Value
.decl VarPointsToConstFloatValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.output VarPointsToConstFloatValue

.decl VarPointsToConstIntValue(?hctx:configuration.HContext, ?value:Value, ?ctx:configuration.Context, ?var:Var)
.output VarPointsToConstIntValue

//Made these context insensitive, maybe Review this.
.decl VarHasConstFloatValue(?value:Value, ?var:Var)
.output VarHasConstFloatValue

.decl VarHasConstValue(?value:Value, ?var:Var)
.output VarHasConstValue

.decl VarHasConstIntValue(?value:Value, ?var:Var)
.output VarHasConstIntValue

.decl VarHasConstNoneValue(?value:Value, ?var:Var)
.output VarHasConstNoneValue

.output Value_Num

//anantoni: Shouldn't this be a disjunction?
VarHasConstValue(?value, ?var) :-
  VarHasConstNoneValue(?value, ?var);
  VarHasConstFloatValue(?value, ?var);
  VarHasConstIntValue(?value,?var).

VarPointsToConstValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  isConstantValue(?value).

VarPointsToConstNoneValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  isNoneValue(?value).

VarPointsToConstFloatValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  Value_Num(?value,?num),
  isFloatConstant(?num).

VarPointsToConstIntValue(?hctx, ?value, ?ctx, ?var) :-
  VarPointsTo(?hctx, ?value, ?ctx, ?var),
  Value_Num(?value,?num),
  isIntConstant(?num).

VarHasConstNoneValue(?value, ?var),
VarPointsTo(?immutableHctx, ?value, ?ctx, ?var):-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  isAssignNone_Insn(?instr),
  AssignInstruction_To(?instr, ?var),
  ?value = "<None>",
  isImmutableHContext(?immutableHctx).

Value_Num(?value, ?num),
VarHasConstFloatValue(?value, ?var),
VarPointsTo(?immutableHctx, ?value, ?ctx, ?var) :-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignFloatConstant_Id(?instr, ?num),
  AssignInstruction_To(?instr, ?var),
  ?value = cat(cat("<num-constant(float):", ?num),">"),
  isImmutableHContext(?immutableHctx).

Value_Num(?value,?num),
VarHasConstIntValue(?value, ?var),
VarPointsTo(?immutableHctx, ?value, ?ctx, ?var):-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?instr, ?function),
  AssignIntConstant_Id(?instr, ?num),
  AssignInstruction_To(?instr, ?var),
  ?value = cat(cat("<num-constant(int):", ?num),">"),
  isImmutableHContext(?immutableHctx).

BinopNewIntConstantValue(?value, ?resStr, ?newDist),
VarPointsTo(?immutableHctx, ?value, ?ctx, ?var):-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  isAssignBinop_Insn(?instr),
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  Instruction_Function(?instr, ?function),
  AssignInstruction_To(?instr, ?var),
  //BinaryIntOp(?ctx, ?instr, ?res),
  ValidBinaryIntOp(?ctx, ?instr, ?res, ?newDist),
  ?res < MAX_NEW_INT_VALUE,
  ?resStr = to_string(?res),
  ?value = cat(cat("<num-constant(int):", ?resStr),">"),
  isImmutableHContext(?immutableHctx).

.decl BinaryIntOp(?ctx: configuration.Context, ?instr:Instruction, ?constVal1:Value, ?constVal2:Value, ?res:number)
.output BinaryIntOp

.decl ValidBinaryIntOp(?ctx: configuration.Context, ?instr:Instruction, ?res:number, ?newDist:number)
.output ValidBinaryIntOp

.decl BinaryIntOpOperandDists(?ctx: configuration.Context, ?instr:Instruction, ?constVal1:Value, ?constVal2:Value, ?dist1:number, ?dist2:number)
.output BinaryIntOpOperandDists

ValidBinaryIntOp(?ctx, ?instr, ?res, ?newDist):-
  BinaryIntOpOperandDists(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?dist1, ?dist2),
  BinaryIntOp(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?res),
  ?dist1 < 50,
  ?dist1 >= ?dist2,
  ?newDist = ?dist1 + 1.

ValidBinaryIntOp(?ctx, ?instr, ?res, ?newDist):-
  BinaryIntOpOperandDists(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?dist1, ?dist2),
  BinaryIntOp(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?res),
  ?dist2 < 50,
  ?dist2 > ?dist1,
  ?newDist = ?dist2 + 1.

BinaryIntOpOperandDists(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?dist1, ?dist2):-
  BinaryIntOp(?ctx, ?instr, ?numConstVal1, ?numConstVal2, _),
  Value_Num(?numConstVal1, ?numStr1),
  Value_Num(?numConstVal2, ?numStr2),
  IntConstant_Distance(?numStr1, ?dist1),
  IntConstant_Distance(?numStr2, ?dist2).

BinaryIntOp(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?res) :-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  IntConstantValue_ActualNum(?numConstVal1, ?num1),
  IntConstantValue_ActualNum(?numConstVal2, ?num2),
  ?op = "add",
  ?res = ?num1 + ?num2.


BinaryIntOp(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?res):-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  IntConstantValue_ActualNum(?numConstVal1, ?num1),
  IntConstantValue_ActualNum(?numConstVal2, ?num2),
  ?op = "sub",
  ?res = ?num1 - ?num2.


BinaryIntOp(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?res):-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  IntConstantValue_ActualNum(?numConstVal1, ?num1),
  IntConstantValue_ActualNum(?numConstVal2, ?num2),
  ?op = "mul",
  ?res = ?num1 * ?num2.

//TODO: Maybe perform some checks that the result of this is Int
BinaryIntOp(?ctx, ?instr, ?numConstVal1, ?numConstVal2, ?res):-
  AssignBinOper_Info(?instr, ?op, ?var1, ?var2),
  VarPointsToConstIntValue(_, ?numConstVal1, ?ctx, ?var1),
  VarPointsToConstIntValue(_, ?numConstVal2, ?ctx, ?var2),
  IntConstantValue_ActualNum(?numConstVal1, ?num1),
  IntConstantValue_ActualNum(?numConstVal2, ?num2),
  ?op = "div",
  ?res = ?num1 / ?num2.
