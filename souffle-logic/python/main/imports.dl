.decl ClassType_Module(?class:ClassType, ?module: Module)

.decl VarPointsToModule(?hctx:configuration.HContext, ?val: Value, ?ctx:configuration.Context, ?var:Var)

.decl VarPointsToFunction(?hctx:configuration.HContext, ?val: Value, ?ctx:configuration.Context, ?var:Var)

.decl PackageCanImportPackage(?package:Package, ?importName:symbol, ?importedPackage:Package)

.decl ModuleCanImportModule(?importingModule:Module, ?importName:symbol, ?importedModule:Module)


.output VarPointsToFunction
.output isFunction

.output VarPointsToModule
.output isModule
.output PackageCanImportPackage
.output ModuleCanImportModule

PackageCanImportPackage(?importingPackage, ?importName, ?importedPackage):-
  Package_DeclaringPackage(?importedPackage, ?importName, ?importingPackage).

PackageCanImportPackage(?importingPackage, ?importName, ?importedPackage):-
  PackageCanImportPackage(?importingPackage, ?tempName, ?tempPackage),
  Package_DeclaringPackage(?importedPackage, ?name, ?tempPackage),
  ?importName = cat(?tempName, cat( ".", ?name)).

ModuleCanImportModule(?importingModule, ?importName, ?importedModule):-
  Module_DeclaringPackage(?importingModule, _, ?package),
  Module_DeclaringPackage(?importedModule, ?importName, ?package),
  ?importedModule != ?importingModule.

ModuleCanImportModule(?importingModule, ?importName, ?importedModule):-
  Module_DeclaringPackage(?importingModule, _, ?importingPackage),
  PackageCanImportPackage(?importingPackage, ?importName, ?importedPackage),
  Module_DeclaringPackage(?importedModule, "__init__", ?importedPackage).

ModuleCanImportModule(?importingModule, ?importName, ?importedModule):-
  Module_DeclaringPackage(?importingModule, _, ?importingModulePackage),
  PackageCanImportPackage(?importingModulePackage, ?importToPackName, ?importedModulePackage),
  Module_DeclaringPackage(?importedModule, ?moduleName, ?importedModulePackage),
  ?importName = cat(?importToPackName, cat( ".", ?moduleName)).

VarPointsToModule(?hctx, ?module, ?ctx, ?var):-
  VarPointsTo(?hctx, ?module, ?ctx, ?var),
  isModule(?module).

VarPointsTo(?hctx, ?module, ?ctx, ?var):-
  ReachableContext(?ctx, ?function),
  Instruction_Function(?insn, ?function),
  Function_Module(?function, ?importingModule),
  isImportInstruction(?insn),
  ImportInsn_ModuleName(?insn, ?importName),
  AssignInstruction_To(?insn, ?var),
  ModuleCanImportModule(?importingModule, ?importName, ?module),
  isImmutableHContext(?hctx).

VarPointsTo(?hctx, ?module, ?ctx, ?var):-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?insn, ?function),
  isImportInstruction(?insn),
  ImportInsn_ModuleName(?insn, ?name),
  AssignInstruction_To(?insn, ?var),
  ?module = cat(cat("<",?name),">"),
  isModeledModule(?module),
  isImmutableHContext(?hctx).

//TODO: REVIEW THIS, USING IMPORT FOR THE DEFAULT IMPORT FUNCTIONS OF WALA FOR NOW
VarPointsTo(?hctx, ?value, ?ctx, ?var):-
  Reachable(?function),
  ReachableContext(?ctx, ?function),
  Instruction_Function(?insn, ?function),
  isImportInstruction(?insn),
  ImportInsn_ModuleName(?insn, ?name),
  AssignInstruction_To(?insn, ?var),
  GlobalNamePointsTo(?hctx, ?value, "<BUILTIN_SCOPE>", ?name).

VarPointsTo(?hctx, ?heap, ?ctx, ?to):-
  isLoadInstanceField_Insn(?insn),
  FieldInstruction_Signature(?insn, ?signature),
  LoadInstanceField_Base(?insn, ?base),
  LoadInstanceField_To(?insn, ?to),
  VarPointsToModule(_, ?parModule, ?ctx, ?base),
  GlobalNamePointsTo(?hctx, ?heap, ?parModule, ?signature).

//One thing to be considered in the future is the difference between:
//1) from file import var
//   var = 5
//
//2) import file
//   file.var = 5
//
// The first creates a copy of the variable in your scope while the second modifies the original var