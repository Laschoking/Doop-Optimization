.decl TensorShapeListLength(?hctx:configuration.HContext, ?val:Value, ?size:number)
.decl TensorShapeListContent(?hctx:configuration.HContext, ?val:Value, ?index:number, ?indexValue:Value)
.output TensorShapeListLength
.output TensorShapeListContent


//Unifying way to get the shape of a tensor object, numpy array, or the shape of a list we will statically deduce
.decl isTensorLikeObject(?val:Value)
.output isTensorLikeObject
isTensorLikeObject(?val):-
  IsPyListOrTuple(?val);
  Value_Type(?val,"<tensorflow.Tensor>");
  Value_Type(?val,"<numpy.ndarray>").

.decl TensorLikeObjectShapeListLength(?hctx:configuration.HContext, ?val:Value, ?size:number)
.output TensorLikeObjectShapeListLength

.decl TensorLikeObjectShapeListContent(?hctx:configuration.HContext, ?val:Value, ?index:number, ?indexValue:Value)
.output TensorLikeObjectShapeListContent

.decl TensorLikeObjectToTensorDtype(?hctx:configuration.HContext, ?val:Value, ?dtypeHctx:configuration.HContext, ?dtypeVal:Value)
.output TensorLikeObjectToTensorDtype

TensorLikeObjectShapeListLength(?tensorHctx, ?tensor, ?len):-
  TensorShape(?tensorHctx, ?tensor, ?shapeHctx, ?shapeVal),
  TensorShapeListLength(?shapeHctx, ?shapeVal, ?len).

TensorLikeObjectShapeListContent(?tensorHctx, ?tensor, ?index, ?indexVal):-
  TensorShape(?tensorHctx, ?tensor, ?shapeHctx, ?shapeVal),
  TensorShapeListContent(?shapeHctx, ?shapeVal, ?index, ?indexVal).

TensorLikeObjectShapeListLength(?pyListHctx, ?pyList, ?len):-
  PyListDeducedShapeLength(?pyListHctx, ?pyList, ?len).

TensorLikeObjectShapeListContent(?pyListHctx, ?pyList, ?index, ?indexVal):-
  PyListDeducedShapeContents(?pyListHctx, ?pyList, ?index, ?indexVal).

TensorLikeObjectToTensorDtype(?pyListHctx, ?pyList, ?immutableHctx, ?tensorDtype):-
  PyListDeducedDtype(?pyListHctx, ?pyList, "float"),
  ?tensorDtype = "<tensorflow>/new <tensorflow.float32>/0",
  isImmutableHContext(?immutableHctx).

TensorLikeObjectToTensorDtype(?pyListHctx, ?pyList, ?immutableHctx, ?tensorDtype):-
  PyListDeducedDtype(?pyListHctx, ?pyList, "int"),
  ?tensorDtype = "<tensorflow>/new <tensorflow.int32>/0",
  isImmutableHContext(?immutableHctx).

TensorLikeObjectToTensorDtype(?tensorHctx, ?tensor, ?dtypeHctx, ?dtype):-
  TensorDType(?tensorHctx, ?tensor, ?dtypeHctx, ?dtype).

//----------------------------------------------------------------------------------------------------------------------
//                                              GENERAL OPERATION MODELING
//----------------------------------------------------------------------------------------------------------------------

.decl TensorOperation_NameToVal(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value, ?name:symbol, ?namedValHctx:configuration.HContext, ?namedVal:Value)
.output TensorOperation_NameToVal

//When creating a new operation, set the name of the input tensor that will give the dtype of the new output tensor.
.decl TensorOperation_GetDTypeFromName(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value, ?name:symbol)
.output TensorOperation_GetDTypeFromName

.decl TensorOperationProducesOutput(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value)
.output TensorOperationProducesOutput

.decl TensorOperationError(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value, ?errorMSG:symbol)
.output TensorOperationError

.decl TensorOperationWarning(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value, ?warningMSG:symbol)
.output TensorOperationWarning

.decl TensorShape(?tensorHctx:configuration.HContext, ?tensor:Value, ?shapeHctx:configuration.HContext, ?shapeList:Value)
.output TensorShape

.decl TensorOpOutputWithHctx(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?opValHctx:configuration.HContext, ?operationVal:Value)
.output TensorOpOutputWithHctx

.decl TensorOpOutputShape(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value, ?shapeHctx:configuration.HContext, ?shapeVal:Value)
.output TensorOpOutputShape

.decl TensorDType(?tensorHctx:configuration.HContext, ?tensor:Value, ?dtypeHctx:configuration.HContext, ?dtype:Value)
.output TensorDType

.decl isTensorVal(?val:Value)
.output isTensorVal

isTensorVal(?val):-
  Value_Type(?val, "<tensorflow.Tensor>").

configuration.RecordContextRequest(?ctx, ?outTensorVal, ?var) :-
  TensorOperationProducesOutput(?ctx, ?insn, ?outTensorVal),
  AssignInstruction_To(?insn, ?var).

isClassInstanceAllocation(?outTensorVal),
ClassInstanceAllocationInitializingClassObject(?hctx, ?outTensorVal, ?immutableHctx, "<tensorflow>/new <tensorflow.Tensor>/0"),
TensorShape(?hctx, ?outTensorVal, ?hctx, ?tensorShapeVal),
Value_Type(?tensorShapeVal, "<tensorflow.TensorShape>"),
VarPointsTo(?hctx, ?outTensorVal, ?ctx, ?var),
Value_Type(?outTensorVal, "<tensorflow.Tensor>"):-
  configuration.RecordContextResponse(?ctx, ?outTensorVal, ?var, ?hctx),
  TensorOperationProducesOutput(?ctx, ?insn, ?outTensorVal),
  AssignInstruction_To(?insn, ?var),
  ?tensorShapeVal = cat("<shape ",cat(?outTensorVal, ">")),
  isImmutableHContext(?immutableHctx).


TensorOpOutputWithHctx(?ctx, ?insn, ?hctx, ?outTensorVal):-
  TensorOperationProducesOutput(?ctx, ?insn, ?outTensorVal),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?hctx, ?outTensorVal, ?ctx, ?var).

TensorOpOutputShape(?ctx, ?insn, ?outTensorVal, ?shapeHctx, ?shape):-
  TensorOpOutputWithHctx(?ctx, ?insn, ?hctx, ?outTensorVal),
  TensorShape(?hctx, ?outTensorVal, ?shapeHctx, ?shape).

TensorDType(?tensorHctx, ?tensor, ?dtypeHctx, ?dtype):-
  TensorOperationProducesOutput(?ctx, ?insn, ?tensor),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?tensorHctx, ?tensor, ?ctx, ?var),
  TensorOperation_GetDTypeFromName(?ctx, ?insn, ?tensor, ?name),
  TensorOperation_NameToVal(?ctx, ?insn, ?tensor, ?name, ?inTensorHctx, ?inTensor),
  TensorDType(?inTensorHctx, ?inTensor, ?dtypeHctx, ?dtype).

TensorObjectHasConcreteDimensions(?hctx, ?tensor):-
  TensorOperationProducesOutput(?ctx, ?insn, ?tensor),
  AssignInstruction_To(?insn, ?var),
  VarPointsTo(?hctx, ?tensor, ?ctx, ?var),
  TensorShape(?hctx, ?tensor, ?listHctx, ?tensorShape),
  ListOfIntConsts(?listHctx, ?tensorShape).

ListOfConstsLength(?hctx, ?tensorVal, ?len),
ListOfConstsAtIndexPointsTo(?hctx, ?tensorVal, ?index, ?indexValue):-
  TensorShapeListLength(?hctx, ?tensorVal, ?len),
  TensorShapeListContent(?hctx, ?tensorVal, ?index, ?indexValue).


//----------------------------------------------------------------------------------------------------------------------
//                                              IMPRECISION METRICS
//----------------------------------------------------------------------------------------------------------------------

.decl TensorOpImpreciseNameToVal(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value, ?name:symbol)
.output TensorOpImpreciseNameToVal

.decl TensorOpHasImpreciseArg(?ctx:configuration.Context, ?insn:FunctionInvocation_Insn, ?operationVal:Value)
.output TensorOpHasImpreciseArg

.decl TensorShapeListAtIndexHasMoreThanOneVal(?shapeValHctx:configuration.HContext, ?shapeVal:Value, ?index:number)
.output TensorShapeListAtIndexHasMoreThanOneVal

.decl ImpreciseTensorShapeList(?shapeValHctx:configuration.HContext, ?shapeVal:Value)
.output ImpreciseTensorShapeList

.decl TensorHasMoreThanOneShape(?tensorHctx:configuration.HContext, ?tensor:Value)
.output TensorHasMoreThanOneShape

TensorOpHasImpreciseArg(?ctx, ?insn, ?op):-
  TensorOpImpreciseNameToVal(?ctx, ?insn, ?op, _).

TensorOpImpreciseNameToVal(?ctx, ?insn, ?op, ?name):-
  TensorOperation_NameToVal(?ctx, ?insn, ?op, ?name, ?argHctx, ?argVal),
  TensorOperation_NameToVal(?ctx, ?insn, ?op, ?name, ?argHctx2, ?argVal2),
  (?argVal != ?argVal2; ?argHctx != ?argHctx2).

TensorShapeListAtIndexHasMoreThanOneVal(?shapeHctx, ?shapeVal, ?index):-
  TensorShapeListContent(?shapeHctx, ?shapeVal, ?index, ?val1),
  TensorShapeListContent(?shapeHctx, ?shapeVal, ?index, ?val2),
  ?val1 != ?val2.

ImpreciseTensorShapeList(?shapeHctx, ?shapeVal):-
  TensorShapeListAtIndexHasMoreThanOneVal(?shapeHctx, ?shapeVal, _).

TensorHasMoreThanOneShape(?tensorHctx, ?tensor):-
  TensorShape(?tensorHctx, ?tensor, _, ?shape1),
  TensorShape(?tensorHctx, ?tensor, _, ?shape2),
  ?shape1 != ?shape2.