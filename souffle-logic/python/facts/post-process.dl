
.output isFunction
.output isMethod


isFunction(?function):-
    _Function(?function, _, ?par, _, _),
    isFunction(?par).

isFunction(?function):-
    _Function(?function, _, ?function, _, _).

isFunction(?function), //TODO: Think about this again. Methods are functions, functions are not methods.
isMethod(?function):-
    _Function(?function, _, ?par, _ ,_),
    isClassType(?par).

isConstructorMethod(?method):-
  isMethod(?method),
  Function_SimpleName(?method, "__init__").

  GlobalAccessInsn_Scope(?insn, ?scope):-
    isGlobalAccess_Insn(?insn),
    Instruction_Function(?insn, ?fun),
    Function_DeclaredInFile(?fun, ?scope).

.output FormalParam_DefaultValForName
FormalParam_DefaultValForName(?fun, ?formalName, ?fromVar):-
  _FormalParam_DefaultValueVar(?fun, ?formalIndex, ?fromVar),
  FormalParam(?formalIndex, ?formalName, ?fun, _).

//This is needed as I'm not only adding FormalParam_DefaultValForName preds about the modeled functions
//just to make it harder to make mistakes
.output FormalParam_DefaultValForIndex
FormalParam_DefaultValForIndex(?fun, ?formalIndex, ?fromVar):-
  FormalParam_DefaultValForName(?fun, ?formalName, ?fromVar),
  FormalParam(?formalIndex, ?formalName, ?fun, _).

.output Function_NumOfRequiredParams
Function_NumOfRequiredParams(?fun, ?numOfParams):-
  isFunction(?fun),
  ?numOfParams = min ?formalIndex: {FormalParam_DefaultValForIndex(?fun, ?formalIndex, _)}.

Function_NumOfRequiredParams(?fun, ?numOfParams):-
  isFunction(?fun),
  !FormalParam_DefaultValForIndex(?fun, _, _),
  Function_Arity(?fun, ?numOfParams).

.decl AssignBinOper_Info(?instr:Instruction, ?op:symbol, ?var1:Var, ?var2:Var)

AssignBinOper_Info(?instr, ?op, ?var1, ?var2):-
  isAssignBinop_Insn(?instr),
  Assign_Operation(?instr, ?op),
  AssignOper_From(?instr, 1, ?var1),
  AssignOper_From(?instr, 2, ?var2).