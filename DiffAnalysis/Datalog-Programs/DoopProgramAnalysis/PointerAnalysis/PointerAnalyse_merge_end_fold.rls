% Update of analysis: no more import of alternated MainClass or Method_Descriptor, since CONCAT & CONTAINS work now :)

@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
true("true"^^xsd:boolean).

@import ClassModifier :- tsv{resource="ClassModifier.tsv",format=(string, string,int)}.
@import MainClass :- tsv{resource="MainClass.tsv",format=(string,int)}. 

@import DirectSuperclass :- tsv{resource="DirectSuperclass.tsv",format=(string, string,int)}.
@import DirectSuperinterface :- tsv{resource="DirectSuperinterface.tsv",format=(string, string,int)}.
@import Method_Modifier :- tsv{resource="Method-Modifier.tsv",format=(string, string,int)}.
@import FormalParam :- tsv{resource="FormalParam.tsv",format=(string, string,string,int)}.
@import Var_Type :- tsv{resource="Var-Type.tsv",format=(string, string,int)}.
@import ComponentType :- tsv{resource="ComponentType.tsv",format=(string, string,int)}.
@import AssignReturnValue :- tsv{resource="AssignReturnValue.tsv",format=(string, string,int)}.
@import ActualParam :- tsv{resource="ActualParam.tsv",format=(string,string, string,int)}.
@import ClassType :- tsv{resource="ClassType.tsv",format=(string,int)}.
@import z_ArrayType :- tsv{resource="ArrayType.tsv",format=(string,int)}.
@import z_InterfaceType :- tsv{resource="InterfaceType.tsv",format=(string,int)}.
@import z_Var_DeclaringMethod :- tsv{resource="Var-DeclaringMethod.tsv",format=(string, string,int)}.
@import z_ApplicationClass :- tsv{resource="ApplicationClass.tsv",format=(string,int)}.
@import z_ThisVar :- tsv{resource="ThisVar.tsv",format=(string, string,int)}.
@import z_NormalHeap :- tsv{resource="NormalHeap.tsv",format=(string, string,int)}.
@import z_StringConstant :- tsv{resource="StringConstant.tsv",format=(string,int)}.
@import z_AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.tsv",format=(string, string, string,string, string,string,int)}.
@import z_AssignLocal :- tsv{resource="AssignLocal.tsv",format=(string, string, string,string, string,int)}.
@import z_AssignCast :- tsv{resource="AssignCast.tsv",format=(string, string, string,string, string,string,int)}.
@import z_Field :- tsv{resource="Field.tsv",format=(string, string,string, string,int)}.
@import z_StaticMethodInvocation :- tsv{resource="StaticMethodInvocation.tsv",format=(string,string, string, string,int)}.
@import z_SpecialMethodInvocation :- tsv{resource="SpecialMethodInvocation.tsv",format=(string,string, string,string, string,int)}.
@import z_VirtualMethodInvocation :- tsv{resource="VirtualMethodInvocation.tsv",format=(string, string, string,string, string,int)}.
@import z_Method :- tsv{resource="Method.tsv",format=(string, string,string, string,string, string,string,int)}.
@import z_StoreInstanceField :- tsv{resource="StoreInstanceField.tsv",format=(string, string, string,string, string,string,int)}.
@import z_LoadInstanceField :- tsv{resource="LoadInstanceField.tsv",format=(string, string, string, string, string, string,int)}.
@import z_StoreStaticField :- tsv{resource="StoreStaticField.tsv",format=(string, string, string, string, string,int)}.
@import z_LoadStaticField :- tsv{resource="LoadStaticField.tsv",format=(string, string, string, string, string,int)}.
@import z_StoreArrayIndex :- tsv{resource="StoreArrayIndex.tsv",format=(string, string, string, string, string,int)}.
@import z_LoadArrayIndex :- tsv{resource="LoadArrayIndex.tsv",format=(string, string, string, string, string,int)}.
@import z_Return :- tsv{resource="Return.tsv",format=(string, string, string, string,int)}.

% assume that no relations with more than 9 relations exist

Method_Descriptor(?method, ?descriptor, ?side) :-
  Method_ReturnType(?method, ?returnType,?side_1),
  Method_ParamTypes(?method, ?params,?side_2),
  ?descriptor = CONCAT(?returnType, CONCAT( "(", CONCAT(?params, ")"))),
  merge_strat(2, ?side_1 + ?side_2,?side).


MainClass(?b,?side):-
  ClassModifier(_,?b,?side),
  MainClass(?a,_),
  true(CONTAINS(?a,?b)).

A(1).A(10).C(1).C(2).C(3).C(4).C(5).C(6).C(7).C(8).C(9).

merge_strat(?n, ?a * ?m,?a):-
   A(?a),C(?n),C(?m),?m <= ?n.
merge_strat(?a,0,0):-
   C(?a).

% Fat schema

HeapAllocation_Type("<<main method array>>", "java.lang.String[]",0).


HeapAllocation_Type("<<main method array content>>", "java.lang.String",0).

% imports
isType(?class,?side):-    
  ClassType(?class,?side).

isReferenceType(?class,?side):-
  ClassType(?class,?side).

isClassType(?class,?side):-
  ClassType(?class,?side).

isType(?arrayType,?side),
isReferenceType(?arrayType,?side),
isArrayType(?arrayType,?side):-
  z_ArrayType(?arrayType,?side).

isType(?interface,?side),
isReferenceType(?interface,?side),
isInterfaceType(?interface,?side):-
  z_InterfaceType(?interface,?side).

Var_DeclaringMethod(?var, ?method,?side):-
  z_Var_DeclaringMethod(?var, ?method,?side).

isType(?type,?side),
isReferenceType(?type,?side),
ApplicationClass(?type,?side):-
  z_ApplicationClass(?type,?side).

ThisVar(?method, ?var,?side):-
  z_ThisVar(?method, ?var,?side).

isType(?type,?side),
HeapAllocation_Type(?id, ?type,?side):-
  z_NormalHeap(?id, ?type,?side).

HeapAllocation_Type(?id, "java.lang.String",?side):-
  z_StringConstant(?id,?side).

Instruction_Method(?instruction, ?method,?side),
AssignInstruction_To(?instruction, ?to,?side),
AssignHeapAllocation_Heap(?instruction, ?heap,?side):-
  z_AssignHeapAllocation(?instruction, _, ?heap, ?to, ?method, _,?side).

Instruction_Method(?instruction, ?method,?side),
AssignLocal_From(?instruction, ?from,?side),
AssignInstruction_To(?instruction, ?to,?side):-
  z_AssignLocal(?instruction, _, ?from, ?to, ?method,?side).

Instruction_Method(?instruction, ?method,?side),
AssignCast_Type(?instruction, ?type,?side),
AssignCast_From(?instruction, ?from,?side),
AssignInstruction_To(?instruction, ?to,?side):-
  z_AssignCast(?instruction, _, ?from, ?to, ?type, ?method,?side).

Field_DeclaringType(?signature, ?declaringType,?side):-
  z_Field(?signature, ?declaringType, _, _,?side).

MethodInvocation_Base(?invocation, ?base,?side):-
  VirtualMethodInvocation_Base(?invocation, ?base,?side).

MethodInvocation_Base(?invocation, ?base,?side):-
  SpecialMethodInvocation_Base(?invocation, ?base,?side).

Instruction_Method(?instruction, ?method,?side),
isStaticMethodInvocation_Insn(?instruction,?side),
MethodInvocation_Method(?instruction, ?signature,?side):-
  z_StaticMethodInvocation(?instruction, _, ?signature, ?method,?side).

Instruction_Method(?instruction, ?method,?side),
SpecialMethodInvocation_Base(?instruction, ?base,?side),
MethodInvocation_Method(?instruction, ?signature,?side):-
  z_SpecialMethodInvocation(?instruction, _, ?signature, ?base, ?method,?side).


Instruction_Method(?instruction, ?method,?side),
isVirtualMethodInvocation_Insn(?instruction,?side),
VirtualMethodInvocation_Base(?instruction, ?base,?side),
MethodInvocation_Method(?instruction, ?signature,?side):-
  z_VirtualMethodInvocation(?instruction, _, ?signature, ?base, ?method,?side).



Method_SimpleName(?method, ?simplename,?side),
Method_ParamTypes(?method, ?params,?side),
Method_DeclaringType(?method, ?declaringType,?side),
Method_ReturnType(?method, ?returnType,?side):-
  z_Method(?method, ?simplename, ?params, ?declaringType, ?returnType, _, _,?side).
  
Instruction_Method(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
StoreInstanceField_Base(?instruction, ?base,?side),
StoreInstanceField_From(?instruction, ?from,?side):-
  z_StoreInstanceField(?instruction, _, ?from, ?base, ?signature, ?method,?side).

Instruction_Method(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
LoadInstanceField_Base(?instruction, ?base,?side),
LoadInstanceField_To(?instruction, ?to,?side):-
  z_LoadInstanceField(?instruction, _, ?to, ?base, ?signature, ?method,?side).

Instruction_Method(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
StoreStaticField_From(?instruction, ?from,?side):-
  z_StoreStaticField(?instruction, _, ?from, ?signature, ?method,?side).

Instruction_Method(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
LoadStaticField_To(?instruction, ?to,?side):-
  z_LoadStaticField(?instruction, _, ?to, ?signature, ?method,?side).

Instruction_Method(?instruction, ?method,?side),
StoreArrayIndex_Base(?instruction, ?base,?side),
StoreArrayIndex_From(?instruction, ?from,?side):-
  z_StoreArrayIndex(?instruction, _, ?from, ?base, ?method,?side).

Instruction_Method(?instruction, ?method,?side),
LoadArrayIndex_Base(?instruction, ?base,?side),
LoadArrayIndex_To(?instruction, ?to,?side):-
  z_LoadArrayIndex(?instruction, _, ?to, ?base, ?method,?side).



Instruction_Method(?instruction, ?method,?side),
ReturnNonvoid_Var(?instruction, ?var,?side):-
  z_Return(?instruction, _, ?var, ?method,?side).


% fat schema population
LoadInstanceField(?base, ?sig, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  LoadInstanceField_Base(?insn, ?base,?side_2),
  FieldInstruction_Signature(?insn, ?sig,?side_3),
  LoadInstanceField_To(?insn, ?to,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).

StoreInstanceField(?from, ?base, ?sig, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  StoreInstanceField_From(?insn, ?from,?side_2),
  StoreInstanceField_Base(?insn, ?base,?side_3),
  FieldInstruction_Signature(?insn, ?sig,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).

LoadStaticField(?sig, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  FieldInstruction_Signature(?insn, ?sig,?side_2),
  LoadStaticField_To(?insn, ?to,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

StoreStaticField(?from, ?sig, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  StoreStaticField_From(?insn, ?from,?side_2),
  FieldInstruction_Signature(?insn, ?sig,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

LoadArrayIndex(?base, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  LoadArrayIndex_Base(?insn, ?base,?side_2),
  LoadArrayIndex_To(?insn, ?to,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

StoreArrayIndex(?from, ?base, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  StoreArrayIndex_From(?insn, ?from,?side_2),
  StoreArrayIndex_Base(?insn, ?base,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

AssignCast(?type, ?from, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  AssignCast_From(?insn, ?from,?side_2),
  AssignInstruction_To(?insn, ?to,?side_3),
  AssignCast_Type(?insn, ?type,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).

AssignLocal(?from, ?to, ?inmethod,?side):-
  AssignInstruction_To(?insn, ?to,?side_1),
  Instruction_Method(?insn, ?inmethod,?side_2),
  AssignLocal_From(?insn,?from,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

AssignHeapAllocation(?heap, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  AssignHeapAllocation_Heap(?insn, ?heap,?side_2),
  AssignInstruction_To(?insn, ?to ,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


ReturnVar(?var, ?method,?side):-
  Instruction_Method(?insn, ?method,?side_1),
  ReturnNonvoid_Var(?insn, ?var,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

StaticMethodInvocation(?invocation, ?signature, ?inmethod,?side):-
  isStaticMethodInvocation_Insn(?invocation,?side_1),
  Instruction_Method(?invocation, ?inmethod,?side_2),
  MethodInvocation_Method(?invocation, ?signature,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side):-
  isVirtualMethodInvocation_Insn(?invocation,?side_1),
  MethodInvocation_Method(?invocation, ?signature,?side_2),
  Method_SimpleName(?signature, ?simplename,?side_3),
  Method_Descriptor(?signature, ?descriptor,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).



VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side),
VirtualMethodInvocation_SimpleName(?invocation, ?simplename,?side):-
  isVirtualMethodInvocation_Insn(?invocation,?side_1), % 1,2
  MethodInvocation_Method(?invocation, ?signature,?side_2), % 1,2
  Method_SimpleName(?signature, ?simplename,?side_3), % play,0
  Method_Descriptor(?signature, ?descriptor,?side_4),   
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).



MethodLookup(?simplename, ?descriptor, ?type, ?method,?side):-
  MethodImplemented(?simplename, ?descriptor, ?type, ?method,?side).

% TODO: observe
MethodLookup(?simplename, ?descriptor, ?type, ?method,?side):-
  DirectSuperinterface(?type, ?supertype,?side_1),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method,?side_2),
  ~ MethodImplemented(?simplename, ?descriptor, ?type, _,?side_1),
  ~ MethodImplemented(?simplename, ?descriptor, ?type, _,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


MethodLookup(?simplename, ?descriptor, ?type, ?method,?side):-
  DirectSuperclass(?type, ?supertype,?side_1),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method,?side_2),
  ~MethodImplemented(?simplename, ?descriptor, ?type, _, ?side_1),
  ~MethodImplemented(?simplename, ?descriptor, ?type, _, ?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

MethodImplemented(?simplename, ?descriptor, ?type, ?method,?side):-
  Method_SimpleName(?method, ?simplename,?side_1),
  Method_Descriptor(?method, ?descriptor,?side_2),
  Method_DeclaringType(?method, ?type,?side_3),
  ~Method_Modifier("abstract", ?method,?side_1),
  ~Method_Modifier("abstract", ?method,?side_2),
  ~Method_Modifier("abstract", ?method,?side_3),
  ?sum = ?side_1 + ?side_2 +?side_3,
  merge_strat(3,?sum,?side).

DirectSubclass(?a, ?c,?side):-
  DirectSuperclass(?a, ?c,?side).

Subclass(?c, ?a,?side):-
  DirectSubclass(?a, ?c,?side).

Subclass(?c, ?a,?side):-
  Subclass(?b, ?a,?side_1),
  DirectSubclass(?b, ?c,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

Superclass(?c, ?a,?side):-
  Subclass(?a, ?c,?side).
Superinterface(?k, ?c,?side):-
  DirectSuperinterface(?c, ?k,?side).

Superinterface(?k, ?c,?side):-
  DirectSuperinterface(?c, ?j,?side_1),
  Superinterface(?k, ?j,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

Superinterface(?k, ?c,?side):-
  DirectSuperclass(?c, ?super,?side_1),
  Superinterface(?k, ?super,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

SupertypeOf(?s, ?t,?side):-
  SubtypeOf(?t, ?s,?side).

SubtypeOf(?s, ?s,?side):-
  isClassType(?s,?side).
  
SubtypeOf(?s, ?t,?side):-
  Subclass(?t, ?s,?side).

SubtypeOf(?s, ?t,?side):-
  isClassType(?s,?side),
  Superinterface(?t, ?s,?side).

SubtypeOf(?s, ?t,?side):-
  isInterfaceType(?s,?side),
  isType(?t,?side),
  ?t = "java.lang.Object".

SubtypeOf(?s, ?s,?side):-
  isInterfaceType(?s,?side).

SubtypeOf(?s, ?t,?side):-
  isInterfaceType(?s,?side_1),
  Superinterface(?t, ?s,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  isArrayType(?s,?side_1),
  isType(?t,?side_2),
  ?t = "java.lang.Object",
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  ComponentType(?s, ?sc,?side_1),
  ComponentType(?t, ?tc,?side_2),
  isReferenceType(?sc,?side_3),
  isReferenceType(?tc,?side_4),
  SubtypeOf(?sc, ?tc,?side_5),
  ?sum = ?side_1 + ?side_2 +  ?side_3 +  ?side_4 +  ?side_5,
  merge_strat(5,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  isArrayType(?s,?side_1),
  isInterfaceType(?t,?side_2),
  isType(?t,?side_3),
  ?t = "java.lang.Cloneable",
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  isArrayType(?s,?side_1),
  isInterfaceType(?t,?side_2),
  isType(?t,?side_3),
  ?t = "java.io.Serializable",
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


SubtypeOf(?t, ?t,?side):-
  isType(?t,?side).
  
%SubtypeOfDifferent(?s, ?t,?side):-
%  SubtypeOf(?s,?t,?side),
%  ?s != ?t.


SameMethod("<java.util.prefs.Base64: void main(java.lang.String[])>",0).
SameMethod("<sun.java2d.loops.GraphicsPrimitiveMgr: void main(java.lang.String[])>",0).
SameMethod("<sun.security.provider.PolicyParser: void main(java.lang.String[])>",0).


MainMethodDeclaration(?method,?side):-
  MainClass(?type,?side),
  Method_DeclaringType(?method, ?type,?side_1),
  Method_SimpleName(?method, "main",?side_2),
  Method_Descriptor(?method, "void(java.lang.String[])",?side_3),
  Method_Modifier("public", ?method,?side_4),
  Method_Modifier("static", ?method,?side_5),
  ~SameMethod(?method,?side_1),~SameMethod(?method,?side_2),
  ~SameMethod(?method,?side_3),~SameMethod(?method,?side_4),
  ~SameMethod(?method,?side_5),  
  ?sum = ?side_1 + ?side_2  + ?side_3 + ?side_4 + ?side_5,
  merge_strat(5,?sum,?side).


ClassInitializer(?type, ?method,?side):-
  MethodImplemented("<clinit>", "void()", ?type, ?method,?side).


InitializedClass1(?superclass,?side):-
  InitializedClass1(?class,?side_1),
  DirectSuperclass(?class, ?superclass,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

InitializedClass1(?superinterface,?side):-
  InitializedClass1(?classOrInterface,?side_1),
  DirectSuperinterface(?classOrInterface, ?superinterface,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


InitializedClass1(?class,?side):-
  MainMethodDeclaration(?method,?side_1),
  Method_DeclaringType(?method, ?class,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


InitializedClass1(?class,?side):-
  Reachable1(?inmethod,?side_1),
  AssignHeapAllocation(?heap, _, ?inmethod,?side_2),
  HeapAllocation_Type(?heap, ?class,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


InitializedClass1(?class,?side):-
  Reachable1(?inmethod,?side),
  Instruction_Method(?invocation, ?inmethod,?side_1),
  isStaticMethodInvocation_Insn(?invocation,?side_2),
  MethodInvocation_Method(?invocation, ?signature,?side_3),
  Method_DeclaringType(?signature, ?class,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).


InitializedClass1(?classOrInterface,?side):-
 Reachable1(?inmethod,?side_1),
 StoreStaticField(_, ?signature, ?inmethod,?side_2),
 Field_DeclaringType(?signature, ?classOrInterface,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


InitializedClass1(?classOrInterface,?side):-
 Reachable1(?inmethod,?side_1),
 LoadStaticField(?signature, _, ?inmethod,?side_2),
 Field_DeclaringType(?signature, ?classOrInterface, ?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


Reachable1(?clinit,?side):-
 InitializedClass1(?class,?side_1),
 ClassInitializer(?class, ?clinit,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


Assign1(?actual, ?formal,?side):-
  CallGraphEdge1(?invocation, ?method,?side_1),
  FormalParam(?index, ?method, ?formal,?side_2),
  ActualParam(?index, ?invocation, ?actual,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


Assign1(?return, ?local,?side):-
  CallGraphEdge1(?invocation, ?method,?side_1),
  ReturnVar(?return, ?method,?side_2),
  AssignReturnValue(?invocation, ?local,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

VarPointsTo1(?heap, ?var,?side):-
  AssignHeapAllocation(?heap, ?var, ?inMethod,?side_1),
  Reachable1(?inMethod,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


VarPointsTo1(?heap, ?to,?side):-
  Assign1(?from, ?to,?side_1),
  VarPointsTo1(?heap, ?from,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


VarPointsTo1(?heap, ?to,?side):-
  Reachable1(?inmethod,?side_1),
  AssignLocal(?from, ?to, ?inmethod,?side_2),
  VarPointsTo1(?heap, ?from,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

 
VarPointsTo1(?heap, ?to,?side):-
  Reachable1(?method,?side_1),
  AssignCast(?type, ?from, ?to, ?method,?side_2),
  SupertypeOf(?type, ?heaptype,?side_3),
  HeapAllocation_Type(?heap, ?heaptype,?side_4),
  VarPointsTo1(?heap, ?from,?side_5),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5,
  merge_strat(5,?sum,?side).

 
ArrayIndexPointsTo1(?baseheap, ?heap,?side):-
  Reachable1(?inmethod,?side_1),
  StoreArrayIndex(?from, ?base, ?inmethod,?side_2),
  VarPointsTo1(?baseheap, ?base,?side_3),
  VarPointsTo1(?heap, ?from,?side_4),
  HeapAllocation_Type(?heap, ?heaptype,?side_5),
  HeapAllocation_Type(?baseheap, ?baseheaptype,?side_6),
  ComponentType(?baseheaptype, ?componenttype,?side_7),
  SupertypeOf(?componenttype, ?heaptype,?side_8),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8,
  merge_strat(7,?sum,?side).


VarPointsTo1(?heap, ?to,?side):-
  Reachable1(?inmethod,?side_1),
  LoadArrayIndex(?base, ?to, ?inmethod,?side_2),
  VarPointsTo1(?baseheap, ?base,?side_3),
  ArrayIndexPointsTo1(?baseheap, ?heap,?side_4),
  Var_Type(?to, ?type,?side_5),
  HeapAllocation_Type(?baseheap, ?baseheaptype,?side_6),
  ComponentType(?baseheaptype, ?basecomponenttype,?side_7),
  SupertypeOf(?type, ?basecomponenttype,?side_8),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8,
  merge_strat(8,?sum,?side).

VarPointsTo1(?heap, ?to,?side):-
  Reachable1(?inmethod,?side_1),
  LoadInstanceField(?base, ?signature, ?to, ?inmethod,?side_2),
  VarPointsTo1(?baseheap, ?base,?side_3),
  InstanceFieldPointsTo1(?heap, ?signature, ?baseheap,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 ,
  merge_strat(4,?sum,?side).
 
InstanceFieldPointsTo1(?heap, ?fld, ?baseheap,?side):-
  Reachable1(?inmethod,?side_1),
  StoreInstanceField(?from, ?base, ?fld, ?inmethod,?side_2),
  VarPointsTo1(?heap, ?from,?side_3),
  VarPointsTo1(?baseheap, ?base,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).
 
VarPointsTo1(?heap, ?to,?side):-
  Reachable1(?inmethod,?side_1),
  LoadStaticField(?fld, ?to, ?inmethod,?side_2),
  StaticFieldPointsTo1(?heap, ?fld,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).
  
StaticFieldPointsTo1(?heap, ?fld,?side):-
  Reachable1(?inmethod,?side_1),
  StoreStaticField(?from, ?fld, ?inmethod,?side_2),
  VarPointsTo1(?heap, ?from,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


VarPointsTo1(?heap, ?this,?side):-
  Reachable1(?inMethod,?side_1),
  Instruction_Method(?invocation, ?inMethod,?side_2),
  VirtualMethodInvocation_Base(?invocation, ?base,?side_3),
  VarPointsTo1(?heap, ?base,?side_4),
  HeapAllocation_Type(?heap, ?heaptype,?side_5),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename,?side_6),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side_7),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod,?side_8),
  ThisVar(?toMethod, ?this,?side_9),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8 + ?side_9,
  merge_strat(9,?sum,?side).
 
% Problem:  VirtualMethodInvocation introduces sides 1 and 10 through new variables
% the ?base-variable is compared in the rule but never added
% so we need to fold bc. both side have different ?base values but the are not included in the result

Reachable1(?toMethod,?side),
CallGraphEdge1(?invocation, ?toMethod,?side):-
  Reachable1(?inMethod,?side_1),
  Instruction_Method(?invocation, ?inMethod,?side_2),
  VirtualMethodInvocation_Base(?invocation, ?base,?side_3),
  VarPointsTo1(?heap, ?base,?side_4),
  HeapAllocation_Type(?heap, ?heaptype,?side_5),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename,?side_6),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side_7),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod,?side_8),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8,
  merge_strat(8,?sum,?side).
 

Reachable1(?tomethod,?side),
CallGraphEdge1(?invocation, ?tomethod,?side):-
  Reachable1(?inmethod,?side_1),
  StaticMethodInvocation(?invocation, ?tomethod, ?inmethod,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

Reachable1(?tomethod,?side),
CallGraphEdge1(?invocation, ?tomethod,?side),
VarPointsTo1(?heap, ?this,?side):-
  Reachable1(?inmethod,?side_1),
  Instruction_Method(?invocation, ?inmethod,?side_2),
  SpecialMethodInvocation_Base(?invocation, ?base,?side_3),
  VarPointsTo1(?heap, ?base,?side_4),
  MethodInvocation_Method(?invocation, ?tomethod,?side_5),
  ThisVar(?tomethod, ?this,?side_6),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 ,
  merge_strat(6,?sum,?side).
 
Reachable1(?method,?side):-
  MainMethodDeclaration(?method,?side).


% more folding yeah :'(


CallGraphEdge(?invocation, ?toMethod,0),
CallGraphEdge2(?invocation, ?toMethod,0):-
  CallGraphEdge1(?invocation, ?toMethod,?side_1),
  CallGraphEdge1(?invocation, ?toMethod,?side_2),
  ?side_1 != ?side_2.

CallGraphEdge(?invocation, ?toMethod,?side_1):-
  CallGraphEdge1(?invocation, ?toMethod,?side_1),
  ~CallGraphEdge2(?invocation, ?toMethod,_).
  
VarPointsTo(?heap, ?this,0),
VarPointsTo2(?heap, ?this,0):-
  VarPointsTo1(?heap, ?this,?side_1),
  VarPointsTo1(?heap, ?this,?side_2),
  ?side_1 != ?side_2.

VarPointsTo(?heap, ?this,?side_1):-
  VarPointsTo1(?heap, ?this,?side_1),
  ~VarPointsTo2(?heap, ?this,_).


StaticFieldPointsTo(?heap, ?fld,0),
StaticFieldPointsTo2(?heap, ?fld,0):-
  StaticFieldPointsTo1(?heap, ?fld,?side_1),
  StaticFieldPointsTo1(?heap, ?fld,?side_2),
  ?side_1 != ?side_2.

StaticFieldPointsTo(?heap, ?fld,?side_1):-
  StaticFieldPointsTo1(?heap, ?fld,?side_1),
  ~StaticFieldPointsTo2(?heap, ?fld,_).

Reachable(?method,0),
Reachable2(?method,0):-
  Reachable1(?method,?side_1),
  Reachable1(?method,?side_2),
  ?side_1 != ?side_2.

Reachable(?method,?side_1):-
  Reachable1(?method,?side_1),
  ~Reachable2(?method,_).

ArrayIndexPointsTo(?baseheap,?heap,0),
ArrayIndexPointsTo2(?baseheap,?heap,0):-
  ArrayIndexPointsTo1(?baseheap,?heap,?side_1),
  ArrayIndexPointsTo1(?baseheap,?heap,?side_2),
  ?side_1 != ?side_2.

ArrayIndexPointsTo(?baseheap,?heap,?side_1):-
  ArrayIndexPointsTo1(?baseheap,?heap,?side_1),
  ~ArrayIndexPointsTo2(?baseheap,?heap,_).

InstanceFieldPointsTo(?heap,?fld,?baseheap,0),
InstanceFieldPointsTo2(?heap,?fld,?baseheap,0):-
  InstanceFieldPointsTo1(?heap,?fld,?baseheap,?side_1),
  InstanceFieldPointsTo1(?heap,?fld,?baseheap,?side_2),
  ?side_1 != ?side_2.

InstanceFieldPointsTo(?heap,?fld,?baseheap,?side_1):-
  InstanceFieldPointsTo1(?heap,?fld,?baseheap,?side_1),
  ~InstanceFieldPointsTo2(?heap,?fld,?baseheap,_).

InitializedClass(?class,0),
InitializedClass2(?class,0):-
    InitializedClass1(?class,?side_1),
    InitializedClass1(?class,?side_2),
    ?side_1 != ?side_2.

InitializedClass(?class,?side_1):-
    InitializedClass1(?class,?side_1),
    ~InitializedClass2(?class,_).

Assign(?actual, ?formal,0),
Assign2(?actual, ?formal,0):-
    Assign1(?actual, ?formal,?side_1),
    Assign1(?actual, ?formal,?side_2),
    ?side_1 != ?side_2.

Assign(?actual, ?formal,?side_1):-
    Assign1(?actual, ?formal,?side_1),
    ~Assign2(?actual, ?formal,_).


@export Reachable :- tsv{resource="Reachable.tsv",format=(string,int)}.
@export VarPointsTo :- tsv{resource="VarPointsTo.tsv",format=(string,string,int)}.
@export CallGraphEdge :- tsv{resource="CallGraphEdge.tsv",format=(string,string,int)}.
@export Assign :- tsv{resource="Assign.tsv",format=(string,string,int)}.
@export AssignReturnValue :- tsv{resource="AssignReturnValue.tsv",format=(string,string,int)}.


@export MethodLookup :- tsv{resource="MethodLookup.tsv",format=(string,string,string,string,int)}.
@export isType :- tsv{resource="isType.tsv",format=(string,int)}.
@export isReferenceType :- tsv{resource="isReferenceType.tsv",format=(string,int)}.
@export isArrayType :- tsv{resource="isArrayType.tsv",format=(string,int)}.
@export isClassType :- tsv{resource="isClassType.tsv",format=(string,int)}.
@export isInterfaceType :- tsv{resource="isInterfaceType.tsv",format=(string,int)}.
@export ApplicationClass :- tsv{resource="ApplicationClass.tsv",format=(string,int)}.
@export Field_DeclaringType :- tsv{resource="Field_DeclaringType.tsv",format=(string,string,int)}.
@export Method_DeclaringType :- tsv{resource="Method_DeclaringType.tsv",format=(string,string,int)}.
@export Method_ReturnType :- tsv{resource="Method_ReturnType.tsv",format=(string,string,int)}.
@export Method_SimpleName :- tsv{resource="Method_SimpleName.tsv",format=(string,string,int)}.
@export Method_ParamTypes :- tsv{resource="Method_ParamTypes.tsv",format=(string,string,int)}.
@export ThisVar :- tsv{resource="ThisVar.tsv",format=(string,string,int)}.
@export Var_DeclaringMethod :- tsv{resource="Var_DeclaringMethod.tsv",format=(string,string,int)}.
@export HeapAllocation_Type :- tsv{resource="HeapAllocation_Type.tsv",format=(string,string,int)}.
@export Instruction_Method :- tsv{resource="Instruction_Method.tsv",format=(string,string,int)}.
@export isVirtualMethodInvocation_Insn :- tsv{resource="isVirtualMethodInvocation_Insn.tsv",format=(string,int)}.
@export isStaticMethodInvocation_Insn :- tsv{resource="isStaticMethodInvocation_Insn.tsv",format=(string,int)}.
@export FieldInstruction_Signature :- tsv{resource="FieldInstruction_Signature.tsv",format=(string,string,int)}.
@export LoadInstanceField_Base :- tsv{resource="LoadInstanceField_Base.tsv",format=(string,string,int)}.
@export LoadInstanceField_To :- tsv{resource="LoadInstanceField_To.tsv",format=(string,string,int)}.
@export StoreInstanceField_From :- tsv{resource="StoreInstanceField_From.tsv",format=(string,string,int)}.
@export StoreInstanceField_Base :- tsv{resource="StoreInstanceField_Base.tsv",format=(string,string,int)}.
@export LoadStaticField_To :- tsv{resource="LoadStaticField_To.tsv",format=(string,string,int)}.
@export StoreStaticField_From :- tsv{resource="StoreStaticField_From.tsv",format=(string,string,int)}.
@export LoadArrayIndex_Base :- tsv{resource="LoadArrayIndex_Base.tsv",format=(string,string,int)}.
@export LoadArrayIndex_To :- tsv{resource="LoadArrayIndex_To.tsv",format=(string,string,int)}.
@export StoreArrayIndex_From :- tsv{resource="StoreArrayIndex_From.tsv",format=(string,string,int)}.
@export StoreArrayIndex_Base :- tsv{resource="StoreArrayIndex_Base.tsv",format=(string,string,int)}.
@export AssignInstruction_To :- tsv{resource="AssignInstruction_To.tsv",format=(string,string,int)}.
@export AssignCast_From :- tsv{resource="AssignCast_From.tsv",format=(string,string,int)}.
@export AssignCast_Type :- tsv{resource="AssignCast_Type.tsv",format=(string,string,int)}.
@export AssignLocal_From :- tsv{resource="AssignLocal_From.tsv",format=(string,string,int)}.
@export AssignHeapAllocation_Heap :- tsv{resource="AssignHeapAllocation_Heap.tsv",format=(string,string,int)}.
@export ReturnNonvoid_Var :- tsv{resource="ReturnNonvoid_Var.tsv",format=(string,string,int)}.
@export MethodInvocation_Method :- tsv{resource="MethodInvocation_Method.tsv",format=(string,string,int)}.
@export VirtualMethodInvocation_Base :- tsv{resource="VirtualMethodInvocation_Base.tsv",format=(string,string,int)}.
@export VirtualMethodInvocation_SimpleName :- tsv{resource="VirtualMethodInvocation_SimpleName.tsv",format=(string,string,int)}.
@export VirtualMethodInvocation_Descriptor :- tsv{resource="VirtualMethodInvocation_Descriptor.tsv",format=(string,string,int)}.
@export SpecialMethodInvocation_Base :- tsv{resource="SpecialMethodInvocation_Base.tsv",format=(string,string,int)}.
@export MethodInvocation_Base :- tsv{resource="MethodInvocation_Base.tsv",format=(string,string,int)}.
@export Method_Descriptor :- tsv{resource="Method_Descriptor.tsv",format=(string,string,int)}.
@export MethodImplemented :- tsv{resource="MethodImplemented.tsv",format=(string,string,string,string,int)}.
@export DirectSubclass :- tsv{resource="DirectSubclass.tsv",format=(string,string,int)}.
@export Subclass :- tsv{resource="Subclass.tsv",format=(string,string,int)}.
@export Superclass :- tsv{resource="Superclass.tsv",format=(string,string,int)}.
@export DirectSuperclass :- tsv{resource="DirectSuperclass.tsv",format=(string,string,int)}.
@export Superinterface :- tsv{resource="Superinterface.tsv",format=(string,string,int)}.
@export SubtypeOf :- tsv{resource="SubtypeOf.tsv",format=(string,string,int)}.
@export SupertypeOf :- tsv{resource="SupertypeOf.tsv",format=(string,string,int)}.
%@export SubtypeOfDifferent :- tsv{resource="SubtypeOfDifferent.tsv",format=(string,string,int)}.
@export MainMethodDeclaration :- tsv{resource="MainMethodDeclaration.tsv",format=(string,int)}.
@export LoadInstanceField :- tsv{resource="LoadInstanceField.tsv",format=(string,string,string,string,int)}.
@export StoreInstanceField :- tsv{resource="StoreInstanceField.tsv",format=(string,string,string,string,int)}.
@export LoadStaticField :- tsv{resource="LoadStaticField.tsv",format=(string,string,string,int)}.
@export StoreStaticField :- tsv{resource="StoreStaticField.tsv",format=(string,string,string,int)}.
@export LoadArrayIndex :- tsv{resource="LoadArrayIndex.tsv",format=(string,string,string,int)}.
@export StoreArrayIndex :- tsv{resource="StoreArrayIndex.tsv",format=(string,string,string,int)}.
@export AssignCast :- tsv{resource="AssignCast.tsv",format=(string,string,string,string,int)}.
@export AssignLocal :- tsv{resource="AssignLocal.tsv",format=(string,string,string,int)}.
@export AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.tsv",format=(string,string,string,int)}.
@export ReturnVar :- tsv{resource="ReturnVar.tsv",format=(string,string,int)}.
@export StaticMethodInvocation :- tsv{resource="StaticMethodInvocation.tsv",format=(string,string,string,int)}.
@export SameMethod :- tsv{resource="SameMethod.tsv",format=(string,int)}.
@export ClassInitializer :- tsv{resource="ClassInitializer.tsv",format=(string,string,int)}.
@export InitializedClass :- tsv{resource="InitializedClass.tsv",format=(string,int)}.
@export InstanceFieldPointsTo :- tsv{resource="InstanceFieldPointsTo.tsv",format=(string,string,string,int)}.
@export StaticFieldPointsTo :- tsv{resource="StaticFieldPointsTo.tsv",format=(string,string,int)}.
@export ArrayIndexPointsTo :- tsv{resource="ArrayIndexPointsTo.tsv",format=(string,string,int)}.
@export MainClass :- tsv{resource="MainClass.tsv",format=(string,int)}.
@export merge_strat :- tsv{resource="merge_strat.tsv",format=(string,string,int)}.

%% Vergleichsversion, wo folding nur am Ende funktioniert
%