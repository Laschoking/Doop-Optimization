//
// Examples of handling sequences over a given alphabet.
//


// given: an alphabet

.decl num_letters(l:number) input

.decl a(l:number) input

// produces a list of all strings up to a certain length

// define finit number range (120 - enough space for all words up to lenght 4)
.decl n(x:number) 
n(0).
n(x+1) :- n(x), num_letters(n), x < n.

// define successor function
.decl s(x:number,y:number) 
s(x,x+1) :- n(x).

// define addition
.decl add(x:number,y:number,r:number)
add(x,0,x) :- n(x).
add(x,y,r) :- s(py,y), add(x,py,pr), s(pr,r).

// define multiplication
.decl mul(x:number,y:number,r:number)
mul(x,0,0) :- n(x).
mul(x,y,r) :- s(py,y), mul(x,py,pr), add(pr,x,r).


// define exponent
.decl exp(x:number,y:number,r:number)
exp(x,0,1) :- n(x).
exp(x,y,r) :- s(py,y), exp(x,py,pr), mul(pr,x,r).


// compute logarithm
.decl log(x:number,b:number,r:number)
log(x,b,r) :- exp(b,r,y), s(r,sr), exp(b,sr,y2), n(x), y <= x, x < y2.


// define integer div
.decl div(x:number, y:number, r:number)
div(x,y,r) :- mul(r,y,a), add(a,z,x), 0<=z, z<y.

// define modular
.decl mod(x:number, y:number, r:number) 
mod(x,y,r) :- mul(y,_,z), add(z,r,x), 0<=r, r<y.




//////////////////// TRIE ////////////////////////

.decl trie_letter(i:number,a:number) 
trie_letter(i,r) :- s(x,i), num_letters(n), mod(x,n,r).

.decl trie_level_end(l:number,i:number)
trie_level_end(0,0).
trie_level_end(l,i) :- num_letters(n), s(pl,l), trie_level_end(pl,b), exp(n,l,p), add(b,p,i).

.decl trie_level_start(l:number,i:number)
trie_level_start(0,0).
trie_level_start(l,i) :- s(pl,l), trie_level_end(pl,b), add(b,1,i).


.decl trie_level(i:number,l:number)
trie_level(0,0).
trie_level(i,b) :- n(i), s(a,b), trie_level_end(a,low), trie_level_end(b,high), low<i, i<=high.

.decl trie_parent(i:number,p:number)
trie_parent(i,p) :- num_letters(n), trie_level(i,l), s(pl,l), trie_level_start(l,b), add(b,x,i), div(x,n,o), trie_level_start(pl,c), add(c,o,p).

.decl trie_root(x:number)
trie_root(0).

.decl trie(x:number)
trie(x) :- trie_letter(x,_).


////////////// all strings over the alphabeth ////////////////

.decl str(x:number)
str(x) :- trie(x).

.decl str_len(id:number, l:number) 
str_len(id,l) :- trie_level(id, l).

.decl str_chain(id:number,parents:number) 
str_chain(id,id) :- trie(id).
str_chain(id,p) :- str_chain(id,x), trie_parent(x,p).

.decl str_letter_at(id:number, pos:number, l:number) 
str_letter_at(id,pos,l) :- str_chain(id,p), trie_level(p,pos), trie_letter(p,l).



////////////// example sequences ////////////////////



// search all palindrome

.decl palin_aux(s:number, a:number, b:number) 
palin_aux(s,x,x) :- str(s), n(x), str_len(s,l), x<=l.
palin_aux(s,x,x+1) :- str_letter_at(s,x,_).
palin_aux(s,x,sy) :- str_letter_at(s,x,a), s(x,sx), palin_aux(s,sx,y), str_letter_at(s,y,a), s(y,sy).

.decl palindrome(s:number) output
palindrome(s) :- str_len(s,0).
palindrome(s) :- palin_aux(s,1,sl), str_len(s,l), s(l,sl).


.decl debug_str(x:number)
debug_str(96).

.decl read(x:number,y:number) output
read(x,y) :- debug_str(s), str_letter_at(s,x,y).




