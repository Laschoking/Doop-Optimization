// Array
// Simple array data structure.

// The default or NULL value for an element of the array.
.decl default(null:number)
default(0).

// The parameters to the array, including its length.
.decl parameters(length:number) input

// The values of the elements in the array, specified by index. Note that any unspecified elements will take the default value.
.decl values(index:number, value:number) input

// The indices of the array, used as a background set to ground the index parameter of elements.
.decl indices(index:number) output
indices(0).
indices(i+1) :- indices(i), parameters(l), i >= 0, i+1 < l.

// The elements of the array, referenced by an index, and having a specified value. Note that if a value is not specified an element takes the default value.
.decl element(index:number, value:number) output
element(i, NULL) :- indices(i), !values(i, _), default(NULL).
element(i, x) :- indices(i), values(i, x).

// The value of the element to the left of the element specified by the index, or the default value if it is out of the array bounds.
.decl left(index:number, value:number)
left(i, NULL) :- !element(i-1, _), element(i, _), default(NULL).
left(i, x) :- element(i-1, x), element(i, _).

// The value of the element to the right of the element specified by the index, or the default value if it is out of bounds.
.decl right(index:number, value:number)
right(i, NULL) :- !element(i+1, _), element(i, _), default(NULL).
right(i, x) :- element(i+1, x), element(i, _).

// The local neighbourhood of a specified element, giving the value of that element, and the elements surrounding it.
.decl neighbourhood(index:number,
  left:number, current:number, right:number) output
neighbourhood(i, l, c, r) :-
  left(i, l), element(i, c), right(i, r).



// Cellular Automata
// Simulation of elementary cellular automaton to a given number of generations.

// The termination time, the simulation will stop after the given number of generations.
.decl terminate(time:number) input

// The transition function, giving the value of a cell at time t+1 from the values of that cell and its local environment at time t.
.decl transition(prev:number, center:number, next:number, value:number) 

transition( 0,0,0, 0).
transition( 0,0,1, 0).
transition( 0,1,0, 0).
transition( 0,1,1, 1).
transition( 1,0,0, 0).
transition( 1,0,1, 1).
transition( 1,1,0, 1).
transition( 1,1,1, 0).

// The value of the cell to the left of the cell specified by the index at the given time, or the default value if it is out of the array bounds.
.decl prev(time:number, index:number, value:number)
prev(t, i, NULL) :- !element(i-1, _), cell(t, i, _), default(NULL).
prev(t, i, x) :- cell(t, i-1, x), element(i, _).

// The value of the cell to the right of the cell specified by the index at the given time, or the default value if it is out of the array bounds.
.decl next(time:number, index:number, value:number)
next(t, i, NULL) :- !element(i+1, _), cell(t, i, _), default(NULL).
next(t, i, x) :- cell(t, i+1, x), element(i, _).

// The cells, referenced by a time and their index in the backing array of elements, and having a value that is either 0 or 1.
.decl cell(time:number, index:number, value:number) printsize

// The value of a cell at time 0 is the value of its backing element.
cell(0, i, x) :- element(i, x).

// The value of a cell at time t+1 is given by the transition function on the value of the local environment at time t.
cell(t+1, i, x) :- !terminate(t), environment(t, i, l, c, r), transition(l, c, r, x).

// The local environment of a cell, giving the value of the specified cell at time t, as well as that of its nearest neighbours.
.decl environment(time:number, index:number, prev:number, center:number, next:number) printsize
environment(t, i, l, c, r) :-
  prev(t, i, l), cell(t, i, c), next(t, i, r).
