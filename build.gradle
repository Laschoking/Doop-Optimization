import java.nio.file.Files
import static java.nio.file.attribute.PosixFilePermissions.*

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'commons-io:commons-io:2.4'
    }
}

plugins {
    id 'antlr'
    id 'application'
    id 'groovy'
    id 'maven-publish'
    //see https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version '2.6.0'
}

// Warning: -Xss is restricted in recent Java versions.
def defaultFactGenJvmArgs = ["-DmaxHeapSize=12000m", "-DstackSize=1000m"]

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

group = "org.clyze"

//For the doop app
mainClassName = "org.clyze.doop.Main"

//def heapDLVersion = "master-SNAPSHOT"
def heapDLVersion = "1.1.4"
if (project.hasProperty('heapDLVersion'))
    heapDLVersion = project.property('heapDLVersion')

wrapper {
    gradleVersion = "5.4.1"
}

def allGeneratorProjects = subprojects.findAll { it.name.indexOf('fact-generator') >= 0 }
allGeneratorProjects.each {
    //common configuration for all generator sub-projects
    it.with {
        apply(plugin: 'java')

        group = gradle.rootProject.group
        sourceCompatibility = gradle.rootProject.sourceCompatibility
        targetCompatibility = gradle.rootProject.targetCompatibility

        repositories {
            mavenLocal()
            mavenCentral()
            maven { url "http://centauri.di.uoa.gr:8081/artifactory/plast-deps" }
            maven { url "http://centauri.di.uoa.gr:8081/artifactory/plast-public" }
        }
    }
}

def frontendGeneratorProjects = allGeneratorProjects.findAll { it.name.indexOf('common') == -1 }
//all frontends have a fatJar task, which we explicitly (re)define it here, so we can reference it without issues in
//the publishing spec
frontendGeneratorProjects.each {
    it.tasks.create('fatJar', Jar)
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://centauri.di.uoa.gr:8081/artifactory/plast-deps" }
    maven { url "http://centauri.di.uoa.gr:8081/artifactory/plast-public" }
    maven {
        name "soot-snapshot"
        url "https://soot-build.cs.uni-paderborn.de/nexus/repository/soot-snapshot"
    }
    maven {
        name "soot-release"
        url "https://soot-build.cs.uni-paderborn.de/nexus/repository/soot-release"
    }
    if (heapDLVersion == "master-SNAPSHOT")
        maven { url 'https://jitpack.io' }
}

configurations {
    apktool {
        transitive = false
    }
}

configurations.all {
    //This is required for SNAPSHOT dependencies
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    //This is required for dependencies using the "+" notation
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

compileGroovy {
    groovyOptions.optimizationOptions.indy = true
}

// Set dependency version so that they are available to subprojects.
gradle.rootProject.ext.groovyVersion="2.5.7"
gradle.rootProject.ext.clueCommonVersion='3.13.0'
gradle.rootProject.ext.spockVersion='1.3-groovy-2.5'
// Set other variables for subprojects.
gradle.rootProject.ext.resourcesDir='resources'

dependencies {
    apktool "ext:apktool:2.4.0"                                 // needed for decoding APK inputs
    compile project(':generators:fact-generator-common')
    compile "org.clyze:clue-common:${clueCommonVersion}",
            "org.codehaus.groovy:groovy-all:${groovyVersion}",  // Groovy
            "org.codehaus.groovy:groovy-cli-commons:${groovyVersion}", // Command line processor (Groovy wrapper)
            "commons-logging:commons-logging:1.1",              // Logging wrapper
            "log4j:log4j:1.2.14",                               // Logging implementation
            "commons-cli:commons-cli:1.2",                      // Command line processor
            "commons-io:commons-io:2.4",                        // File Utils
            "com.google.code.gson:gson:2.4",                    // GSON library
            "com.github.plast-lab:HeapDL:$heapDLVersion",
            "com.google.guava:guava:27.1-jre",
            "com.jcabi:jcabi-manifests:1.1"                     // manifest reader

    runtime "org.clyze:jphantom:1.2",                           // JPhantom is a runtime dependency
            "ext:herosclasses:1.1",
            "ext:axml:2.0"

    // JimpleParser
    antlr   "org.antlr:antlr4:4.5.1-1"
    compile "org.antlr:antlr4-runtime:4.5.1-1"

    testCompile "org.spockframework:spock-core:${spockVersion}"
}

applicationDistribution.from(file("$projectDir/logic")) {
    into 'logic'
}

applicationDistribution.from(file("$projectDir/souffle-logic")) {
    into 'souffle-logic'
}

applicationDistribution.from(file("${projectDir}/${resourcesDir}")) {
    into resourcesDir
}

applicationDistribution.from(projectDir) {
    include 'docs', 'COLLABORATORS', 'LICENSE', 'README.md'
}

def testSubprojects = [ '016-reflection', '104-method-references', '107-lambdas', '115-invokedynamic' ]

testSubprojects.each {
    def path = "tests/${it}/build/libs"
    applicationDistribution.from(file("$projectDir/${path}")) { into path }
}

String doopCP() {
    return String.join(":", sourceSets.main.runtimeClasspath.collect { it.toString() })
}

jar {
    manifest {
        attributes('Doop-Ext-Classpath' : doopCP())
    }
}

run {
    //debug true
    // We set the DOOP_HOME environment variable (see org.clyze.doop.Main)
    environment.DOOP_HOME = projectDir
    if (project.hasProperty('args')) {
        args project.property('args').split()
    }
}

// Auxiliary task to print the environment variable needed for
// isolated execution of Soot-based front end.
task printExtClasspath {
    doLast {
        println(doopCP())
    }
}

task jimple2json(type: JavaExec) {
    description 'Generate JSON files from Jimple'
    group = 'Other'
    main = 'org.clyze.jimple.Main'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("args"))
        args project.property("args").split()
}

task scaler(type: JavaExec) {
    description 'Run Scaler'
    group = 'Other'
    main = 'ptatoolkit.scaler.doop.Main'
    classpath = sourceSets.main.runtimeClasspath.filter {
        !it.name.startsWith("zipper")
    }
    if (project.hasProperty("args"))
        args project.property("args").split()
    //jvmArgs = ['-Xmx=48g']
}

task zipper(type: JavaExec) {
    description 'Run Zipper'
    group = 'Other'
    main = 'ptatoolkit.zipper.doop.Main'
    classpath = sourceSets.main.runtimeClasspath.filter {
        !it.name.startsWith("scaler")
    }
    if (project.hasProperty("args"))
        args project.property("args").split()
    //jvmArgs = ['-Xmx=48g']
}

task soot(type: JavaExec) {
    description 'Run Soot front-end'
    group = 'Other'
    main = 'org.clyze.doop.soot.Main$Standalone'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("args"))
        args project.property("args").split()
    //jvmArgs = ['-Xmx=48g']
}


task souffleScript(type: JavaExec) {
    description 'Run a custom Souffle Script'
    group = 'Other'
    main = 'org.clyze.doop.utils.SouffleScriptMain'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("args"))
        args project.property("args").split()

}

task createEmptyProperties {
    doLast {
        def urls = sourceSets.main.runtimeClasspath.files.collect { it.toURI().toURL() } as URL[]
        def classloader = new URLClassLoader(urls, null as ClassLoader)
        Class
            .forName("org.clyze.doop.CommandLineAnalysisFactory", true, classloader)
            .createEmptyProperties(new File("empty.properties"))
    }
}

task resolveApktool {
    doLast {
        copy {
            from configurations.apktool.files[0]
            into "${projectDir}/${resourcesDir}"
        }
    }
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

test {
    // failFast = true
    maxParallelForks = 1
    // forkEvery = 1
    jvmArgs ['-DreservedCodeCacheSize=1g'] + defaultFactGenJvmArgs
    testLogging {
        exceptionFormat = 'full'
    }
    environment.DOOP_HOME = projectDir
    environment.HOME = Files.createTempDirectory("lb-test-home-dir", asFileAttribute(fromString("rwxrwxrwx"))).toString()
}

task buildTests {
    description 'Build test subprojects.'
}
testSubprojects.each { buildTests.dependsOn("tests:${it}:jar") }
test.dependsOn buildTests

task testAll(type: Test) { }
testAll.dependsOn test

def frontends = frontendGeneratorProjects.collect { it.name }

// Connect task dependencies against fact generator subprojects.
frontends.each { fg ->
    [ run, test, distTar, distZip ].each {
        it.dependsOn(":generators:${fg}:installJar")
        it.dependsOn resolveApktool
    }
    clean.dependsOn(":generators:${fg}:uninstallJar")
    testAll.dependsOn(":generators:${fg}:test")
}

// Uninstall resources on 'clean'.
task uninstallResources {
    doLast {
        def resDir = "${projectDir}/${resourcesDir}"
        file(resDir).list().each { f ->
            (frontends + ["apktool"]).each { res ->
                if (f.startsWith(res) && f.toLowerCase().endsWith("jar")) {
                    delete "${resDir}/${f}"
                }
            }
        }
    }
}
clean.dependsOn uninstallResources

task fullClean {
    description 'Clean everything, including caches and analysis results.'
    doLast {
        def out   = System.getenv('DOOP_OUT')   ?: "$projectDir/out"
        def cache = System.getenv('DOOP_CACHE') ?: "$projectDir/cache"
        def tmp   = System.getenv('DOOP_TMP')   ?: "$projectDir/tmp"
        file(out      ).list().each { f -> delete "$out/$f" }
        file(cache    ).list().each { f -> delete "$cache/$f" }
        file(tmp      ).list().each { f -> delete "$tmp/$f" }
        file('results').list().each { f -> delete "results/$f" }
        org.apache.commons.io.FileUtils.deleteQuietly(new File('last-analysis'))
    }
}
fullClean.dependsOn clean

task printClasspath {
    doLast {
        configurations.compile.each { println it }
    }
}


if (project.hasProperty('artifactory_user')) {

    // Generate a jar with all the logic files
    task logicFilesJar(type: Jar) {
        into('logic') { from "logic" }
        into('souffle-logic') { from "souffle-logic" }
        into('souffle-scripts') { from "souffle-scripts" }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact logicFilesJar {
                    classifier "logic-files"
                }
            }

            allGeneratorProjects.each { p ->
                create(p.name, MavenPublication) {
                    def taskThatGeneratesTheArtifact = p.hasProperty('fatJar') ? p.fatJar : p.jar
                    artifact(taskThatGeneratesTheArtifact) {
                        groupId 'org.clyze'
                        artifactId p.name
                    }
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username artifactory_user
                    password artifactory_password
                }
                url "$artifactory_contextUrl/libs-public-release-local"
            }
        }
    }

    release {
        failOnSnapshotDependencies = false

        git {
           commitVersionFileOnly = true
        }
    }

    afterReleaseBuild.dependsOn publish

    tasks.release.doLast {
        println "WARNING: Tag may not be pushed upstream, please use:"
        println "WARNING:   git remote add upstream <UPSTREAM_REPO>"
        println "WARNING:   git push upstream <TAG>"
    }
}

/* Handy for debugging task dependencies
gradle.taskGraph.whenReady {taskGraph ->
    println "Found task graph: " + taskGraph
    println "Found " + taskGraph.allTasks.size() + " tasks."
    taskGraph.allTasks.forEach { task ->
        println task
        task.dependsOn.forEach { dep ->
            println "  - " + dep
        }
    }
}
*/
