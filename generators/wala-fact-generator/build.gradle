dependencies {
    compile project(':generators:fact-generator-common')
    compile "org.python:jython:2.7.1b3",
            /// https://mvnrepository.com/artifact/com.ibm.wala/com.ibm.wala.util
            //"com.ibm.wala:com.ibm.wala.util:1.4.3",
            "ext:com.ibm.wala.util:1.5.1-SNAPSHOT",
            /// https://mvnrepository.com/artifact/com.ibm.wala/com.ibm.wala.core
            //"com.ibm.wala:com.ibm.wala.core:1.4.3",
            "ext:com.ibm.wala.core:1.5.1-SNAPSHOT",
            /// https://mvnrepository.com/artifact/com.ibm.wala/com.ibm.wala.shrike
            //"com.ibm.wala:com.ibm.wala.shrike:1.4.3",
            "ext:com.ibm.wala.shrike:1.5.1-SNAPSHOT",
            /// https://mvnrepository.com/artifact/com.ibm.wala/com.ibm.wala.dalvik
            //"com.ibm.wala:com.ibm.wala.dalvik:1.4.3"
            "ext:com.ibm.wala.dalvik:1.5.1-SNAPSHOT",
            "ext:com.ibm.wala.cast:1.5.1-SNAPSHOT",
            "ext:com.ibm.wala.cast.java:1.5.1-SNAPSHOT",
            "ext:com.ibm.wala.cast.python:0.0.1-SNAPSHOT",
            "ext:com.ibm.wala.cast.lsp:0.0.1-SNAPSHOT"
            //"commons-cli:commons-cli:1.3.1",
            //"org.eclipse.lsp4j:org.eclipse.lsp4j:0.4.0"
}

//fatJar already exists
fatJar {
    manifest {
        attributes 'Main-Class': 'org.clyze.doop.wala.Main'
    }
    from { configurations.compile.collect { it.directory ? it : zipTree(it) } }
    with jar
}

task installJar(type: Copy) {
    from fatJar.outputs.files.singleFile
    into("../../${resourcesDir}")
}
installJar.dependsOn fatJar

task uninstallJar() {
    doLast {
        def jar = fatJar.outputs.files.singleFile
        if (jar && jar.name) { delete "../../${resourcesDir}/${jar.name}" }
    }
}